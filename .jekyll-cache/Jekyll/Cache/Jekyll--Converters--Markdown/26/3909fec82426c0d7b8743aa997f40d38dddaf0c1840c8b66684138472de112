I"F+<p>본 프로젝트는 클라우드컴퓨팅연구조합(CCCR)에서 클라우드 네이티브 환경에서 DevSecOps 툴 체인 파이프라인을 구축하는 프로젝트입니다.</p>

<p>9월에 시작하여 11월 27일까지 진행되고 현재 진행 중이며, 내용이 긴 만큼 여러 포스트를 나눠 기록하고자 합니다.</p>

<blockquote>
  <p><strong>본 포스트의 내용은 프로젝트 도중 작성되어 추후 변경될 수 있음을 알립니다.</strong></p>
</blockquote>

<hr />

<h2 id="목차">목차</h2>

<p><a href="#list1">1. 프로젝트 개요</a></p>

<p><a href="#list1_2">   1.1. 프로젝트 소개</a></p>

<p><a href="#list1_2">   1.2. 프로젝트 목적</a></p>

<p><a href="#list1_3">   1.3. 프로젝트 아키텍처</a></p>

<p><a href="#list2">2. 환경 구성</a></p>

<p><a href="#list2_1">   2.1. GCP(Google Cloud Platform) 구성</a></p>

<p><a href="#list2_2">   2.2. 쿠버네티스 구성</a></p>

<p><a href="#list2_3">   2.3. Gitlab 및 Jenkins 구성</a></p>

<p><br /></p>

<hr />

<h2 id="1-프로젝트-개요---"><span style="color:purple"><strong>1. 프로젝트 개요</strong></span>   <a name="list1"></a></h2>

<p><br /></p>

<ul>
  <li>
    <p><strong>프로젝트 소개</strong>   <a name="list1_1"></a></p>

    <p>많은 기업들이 클라우드 환경으로의 디지털 트랜스포메이션을 진행하면서, 기존의 보안 쳬계와 다른 클라우드 네이티브 환경에서의 보안을 어렵게 생각하는 경우가 많습니다.</p>

    <p>온프레미스와는 전혀 다른 방식으로 보안을 구현해야하는 필요성이 대두되었고, 클라우드 환경에서는 기업마다 다른 개발환경과 개발문화로 인한 변화의 폭이 훨씬 크므로, 자동화되고 가시화된 개발보안방법론인 DevSecOps 쳬계를 적용하므로써 빠르게 변화하는 서비스 개발 속도에 발맞춰 보안의 속도도 따라가야 할 필요가 있습니다.</p>

    <p><br /></p>
  </li>
  <li>
    <p><strong>프로젝트 목적</strong>   <a name="list1_2"></a></p>

    <p>본 프로젝트를 통해 클라우드 네이티브 환경에서 DevSecOps 체계를 구현하는데 필요한 툴 체인들을 이해하고, <code class="language-plaintext highlighter-rouge">보안이 적용된 다양한 툴 체인 파이프라인 방법들을 구축</code>하고자 합니다.</p>

    <p><strong>클라우드 네이티브 환경에서의 DevSecOps 쳬계와 CI/CD 체계를 이해</strong>하고, 이 체계에 적용되는 보안 분석 도구들을 구축하여 <strong>실제 서비스 개발 프로세스에 적용할 수 있는 DevSecOps 툴체인 파이프라인 구축하는 것이 목적</strong>입니다.</p>

    <p><br /></p>
  </li>
  <li>
    <p><strong>프로젝트 아키텍처</strong>   <a name="list1_3"></a></p>

    <p>본 프로젝트의 아키텍처는 다음 [그림 1]과 같습니다.</p>

    <table>
      <thead>
        <tr>
          <th style="text-align: center"><img src="/static/assets/img/landing/project/devsecops_1.png" alt="devops_architecture" width="778" height="513" /></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td style="text-align: center">[그림 1] DevOps 아키텍처</td>
        </tr>
      </tbody>
    </table>

    <p><br /></p>

    <p>Gitlab, Jenkins, Harbor, Helm을 이용해 CI(Continuous Integration)를, Jenkins, argoCD, Kubernetes를 통해 CD(Continuous Delivery/Continuous Deploy) 환경을 구축하고 파이프라인 실행 결과를 Slack으로 전달합니다.</p>

    <p>그리고 서비스 운영에 필요한 로깅 시스템은 EFK(Elasticsearch-Fluentd-Kibana)를, 모니터링 시스템은 Prometheus, Grafana를 쿠버네티스의 서비스 형태로 구축하였습니다.</p>

    <p><br /></p>

    <blockquote>
      <p>[그림 1]은 현재(2020-10-17)까지 진행된 부분이며, Security에 대한 파이프라인은 미완성으로 추후 아키텍처를 업데이트 할 예정입니다.</p>
    </blockquote>

    <p><br /></p>
  </li>
</ul>

<hr />

<h2 id="2-환경-구성---"><span style="color:purple"><strong>2. 환경 구성</strong></span>   <a name="list2"></a></h2>

<p><br /></p>

<ul>
  <li>
    <p><strong>GCP(Google Cloud Platform) 구성</strong>   <a name="list2_1"></a></p>

    <p>GCP의 기능으로 있는 GKE(Google Kubernetes Engine)을 사용하여 손 쉽게 쿠버네티스 환경을 구성할 수 있지만, 현재는 테스트용으로 인스턴스를 따로 생성하여 <code class="language-plaintext highlighter-rouge">kubeadm</code>을 통해 쿠버네티스를 구성할 것 입니다.</p>

    <p>따라서 다음 [그림 2]와 같이 GCP 인스턴스를 생성해줍니다.</p>

    <table>
      <thead>
        <tr>
          <th style="text-align: center"><img src="/static/assets/img/landing/project/devsecops_2.png" alt="gcp_instance" /></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td style="text-align: center">[그림 2] GCP 인스턴스 생성</td>
        </tr>
      </tbody>
    </table>

    <p><br /></p>

    <p>인스턴스 생성할 때의 설정은 다음과 같습니다.</p>

    <ul>
      <li>
        <p>리전: asia-northeast3(서울)</p>
      </li>
      <li>
        <p>머신 계열: n1-standard-2(vCPU 2개, 7.5GB 메모리)</p>
      </li>
      <li>
        <p>부팅 디스크: CentOS 7</p>
      </li>
      <li>
        <p>액세스 범위: 모든 Cloud API에 대한 전체 액세스 허용</p>
      </li>
      <li>
        <p>방화벽: HTTP/HTTPS 트래픽 허용</p>
      </li>
    </ul>

    <p>추가로 [VPC 네트워크] - [외부 IP 주소] 탭에 들어가 각 인스턴스들의 IP를 고정으로 바꿔주었습니다.</p>

    <p><br /></p>
  </li>
  <li>
    <p><strong>쿠버네티스 구성</strong>   <a name="list2_2"></a></p>

    <p>위에서 언급하였듯 생성한 인스턴스에 kubeadm 명령을 통해 쿠버네티스를 구성합니다.</p>

    <p>먼저 kube-master, kube-worker1, kube-worker2 모두 동일하게 아래의 명령을 실행하도록 합니다.</p>

    <ul>
      <li>
        <p>쿠버네티스 설치를 위한 모든 과정은 root 권한으로 진행합니다.</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">sudo </span>su -
</code></pre></div>        </div>
      </li>
      <li>
        <p>스왑 메모리 사용 중지합니다.</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  swapoff <span class="nt">-a</span>
  <span class="nb">echo </span>0 <span class="o">&gt;</span> /proc/sys/vm/swappiness
  <span class="nb">sed</span> <span class="nt">-e</span> <span class="s1">'/swap/ s/^#*/#/'</span> <span class="nt">-i</span> /etc/fstab
</code></pre></div>        </div>

        <p>Swap은 디스크의 일부 공간을 메모리처럼 사용하는 기능입니다. 
  Kubelet이 정상 동작할 수 있도록 swap 디바이스와 파일 모두 disable 합니다.</p>
      </li>
      <li>
        <p>각 노드의 통신을 원활하게 하기 위해 방화벽을 해제하고 SELinux를 비활성화 시켜줍니다.</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  systemctl disable firewalld
  systemctl stop firewalld

  setenforce 0
  <span class="nb">sed</span> <span class="nt">-i</span> <span class="s1">'s/^SELINUX=enforcing$/SELINUX=permissive/'</span> /etc/selinux/config
</code></pre></div>        </div>
      </li>
      <li>
        <p>RHEL과 CentOS 7에서 iptables 관련 이슈가 있어 커널 매개변수를 다음과 같이 수정하고 적용합니다.</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">cat</span> <span class="o">&lt;&lt;</span><span class="no">EOF</span><span class="sh"> &gt;  /etc/sysctl.d/k8s.conf
  net.bridge.bridge-nf-call-ip6tables = 1
  net.bridge.bridge-nf-call-iptables = 1
</span><span class="no">  EOF

</span>  sysctl <span class="nt">--system</span>
</code></pre></div>        </div>
      </li>
      <li>
        <p>br_netfilter 모듈을 활성화합니다.</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  modprobe br_netfilter
</code></pre></div>        </div>

        <p>br_netfilter 모듈을 명시적으로 추가한 후에 <code class="language-plaintext highlighter-rouge">lsmod | grep br_netfilter</code> 명령어로 추가 여부를 확인할 수 있습니다.</p>
      </li>
      <li>
        <p>도커 및 쿠버네티스 설치 후 서비스 시작</p>

        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  yum <span class="nt">-y</span> update
  yum <span class="nb">install </span>docker <span class="nt">-y</span>
  systemctl <span class="nb">enable </span>docker <span class="o">&amp;&amp;</span> systemctl start docker.service

  <span class="nb">cat</span> <span class="o">&lt;&lt;</span><span class="no">EOF</span><span class="sh"> &gt; /etc/yum.repos.d/kubernetes.repo
  [kubernetes]
  name=Kubernetes
  baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
  enabled=1
  gpgcheck=1
  repo_gpgcheck=1
  gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
  exclude=kube*
</span><span class="no">  EOF

</span>  yum <span class="nt">-y</span> update
  yum <span class="nb">install</span> <span class="nt">-y</span> yum-utils device-mapper-persistent-data lvm2
  yum-config-manager <span class="nt">--add-repo</span> https://download.docker.com/linux/centos/docker-ce.repo 
  yum update <span class="o">&amp;&amp;</span> yum <span class="nb">install </span>docker-ce-18.06.2.ce
  yum <span class="nb">install</span> <span class="nt">-y</span> <span class="nt">--disableexcludes</span><span class="o">=</span>kubernetes kubeadm-1.15.5-0.x86_64 kubectl-1.15.5-0.x86_64 kubelet-1.15.5-0.x86_64
  systemctl <span class="nb">enable </span>kubelet <span class="o">&amp;&amp;</span> systemctl start kubelet
</code></pre></div>        </div>

        <p>본 프로젝트에서는 <code class="language-plaintext highlighter-rouge">헬스체크 이슈</code>, <code class="language-plaintext highlighter-rouge">대쉬보드 호환성</code>의 이유로 비교적 안정적인 쿠버네티스를 1.15 버전으로 설치하였습니다.</p>

        <blockquote>
          <p>처음에 1.19 버전으로 설치했었다가 쿠버네티스 클러스터의 매트릭을 수집해주는 <strong>kube-state-metrics</strong>이 정상적으로 작동하지 않아 1.15버전으로 재설치한 것입니다.</p>
        </blockquote>
      </li>
    </ul>

    <p><br /></p>
  </li>
  <li>
    <p><strong>Gitlab 및 Jenkins 구성</strong>   <a name="list2_3"></a></p>

    <p><br /></p>
  </li>
</ul>

:ET