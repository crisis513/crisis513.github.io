I"0<p>본 프로젝트는 CCCR에서 짧은 기간동안 진행된 세미 프로젝트입니다.</p>

<hr />

<h2 id="목차">목차</h2>

<p><a href="#list1">1. 프로젝트 개요</a></p>

<p><a href="#list1_2">   1.1. 프로젝트 목적</a></p>

<p><a href="#list1_2">   1.2. 프로젝트 아키텍처</a></p>

<p><a href="#list1_3">   1.3. 취약점 분석 평가 항목</a></p>

<p><a href="#list2">2. 프로젝트 구현</a></p>

<p><a href="#list2_1">   2.1. Cloud SQL 구성</a></p>

<p><a href="#list2_2">   2.2. VM 인스턴스 생성 및 워드프레스 구축</a></p>

<p><a href="#list2_3">   2.3. VM 인스턴스와 Cloud SQL 연동</a></p>

<p><a href="#list3">3. 프로젝트 테스트</a></p>

<p><a href="#list3_1">   3.1. Cloud SQL 로깅 테스트</a></p>

<p><a href="#list3_2">   3.2. 오토 스케일링 및 부하 테스트</a></p>

<p><br /></p>

<hr />

<h2 id="1-프로젝트-개요---"><span style="color:purple"><strong>1. 프로젝트 개요</strong></span>   <a name="list1"></a></h2>

<p><br /></p>

<ul>
  <li>
    <p><strong>프로젝트 목적</strong>   <a name="list1_1"></a></p>

    <p>본 프로젝트는 KISA에서 작성된 <a href="https://www.kisa.or.kr/public/laws/laws3_View.jsp?cPage=6&amp;mode=view&amp;p_No=259&amp;b_No=259&amp;d_No=106&amp;ST=T&amp;SV=">주요정보통신기반시설 기술적 취약점 분석 평가 상세 가이드</a> 문서를 참고하여 기술적인 취약 여부를 검함으로써 악성코드 유포, 해킹 등 사이버 위협에 대응하기 위해 시작하게 된 프로젝트입니다.</p>

    <p>가이드의 문서를 숙지하기 어려운 부분이 많기 때문에 보안 담당자들이 취약점 점검을 자동으로 손쉽게 취약점 진단을 진행할 수 있도록 운영체제 취약점 진단 자동화 스크립트를 개발하고 배포합니다.</p>

    <p>취약점 점검을 손쉽게 진행할 수 있도록 자동화 스크립트를 개발하고 진단 결과를 한 눈에 확인할 수 있도록 가시화된 데이터를 제공하는 것을 목표로 합니다.</p>

    <p><br /></p>
  </li>
  <li>
    <p><strong>프로젝트 아키텍처</strong>   <a name="list1_2"></a></p>

    <p>다음 [그림 1]은 진단 스크립트를 실행하는 것부터 Kibana에서 로그를 확인하는 일련의 과정을 테스트하기 위한 환경을 아키텍처로 나타낸 것입니다.</p>

    <table>
      <thead>
        <tr>
          <th style="text-align: center"><img src="/static/assets/img/landing/project/diagnosis_1.png" alt="project_architecture" /></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td style="text-align: center">[그림 1] 프로젝트 아키텍처</td>
        </tr>
      </tbody>
    </table>

    <p><br /></p>

    <p>테스트는 Virtualbox에서 진행되었으며, ELK Stack이 설치되어 있는 VM과 진단할 여러 대의 VM을 구성하여 테스트까지 진행하였습니다.</p>

    <p><strong>명령어 하나로 [그림 1]의 과정이 모두 진행</strong>되며, 스크립트를 실행하는 명령어의 <strong>매개변수에 입력되는 노드</strong>들까지 모두 취약점 진단이 되어 Kibana에서 진단 결과를 확인할 수 있습니다.</p>

    <p><br /></p>
  </li>
  <li>
    <p><strong>취약점 분석 평가 항목</strong>   <a name="list1_3"></a></p>

    <p>취약점 분석은 <code class="language-plaintext highlighter-rouge">CentOS 7</code> 환경에서 진행되며 <code class="language-plaintext highlighter-rouge">항목 중요도가 상</code>인 진단 항목을 몇 가지 선택하여 진단 스크립트를 작성하였습니다.</p>

    <p>본 프로젝트에서 선택한 진단 항목은 다음 [그림 2]와 같습니다.</p>

    <table>
      <thead>
        <tr>
          <th style="text-align: center"><img src="/static/assets/img/landing/project/diagnosis_2.png" alt="analysis_list" /></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td style="text-align: center">[그림 2] 진단 항목 리스트</td>
        </tr>
      </tbody>
    </table>

    <p><br /></p>
  </li>
</ul>

<hr />

<h2 id="2-프로젝트-구현---"><span style="color:purple"><strong>2. 프로젝트 구현</strong></span>   <a name="list2"></a></h2>

<p><br /></p>

<ul>
  <li>
    <p><strong>스크립트 디렉토리 구조</strong>   <a name="list2_1"></a></p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="o">[</span>son@elk linux_diagnosis]<span class="nv">$ </span>tree <span class="nb">.</span>
  <span class="nb">.</span>
  ├── lib
  │   ├── diagnosis_1
  │   ├── diagnosis_2
  │   └── <span class="k">function</span>
  ├── log
  │   └── diagnosis_script.debug
  ├── main_diagnosis.sh
  └── U-13_filelist

  2 directories, 6 files
</code></pre></div>    </div>

    <p><br /></p>

    <p>본 프로젝트에서 취약점을 진단하기 위해 사용되는 스크립트의 디렉토리 구조를 나타낸다. 각 파일들에 대한 설명은 다음과 같습니다.</p>

    <ul>
      <li>lib/diagnosis_1 : KISA 가이드 문서의 ‘계정 관리’ 진단 부분을 실행하는 파일</li>
      <li>lib/diagnosis_2 : KISA 가이드 문서의 ‘파일 및 디렉토리 관리’ 진단 부분을 실행하는 파일</li>
      <li>lib/function : 스크립트를 실행하면서 남겨지는 로그와 Elasticsearch로 데이터를 전송할 때 필요한 함수들을 정의한 파일</li>
      <li>log/diagnosis_script.debug : main_diagnosis.sh 스크립트에서 실행되는 명령어와 실행 결과를 기록한 파일</li>
      <li>main_diagnosis.sh : 취약점 진단을 위한 스크립트 실행 파일</li>
      <li>U-13_filelist : U-13 항목에서 진단할 파일 리스트를 작성한 파일</li>
    </ul>

    <p><br /></p>
  </li>
  <li>
    <p><strong>스크립트 실행</strong>   <a name="list2_2"></a></p>

    <p>취약점 진단에는 시스템 파일을 확인하는 경우가 많기 때문에 root로 실행하거나 sudo를 앞에 삽입하여 실행하도록 구현했습니다.</p>

    <p>다음 [그림 3]은 일반 유저로 스크립트를 실행했을 때의 결과입니다.</p>

    <table>
      <thead>
        <tr>
          <th style="text-align: center"><img src="/static/assets/img/landing/project/diagnosis_3.png" alt="failed_execute" /></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td style="text-align: center">[그림 3] 일반 유저의 스크립트 실행 실패</td>
        </tr>
      </tbody>
    </table>

    <p><br /></p>

    <p>스크립트가 재대로 실행되었을 때의 화면은 다음 [그림 4]와 같이 출력됩니다.</p>

    <table>
      <thead>
        <tr>
          <th style="text-align: center"><img src="/static/assets/img/landing/project/diagnosis_4.png" alt="succeed_execute" /></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td style="text-align: center">[그림 4] 정상적인 스크립트 실행 결과</td>
        </tr>
      </tbody>
    </table>

    <p><br /></p>

    <p>root 권한과 함께 스크립트를 실행하면 정상적으로 취약점 진단이 실행되며, 항목 코드 별로 진단 결과가 출력됩니다.</p>

    <p><span style="color:green">[Good]</span>은 해당 항목에서 진단한 결과가 양호하다는 것입니다.</p>

    <p><span style="color:red">[Weak]</span>는 진단 결과가 취약하게 나왔으므로 <span style="color:blue">[Info]</span>를 통해 취약점을 보완해야 함을 의미합니다.</p>

    <p>이러한 결과 로그는 스크립트 실행과 동시에 Elasticsearch에 전달되어 Kibana에서 확인할 수 있습니다.</p>

    <p>위의 [그림 4]처럼 main_diagnosis.sh를 실행시킬 때 매개변수로 client.cccr.local의 호스트네임을 매개변수로 넣어서 실행시켰을 때 다음의 [그림 5]와 같이 elk.cccr.local 에서의 진단이 끝나면 곧바로 이어서 매개변수에 기입된 호스트에 대한 진단을 진행하게 됩니다.</p>

    <table>
      <thead>
        <tr>
          <th style="text-align: center"><img src="/static/assets/img/landing/project/diagnosis_5.png" alt="execute_with_ssh" /></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td style="text-align: center">[그림 5] ssh를 이용하여 매개변수에 기입된 호스트 진단</td>
        </tr>
      </tbody>
    </table>

    <p><br /></p>

    <p>마찬가지로 client.cccr.local 호스트의 진단 결과도 Kibana에서 바로 확인할 수 있습니다. \</p>

    <p>아래의 [그림 6]은 진단 스크립트를 실행시키면서 실행되는 명령어들이 재대로 수행되는지 xtrace를 통해 디버깅할 수 있도록 만든 것입니다.</p>

    <table>
      <thead>
        <tr>
          <th style="text-align: center"><img src="/static/assets/img/landing/project/diagnosis_6.png" alt="debug_sample" /></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td style="text-align: center">[그림 6] diagnosis_script.debug 실행 샘플</td>
        </tr>
      </tbody>
    </table>

    <p><br /></p>

    <p>진단하면서 실행되는 코드는 xtrace를 통해 디버깅해볼 수 있도록 log/diagnosis_script.debug 파일로 저장되어 진단이 끝난 후에 확인해볼 수 있습니다.</p>

    <p>elk.cccr.local, client.cccr.local에서 실행되는 코드 모두 elk.cccr.local 호스트의 log/diagnosis_script.debug 파일을 통해 확인할 수 있습니다.</p>

    <p>그리고 다음 [그림 7]은 다른 호스트까지 원격 진단할 수 있도록 개발한 코드입니다.</p>

    <table>
      <thead>
        <tr>
          <th style="text-align: center"><img src="/static/assets/img/landing/project/diagnosis_7.png" alt="remote_execute_code" /></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td style="text-align: center">[그림 7] elk.cccr.local에서 다른 호스트로의 원격 진단 코드</td>
        </tr>
      </tbody>
    </table>

    <p><br /></p>

    <p>예를 들어 <code class="language-plaintext highlighter-rouge">$ sudo ./main_diagnosis.sh client</code> 라고 명령어를 입력하면 호스트의 취약점 진단이 끝난 후에 /etc/hosts에 정의된 client 호스트네임을 가진 노드로 진단에 필요한 코드를 전송하여 ssh 접속을 통해 진단을 수행하도록 하였습니다.</p>

    <table>
      <thead>
        <tr>
          <th style="text-align: center"><img src="/static/assets/img/landing/project/diagnosis_8.png" alt="output_log_code" /></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td style="text-align: center">[그림 8] 진단 로그 출력과 Elasticsearch로의 로그 전송 코드</td>
        </tr>
      </tbody>
    </table>

    <p><br /></p>

    <p>위의 [그림 8]은 진단 결과를 출력해주는 진단 로그를 출력해주는 함수와 Elasticsearch로 로그를 전송하는 함수를 정의한 것입니다.</p>

    <p>콘솔에서 진단 결과를 출력해주는 함수는 print_good(), print_weak(), print_info() 로 정의되어 있고, 콘솔에 출력하는 동시에 Elasticsearch로 로그를 보내게 됩니다.</p>
  </li>
</ul>

<p><br /></p>

<hr />

<h2 id="3-프로젝트-테스트---"><span style="color:purple"><strong>3. 프로젝트 테스트</strong></span>   <a name="list3"></a></h2>

<p><br /></p>

<ul>
  <li>
    <p><strong>Cloud SQL 로깅 테스트</strong>   <a name="list3_1"></a></p>

    <p>서비스 중인 워드프레스 서버에서 Cloud SQL에 대한 접속을 시도하는데 다음 [그림 26]과 같이 패스워드를 잘못 입력한 상황입니다.</p>

    <table>
      <thead>
        <tr>
          <th style="text-align: center"><img src="/static/assets/img/landing/project/gcp_toyproject_26.png" alt="cloudsql_connection_failure" /></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td style="text-align: center">[그림 26] Cloud SQL 접속 실패</td>
        </tr>
      </tbody>
    </table>

    <p><br /></p>
  </li>
</ul>
:ET