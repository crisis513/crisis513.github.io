I"
<p>본 프로젝트는 CCCR에서 GCP(Google Cloud Platform)를 공부하며 짧은 기간 진행된 토이 프로젝트입니다.</p>

<hr />

<h2 id="목차">목차</h2>

<p><a href="#list1">1. 프로젝트 개요</a></p>

<p><a href="#list2">2. 프로젝트 구현</a></p>

<p><a href="#list2_1">   2.1. CloudSQL 생성</a></p>

<p><a href="#list2_2">   2.2. 인스턴스 생성</a></p>

<p><a href="#list2_3">   2.3. Wordpress 구축 및 CloudSQL 연동</a></p>

<p><a href="#list2_4">   2.4. 스냅샷을 통한 복제 및 NFS 설정</a></p>

<p><a href="#list2_5">   2.5. 비관리형 로드밸런싱 구성</a></p>

<p><a href="#list2_6">   2.6. Bucket 생성 및 백업 설정</a></p>

<p><a href="#list2_7">   2.7. Stack Driver를 활용한 모니터링 및 로깅 시스템 구축</a></p>

<p><a href="#list3">3. 프로젝트 테스트</a></p>

<hr />

<h2 id="1-프로젝트-개요---"><span style="color:purple"><strong>1. 프로젝트 개요</strong></span>   <a name="list1"></a></h2>

<p><br /></p>

<p>먼저, 프로젝트 진행 당시에 정리했던 프로젝트 진행 순서는 다음 [그림 1]과 같습니다.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center"><img src="/static/assets/img/landing/gcp_toyproject_1.png" alt="What we did" width="560" height="310" /></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">[그림 1] 프로젝트 진행 순서</td>
    </tr>
  </tbody>
</table>

<p><br /></p>

<p>웹서비스는 CentOS 인스턴스를 생성하여 워드프레스(Wordpress)를 구축하였고, 구축한 웹서비스에 GCP의 기능을 최대한 활용하는 형태로 프로젝트를 진행했습니다.</p>

<p>GCP에서 제공해주는 Cloud DNS를 이용하여 도메인을 설정해보고 싶었지만, 도메인을 구입하고 등록하는 과정이 필요하여 생략했습니다.</p>

<p>다음 [그림 2]는 본 프로젝트의 구조를 쉽게 나타낼 수 있도록 아키텍처를 그린 것입니다.</p>

<p><br /></p>

<table>
  <thead>
    <tr>
      <th style="text-align: center"><img src="/static/assets/img/landing/gcp_toyproject_2.png" alt="What we did" width="850" height="400" /></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">[그림 2] 프로젝트 아키텍처</td>
    </tr>
  </tbody>
</table>

<p><br /></p>

<h3 id="environment">Environment</h3>

<p><br /></p>

<h4 id="1-ssustack--ssustack_installer-클론">1. ssustack &amp; ssustack_installer 클론</h4>

<p>OpenStack 환경을 구성하는 모든 노드에서 진행합니다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git clone http://git.dotstack.io/crisis513/ssustack.git
$ git clone http://git.dotstack.io/dotstack/ssustack_installer.git
$ cd ssustack/bin
$ ./ssustack_user_creation.sh
$ cp -r &lt;your_controller_path&gt;/ssustack/ .
</code></pre></div></div>

<p>생성할 유저의 패스워드를 설정하여 ssustack 유저가 생성되면 ssustack 폴더를 ssustack 유저의 홈 디렉토리로 복사합니다.</p>

<p><br /></p>

<h4 id="2-network-설정">2. network 설정</h4>

<p>모든 노드의 네트워크 인터페이스를 수정 후 재부팅해주어야 합니다. 먼저 Controller node의 경우, 외부와의 통신을 위한 네트워크와 오픈스택 컴포넌트들이 서로 API를 호출할 때 사용하는 내부 네트워크, VM 인스턴스들이 외부와 통신하기 위한 메뉴얼 네트워크를 설정해주어야 합니다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sudo vi /etc/network/interfaces
auto &lt;INTERFACE_NAME_1&gt;
iface &lt;INTERFACE_NAME_1&gt; inet static
    address &lt;PUBLIC_IP&gt;
    netmask &lt;PUBLIC_IP_NETMASK&gt;
    gateway &lt;PUBLIC_IP_GATEWAY&gt;
    dns-servernames &lt;DNS_NAMESERVERS&gt;
auto &lt;INTERFACE_NAME_2&gt;
iface &lt;INTERFACE_NAME_2&gt; inet static
    address 10.10.10.11
    netmask 255.255.255.0
auto &lt;INTERFACE_NAME_3&gt;
iface &lt;INTERFACE_NAME_3&gt; inet manual
up ip link set dev $IFACE up
down ip link set dev $IFACE down
</code></pre></div></div>

<p>Compute node의 경우, 메뉴얼 네트워크가 필요없다. 오픈스택 설치가 정상적으로 설치되고나면 외부와의 통신은 필요없어 외부 네트워크를 OSD들 간의 통신을 위한 스토리지 네트워크로 설정하여 사용해도 됩니다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sudo vi /etc/network/interfaces
auto &lt;INTERFACE_NAME_1&gt;
iface &lt;INTERFACE_NAME_1&gt; inet static
    address &lt;PUBLIC_IP&gt;
    netmask &lt;PUBLIC_IP_NETMASK&gt;
    gateway &lt;PUBLIC_IP_GATEWAY&gt;
    dns-servernames &lt;DNS_NAMESERVERS&gt;
auto &lt;INTERFACE_NAME_2&gt;
iface &lt;INTERFACE_NAME_2&gt; inet static
    address 10.10.10.21
    netmask 255.255.255.0
</code></pre></div></div>

<p><br /></p>

<h4 id="3-hosts-및-ssh-설정">3. hosts 및 SSH 설정</h4>

<p>위의 작업이 끝나면 Controller node에서 hosts 및 SSH 설정합니다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sudo vi /etc/hosts
10.10.10.11 controller-node
10.10.10.21 compute-node1 
10.10.10.22 compute-node2
10.10.10.23 compute-node3
    
$ cd ssustack/bin/
$ ./creating_ssh_keys.sh [&lt;host_name&gt; ... ]
ex) ./creating_ssh_keys.sh compute-node1 compute-node2 compute-node3
</code></pre></div></div>

<p><br /></p>

<h4 id="4-ssustack_installer-실행">4. ssustack_installer 실행</h4>

<p>ssustack_installer는 Controller node에서 실행시킵니다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ cd ssustack_installer/
$ ./app.sh
</code></pre></div></div>

<p>app.sh를 실행시키고나면 우분투 기본 브라우저로 사용되는 파이어폭스가 실행됩니다.</p>

<p><br /></p>

<h4 id="5-welcome-페이지">5. Welcome 페이지</h4>

<p>권장 사양과 현재 PC의 사양을 확인해보고 설치 전 작업이 재대로 되었는지 확인하고 다음으로 넘어갑니다.</p>

<p><br /></p>

<h4 id="6-enable-services-페이지">6. Enable Services 페이지</h4>

<p>Controller node 및 Compute node에서 설치할 서비스를 선택하고 넘어갑니다. 필수로 설치되어야하는 패키지의 경우 이미 체크되어 있습니다.</p>

<p><br /></p>

<h4 id="7-environment-settings-페이지">7. Environment Settings 페이지</h4>

<p>각각의 Controller node 및 Compute node에서 설정되어야 할 ip, subnet, hostname, password 등을 설정하고 다음으로 넘어갑니다.</p>

<p><br /></p>

<h4 id="8-installing-페이지">8. Installing 페이지</h4>

<p>앞의 설정이 재대로 되어있는지 확인해보고 Start 버튼을 눌러주고 설치 로그를 확인해줍니다.</p>

<blockquote>
  <p>한 번만 누르고 브라우저를 종료하면 안됩니다.</p>
</blockquote>

<p><br /></p>

<h4 id="9-finished-페이지">9. Finished 페이지</h4>

<p>정상적으로 설치되었는지 확인하고 종료합니다.</p>

<p><br /></p>

<h4 id="10-추가-설정">10. 추가 설정</h4>

<p>아래 비디오에서 Ceph OSD를 추가하고, Horizon에서 네트워크를 생성하고, 우분투 이미지를 업로드하여 인스턴스 생성 및 테스트하는 부분까지 보여줍니다. (10:30)</p>

<p><br /></p>

<h3 id="testing-video">Testing video</h3>

<video width="840" height="480" src="/static/assets/video/ssustack_working.mp4" controls=""></video>

<blockquote>
  <p>영상이 재생되지 않는다면 IE 환경에서 다시 재생해보세요.</p>
</blockquote>
:ET