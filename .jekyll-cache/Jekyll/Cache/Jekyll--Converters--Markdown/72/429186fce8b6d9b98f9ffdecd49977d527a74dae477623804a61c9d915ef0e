I"j?<p>본 프로젝트는 클라우드컴퓨팅연구조합(CCCR)에서 클라우드 네이티브 환경에서 DevSecOps 툴 체인 파이프라인을 구축하는 프로젝트입니다.</p>

<p>9월에 시작하여 11월 27일까지 진행되고 현재 진행 중이며, 내용이 긴 만큼 여러 포스트를 나눠 기록하고자 합니다.</p>

<blockquote>
  <p><strong>본 포스트의 내용은 프로젝트 도중 작성되어 추후 변경될 수 있음을 알립니다.</strong></p>
</blockquote>

<hr />

<h2 id="목차">목차</h2>

<p><a href="#list1">1. CD(Continuous Delivery/Continuous Deployment) 구성</a></p>

<p><a href="#list1_1">   1.2. CD 란?</a></p>

<p><a href="#list1_2">   1.2. Jenkins - 쿠버네티스 연동</a></p>

<p><a href="#list1_3">   1.3. Jenkins-Slave 설정</a></p>

<p><a href="#list2">2. argoCD를 이용한 CD 구성</a></p>

<p><a href="#list2_1">   2.1. 파이프라인 테스트</a></p>

<p><br /></p>

<hr />

<h2 id="1-cdcontinuous-deliverycontinuous-deploy-구성---"><span style="color:purple"><strong>1. CD(Continuous Delivery/Continuous Deploy) 구성</strong></span>   <a name="list1"></a></h2>

<p><br /></p>

<ul>
  <li>
    <p><strong>CD 란?</strong>   <a name="list1_1"></a></p>

    <p>CD는 지속적인 지속적인 제공(Continuous Delivery) 또는 지속적인 배포(Continuous Deployment)를 의미합니다.</p>

    <p>이 두 용어는 상호 교환적으로 사용되며, 두 가지 의미 모두 파이프라인의 추가 단계에 대한 자동화를 뜻하지만 때로는 얼마나 많은 자동화가 이루어지고 있는지를 설명하기 위해 별도로 사용되기도 합니다.</p>

    <p>지속적인 제공이란 <strong>개발자들이 애플리케이션에 적용한 변경 사항이 버그 테스트를 거쳐 리포지토리에 자동으로 업로드</strong>되는 것을 뜻합니다.</p>

    <p>지속적인 배포란 <strong>개발자의 변경 사항을 리포지토리에서 고객이 사용 가능한 프로덕션 환경까지 자동으로 릴리스하는 것</strong>을 의미합니다.</p>

    <p>이는 애플리케이션 제공 속도를 저해하는 수동 프로세스로 인한 운영팀의 프로세스 과부하 문제를 해결하여 줍니다.</p>

    <p><br /></p>
  </li>
  <li>
    <p><strong>Jenkins - 쿠버네티스 연동</strong>   <a name="list1_2"></a></p>

    <p>Jenkins에서 쿠버네티스 클러스터와 연동하는 방법에 대해서 설명할 것입니다.</p>

    <p>Jenkins와 쿠버네티스의 구성은 <a href="https://crisis513.github.io/project/2020/10/03/devsecops1.html#list2_1">구축 환경 참고</a>를 참고해 주세요.</p>

    <table>
      <thead>
        <tr>
          <th style="text-align: center"><img src="/static/assets/img/landing/project/devsecops_3_1.png" alt="kubernetes_plugin" width="728" height="718" /></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td style="text-align: center">[그림 1] Jenkins에서 쿠버네티스 플러그인 설치</td>
        </tr>
      </tbody>
    </table>

    <p><br /></p>

    <p>다음은 설치된 쿠버네티스 플러그인에 대한 설정을 진행합니다.</p>

    <p>Jenkins 시스템 설정에서 맨 밑으로 내려가면 [그림 2]와 같이 클라우드 설정하는 부분이 나옵니다.</p>

    <table>
      <thead>
        <tr>
          <th style="text-align: center"><img src="/static/assets/img/landing/project/devsecops_3_2.png" alt="cloud_configuration" width="598" height="75" /></th>
          <th> </th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td style="text-align: center">[그림 2] Jenkins 시스템 설정에서 클라우드 설정 클릭</td>
          <td> </td>
        </tr>
      </tbody>
    </table>

    <p><br /></p>

    <p>여기서 <code class="highlighter-rouge">a separate configuration page</code>를 눌러 Configure Clouds 설정으로 들어옵니다.</p>

    <p>쿠버네티스 설정은 다음 [그림 3], [그림 4]와 같이 진행합니다.</p>

    <table>
      <thead>
        <tr>
          <th style="text-align: center"><img src="/static/assets/img/landing/project/devsecops_3_3.png" alt="" width="725" height="335" /></th>
          <th> </th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td style="text-align: center">[그림 3] 쿠버네티스 플러그인 설정</td>
          <td> </td>
        </tr>
      </tbody>
    </table>

    <p><br /></p>

    <p>Kubernetes URL은 kube-master 인스턴스에 접속하여</p>

    <table>
      <thead>
        <tr>
          <th style="text-align: center"><img src="/static/assets/img/landing/project/devsecops_3_4.png" alt="" width="910" height="601" /></th>
          <th> </th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td style="text-align: center">[그림 4]</td>
          <td> </td>
        </tr>
      </tbody>
    </table>

    <p><br /></p>
  </li>
  <li>
    <p><strong>Jenkins-Slave 설정</strong>   <a name="list1_3"></a></p>

    <p>Jenkins와 Gitlab을 성공적으로 연동시키고 나서 Jenkins 메인 화면에서 <code class="highlighter-rouge">새로운 Item</code> 탭을 눌러줍니다.</p>

    <p><br /></p>
  </li>
</ul>

<hr />

<h2 id="2-jenkins-파이프라인-설정---"><span style="color:purple"><strong>2. Jenkins 파이프라인 설정</strong></span>   <a name="list2"></a></h2>

<p><br /></p>

<ul>
  <li>
    <p><strong>Pipeline 설정 및 테스트</strong>   <a name="list2_1"></a></p>

    <p>[그림 5]에서 생성한 파이프라인의 <code class="highlighter-rouge">구성</code> 탭을 눌러서 다음 [그림 7]과 같이 Gitlab에 푸시되면 자동으로 파이프라인이 실행될 수 있도록 설정해줍니다.</p>

    <table>
      <thead>
        <tr>
          <th style="text-align: center"><img src="/static/assets/img/landing/project/devsecops_2_7.png" alt="gitlab_webhook" /></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td style="text-align: center">[그림 7] Gitlab 웹훅 설정</td>
        </tr>
      </tbody>
    </table>

    <p><br /></p>

    <p>아래로 쭉 내리면 [그림 8]과 같이 파이프라인 스크립트를 작성할 수 있는 공간이 있습니다.</p>

    <table>
      <thead>
        <tr>
          <th style="text-align: center"><img src="/static/assets/img/landing/project/devsecops_2_8.png" alt="echo_hello_world" /></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td style="text-align: center">[그림 8] Hello World 파이프라인 스크립트 작성</td>
        </tr>
      </tbody>
    </table>

    <p><br /></p>

    <p>Gitlab에 푸시했을 때 정상적으로 파이프라인이 작동하는지만 확인해보기 위해 ‘Hello World’를 출력하는 간단한 스크립트를 작성하여 설정을 저장했습니다.</p>

    <p><br /></p>

    <p>그러고나서 깃 푸시 이벤트를 보내면 다음 [그림 9]와 같이 자동으로 설정해둔 파이프라인이 정상적으로 실행되는 것을 확인할 수 있습니다.</p>

    <table>
      <thead>
        <tr>
          <th style="text-align: center"><img src="/static/assets/img/landing/project/devsecops_2_9.png" alt="pipeline_result" /></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td style="text-align: center">[그림 9] 파이프라인 실행 결과 확인</td>
        </tr>
      </tbody>
    </table>

    <p><br /></p>

    <p>실행된 파이프라인에 대한 로그는 해당 빌드 넘버를 클릭하여 <code class="highlighter-rouge">Console Output</code> 탭을 눌러 확인할 수 있습니다.</p>

    <table>
      <thead>
        <tr>
          <th style="text-align: center"><img src="/static/assets/img/landing/project/devsecops_2_10.png" alt="build_console" /></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td style="text-align: center">[그림 10] 파이프라인 실행 콘솔 로그 확인</td>
        </tr>
      </tbody>
    </table>

    <p><br /></p>

    <p>[그림 10]에서 볼 수 있듯이 정상적으로 파이프라인이 실행되어 콘솔에 ‘Hello World’ 문구가 출력된 것을 확인할 수 있습니다.</p>

    <p><br /></p>
  </li>
  <li>
    <p><strong>Jenkins - Docker 연동 및 파이프라인 테스트</strong>   <a name="list2_2"></a></p>

    <p>Gitlab과 Jenkins가 정상적으로 연동되어 Git Push에 의해 자동으로 파이프라인이 실행되는 부분까지 진행하였고 다음으로 파이프라인에서 git clone하여 프로젝트 폴더의 Dockerfile을 통해 빌드하여 Docker hub에 푸시하는 부분까지 진행하겠습니다.</p>

    <p>우선 Jenkins가 설치되어 있는 노드에서 Git 혹은 Docker 관련 스크립트 실행시 커맨드 에러가 발생할 수 있으므로 servers 인스턴스에서 다음 명령어를 통해 파이프라인에서 Git과 Docker 명령을 사용할 수 있도록 해줍니다.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nv">$ </span><span class="nb">sudo </span>yum <span class="nt">-y</span> update
  <span class="nv">$ </span><span class="nb">sudo </span>yum <span class="nt">-y</span> <span class="nb">install </span>docker docker-registry
</code></pre></div>    </div>

    <p>docker 명령을 입력했을 때 권한 에러를 해결하기 위한 설정도 해주어야 합니다.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nv">$ </span><span class="nb">sudo </span>usermod <span class="nt">-a</span> <span class="nt">-G</span> docker <span class="nv">$USER</span>
  <span class="nv">$ </span><span class="nb">sudo </span>service docker restart
  <span class="nv">$ </span><span class="nb">sudo chmod </span>777 /var/run/docker.sock
</code></pre></div>    </div>

    <p><br /></p>

    <p>그리고 Jenkins에서 [그림 11]에 보이는 Docker 관련 플러그인을 설치해줍니다.</p>

    <table>
      <thead>
        <tr>
          <th style="text-align: center"><img src="/static/assets/img/landing/project/devsecops_2_11.png" alt="docker_plugin_installation" width="788" height="319    " /></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td style="text-align: center">[그림 11] Jenkins에서 Docker 플러그인 설치</td>
        </tr>
      </tbody>
    </table>

    <p><br /></p>

    <p>다음으로 Docker hub에 로그인 할 계정의 Credentials을 생성해야 합니다.</p>

    <blockquote>
      <p>추후 Harbor로 변경할 예정입니다.</p>
    </blockquote>

    <table>
      <thead>
        <tr>
          <th style="text-align: center"><img src="/static/assets/img/landing/project/devsecops_2_12.png" alt="docker_hub_credentials" width="636" height="239" /></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td style="text-align: center">[그림 12] Docker hub credentials 생성</td>
        </tr>
      </tbody>
    </table>

    <p><br /></p>

    <p>위의 Docker 관련 설정이 정상적으로 완료되면 파이프라인 스크립트를 다음과 같이 작성해줍니다.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  pipeline <span class="o">{</span>
      environment <span class="o">{</span>
          registry <span class="o">=</span> <span class="s2">"crisis513/flask-app"</span>
          registryCredential <span class="o">=</span> <span class="s1">'crisis513'</span>
          dockerImage <span class="o">=</span> <span class="s1">''</span>
          releaseName <span class="o">=</span> <span class="s2">"flask-app"</span>
          release_version <span class="o">=</span> <span class="s1">'latest'</span>
      <span class="o">}</span>
      agent any
      stages <span class="o">{</span>
          stage<span class="o">(</span><span class="s1">'Cloning our Git'</span><span class="o">)</span> <span class="o">{</span>
              steps <span class="o">{</span>
                  git <span class="s1">'http://serversIP:8001/root/flask-app.git'</span>
              <span class="o">}</span>
          <span class="o">}</span>
          stage<span class="o">(</span><span class="s1">'Building docker image'</span><span class="o">)</span> <span class="o">{</span>
              steps <span class="o">{</span>
                  script <span class="o">{</span>
                      dockerImage <span class="o">=</span> docker.build registry + <span class="s2">":</span><span class="k">${</span><span class="nv">release_version</span><span class="k">}</span><span class="s2">"</span>
                  <span class="o">}</span>
              <span class="o">}</span>
          <span class="o">}</span>
          stage<span class="o">(</span><span class="s1">'Deploy docker image'</span><span class="o">)</span> <span class="o">{</span>
              steps <span class="o">{</span>
                  script <span class="o">{</span>
                      docker.withRegistry<span class="o">(</span> <span class="s1">''</span>, registryCredential <span class="o">)</span> <span class="o">{</span>
                          dockerImage.push<span class="o">()</span>
                      <span class="o">}</span>
                  <span class="o">}</span>
              <span class="o">}</span>
          <span class="o">}</span>
          stage<span class="o">(</span><span class="s1">'Cleaning up'</span><span class="o">)</span> <span class="o">{</span>
              steps <span class="o">{</span>
                  sh <span class="s2">"docker rmi </span><span class="nv">$registry</span><span class="s2">:</span><span class="k">${</span><span class="nv">release_version</span><span class="k">}</span><span class="s2">"</span>
              <span class="o">}</span>
          <span class="o">}</span>
      <span class="o">}</span>
  <span class="o">}</span>
</code></pre></div>    </div>

    <p>파이프라인은 다음과 같이 실행됩니다.</p>

    <p><strong>Gitlab 서버에서 flask-app 프로젝트를 가져와서 프로젝트 내의 Dockerfile을 통해 빌드하고 ‘crisis513’ 이라는 ID를 가진 credentials를 통해 Docker hub에 로그인 하여 해당 도커 레포지토리(registry)에 release_version에 해당하는 태그를 붙여 푸시하고 로컬에 생성된 도커 이미지는 삭제됩니다.</strong></p>

    <p>Dockerfile의 내용은 다음과 같습니다.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  FROM python:alpine

  RUN apk add <span class="nt">--no-cache</span> linux-headers build-base

  COPY requirements.txt /requirements.txt

  RUN pip <span class="nb">install</span> <span class="nt">-r</span> /requirements.txt

  COPY ./app /app
  WORKDIR /app
  RUN pip <span class="nb">install </span>flask

  RUN <span class="nb">touch </span>database.db
  RUN python ./setup.py

  EXPOSE 8080
  CMD <span class="o">[</span><span class="s2">"uwsgi"</span>, <span class="s2">"--ini"</span>, <span class="s2">"conf.ini"</span><span class="o">]</span>
</code></pre></div>    </div>

    <p>위의 파이프라인이 정상적으로 실행된 결과는 다음 [그림 13]과 같습니다.</p>

    <table>
      <thead>
        <tr>
          <th style="text-align: center"><img src="/static/assets/img/landing/project/devsecops_2_13.png" alt="docker_push_pipeline_result" width="858" height="382" /></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td style="text-align: center">[그림 13] Docker 푸시까지의 파이프라인 실행 결과</td>
        </tr>
      </tbody>
    </table>

    <p><br /></p>

    <p>여기까지 Gitlab - Jenkins - Docker를 연동하여 Git 푸시 이벤트가 발생했을 때 Git 프로젝트를 clone하여 Dockerfile을 빌드하여 Docker hub에 푸시하기까지의 과정을 모두 끝냈습니다.</p>

    <p>다음은 CD(Continuous Delivery/Continuous Deploy) 환경을 구성하는 방법에 대해 알아보겠습니다!</p>
  </li>
</ul>

:ET