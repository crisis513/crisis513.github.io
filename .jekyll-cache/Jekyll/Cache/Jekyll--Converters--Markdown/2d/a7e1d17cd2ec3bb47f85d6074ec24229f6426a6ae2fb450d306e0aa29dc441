I"-<h2 id="운영체제-역할">운영체제 역할</h2>

<p>운영체제는 응용 프로그램이 요청하는 시스템 리소스를 효율적으로 분배하고, 지원하는 소프트웨어</p>

<p>운영체제의 목표: 사용자가 사용하는 응용 프로그램이 효율적으로, 적절하게 동작하도록 지원</p>

<ol>
  <li>시스템 자원(System Resource) 관리자
    <ul>
      <li>시스템 자원은 컴퓨터 하드웨어의 성능이라고 생각할 수 있다.</li>
      <li>CPU(중앙처리장치), Memory(DRAM, RAM), I/O Devices(입출력장치 - Monitor, Mouse, Keyboard, Network)</li>
      <li>저장매체: SSD, HDD</li>
    </ul>
  </li>
  <li>사용자와 컴퓨터간의 커뮤니케이션 지원</li>
  <li>컴퓨터 하드웨어와 프로그램을 제어</li>
</ol>

<p><strong>컴퓨터 하드웨어는 스스로 할 수 있는 것이 없다.</strong></p>
<ol>
  <li>CPU: 각 프로그램이 얼마나 CPU를 사용할지를 결정할 수는 없다.</li>
  <li>Memory: 각 프로그램이 어느 주소에 저장되어야 하는지, 어느 정도의 메모리 공간을 확보해줘야 하는지를 결정할 수는 없다.</li>
  <li>저장매체(HDD, SSD): 어떻게, 어디에 저장할지는 결정할 수 없다.</li>
  <li>키보드/마우스: 스스로 표시할 수 는 없다.</li>
</ol>

<h2 id="운영체제와-응용-프로그램간의-관계">운영체제와 응용 프로그램간의 관계</h2>

<ol>
  <li>응용 프로그램을 관리</li>
  <li>시스템 자원을 관리</li>
  <li>사용자와 컴퓨터 간의 커뮤니케이션을 지원</li>
</ol>

<hr />

<h2 id="운영체제-history">운영체제 History</h2>

<ul>
  <li>1950년대</li>
</ul>

<p>에니악(ENIAC): 첫 번째 컴퓨터</p>

<p>이 당시에는 운영체제가 없었기 때문에 응용프로그램이 시스템 자원을 제어했었다.</p>

<ul>
  <li>1960년대 초반</li>
</ul>

<p>프로그램 종류도 많아지고, 사용자도 슬슬 많아지기 시작한다.</p>

<p>배치 처리 시스템(Batch processing system) 출현했다.</p>

<ul>
  <li>여러 응용 프로그램을 등록시켜 놓으면 순차적으로 실행하는 시스템</li>
  <li>배치 처리 시스템을 기반으로 운영체제가 출현</li>
</ul>

<p>배치 처리 시스템의 단점</p>

<ol>
  <li>컴퓨터 응답 시간(Response time)이 오래 걸릴 수 있다. (앞단에 실행 시간이 많이 필요로 하는 응용 프로그램이 실행될 경우)</li>
  <li>실행 시간도 오래 걸릴 수 있다. (CPU가 필요없음에도 응용 프로그램이 CPU를 점유할 수 있기 때문)</li>
</ol>

<ul>
  <li>1960년대 후반</li>
</ul>

<p>실제 운영체제로 구현되지는 않았지만 응용 프로그램이 CPU를 사용하는 시간을 잘개 쪼개서 여러 개의 응용 프로그램을 동시에 실행할 수 있는 새로운 개념이 제안되었다.</p>

<p>배치 처리 시스템의 단점을 해결하기 위해 나오게 되었다.</p>

<ul>
  <li>시분할 시스템(Time Sharing System)
    <ul>
      <li>다중 사용자를 지원하고, 컴퓨터 응답 시간을 최소화하는 시스템</li>
    </ul>
  </li>
  <li>멀티 태스킹(Multi Tasking)
    <ul>
      <li>단일 CPU에서 여러 응용 프로그램의 병렬 실행을 가능케 하는 시스템</li>
      <li>보통은 시분할 시스템 = 멀티 태스킹</li>
    </ul>
  </li>
</ul>

<blockquote>
  <p>멀티 프로그래밍: 최대한 CPU를 많이 활용하도록 하는 시스템 (시간대비 CPU 활용도를 높이자)</p>
</blockquote>

<p>핵심 기술: 시간을 잘게 쪼개서 여러 응용 프로그램을 실행한다.</p>
<ul>
  <li>컴퓨터 응답 시간을 줄일 수 있다. (시분할 시스템, 다중 사용자를 지원)</li>
  <li>전체 응용 프로그램의 실행 시간도 줄일 수 있다. (멀티 프로그래밍)</li>
  <li>
    <p>결과적으로, 사용자가 느낄 때에는 여러 응용 프로그램이 동시에 실행되는 것처럼 보인다. (멀티 태스킹)</p>
  </li>
  <li>1970년대</li>
</ul>

<p>UNIX(유닉스) OS가 탄생했다.</p>

<p>미국 AT&amp;T 사의 벨 연구소에서 켄 톰슨, 데니스 리치가 유닉스를 만들었다.</p>

<blockquote>
  <p>데니스 리치는 C언어를 개발한 사람이다.</p>
</blockquote>

<blockquote>
  <p>운영체제 개발에 C언어가 필요했던 이유</p>

  <p>1970년대 이전에는 Assembly 언어로 소프트웨어를 개발하여 프로그래밍 복잡도가 높았다.
CPU 명령어나 Memory 주소를 직접 써야하는데, 컴퓨터마다 환경이 다를 수 있어 다시 개발해야하는 단점이 있었다.</p>

  <p>1970년대 C언어가 개발 된 후에는 컴파일러를 통해 기계어로 바꿔주기 때문에 다양한 컴퓨터에서 동일한 C 코드를 사용하여 다시 작성할 필요가 없어졌고, 프로그래밍 복잡도도 낮아졌다.</p>
</blockquote>

<ul>
  <li>유닉스 특징
    <ul>
      <li>현대 운영체제의 기본 기술을 모두 포함한 최초의 운영체제</li>
      <li>멀티 태스킹, 시분할 시스템, 멀티 프로그래밍을 지원</li>
    </ul>
  </li>
  <li>1980년대</li>
</ul>

<p>개인용 컴퓨터 시대</p>

<ul>
  <li>1980년대 이전: 대형 컴퓨터를 여러 명이 접속해서 사용</li>
  <li>1980년대 이후: Personal Computer(PC)
    <ul>
      <li>1980년대 초반: 아직 터미널 환경(CLI)</li>
      <li>1980년대 중후반: GUI환경 (마우스)</li>
    </ul>
  </li>
  <li>1990년대</li>
</ul>

<ol>
  <li>응용 프로그램 시대 by GUI 환경, 개인용 컴퓨터로 인한 사용자 증대
    <ul>
      <li>엑셀, 워드 프로세서 등등</li>
      <li>Windows OS 대중화</li>
    </ul>
  </li>
  <li>네트워크 기술 발전 - 월드와이드웹(WWW) 인터넷 대중화</li>
  <li>오픈 소스 운동 활성화 시작
    <ul>
      <li>유닉스 계열 OS + 응용 프로그램 자체 개발, 소스 오픈</li>
      <li>리눅스 운영체제, 소스 오픈, 무료</li>
    </ul>
  </li>
</ol>

<ul>
  <li>2000년대</li>
</ul>

<ol>
  <li>오픈 소스 활성화
    <ul>
      <li>Apache(아파치, 웹서버), MySQL(데이터베이스)</li>
      <li>최근에는 안드로이드, 딥러닝, 데이터 사이언스, IOT 등 다양한 분야</li>
    </ul>
  </li>
  <li>가상 머신, 대용량 병렬 처리 등 활성화</li>
</ol>

<hr />

<h2 id="정리1">정리1</h2>

<ol>
  <li>1950년대: 운영체제 없음 (프로그램이 시스템 자원을 직접 제어)</li>
  <li>1960년대: 배치 처리 시스템</li>
  <li>1970년대: 시분할 시스템/멀티 태스킹 시스템 - UNIX OS (C언어)</li>
  <li>1980년대: GUI, 개인용 컴퓨터</li>
  <li>1990년대: 다양한 응용 프로그램, 인터넷 발달, 오픈 소스 운동 활성화</li>
  <li>2000년대: 오픈 소스 활성화, 가상 머신, 대용량 병렬 처리 등</li>
</ol>
:ET