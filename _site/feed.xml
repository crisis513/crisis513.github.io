<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Son</title>
    <description>Son's blog,use Jekyll and github pages.</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 05 Sep 2020 15:42:06 +0900</pubDate>
    <lastBuildDate>Sat, 05 Sep 2020 15:42:06 +0900</lastBuildDate>
    <generator>Jekyll v4.0.0</generator>
    
      <item>
        <title>[Docker] 도커 설치</title>
        <description>&lt;hr /&gt;

&lt;h3 id=&quot;목차&quot;&gt;목차&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;#list1&quot;&gt;1. 도커 설치&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list1_1&quot;&gt;   1.1. 실습 환경&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list1_2&quot;&gt;   1.2. 도커 설치 실습&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1-도커-설치---&quot;&gt;&lt;span style=&quot;color:purple&quot;&gt;&lt;strong&gt;1. 도커 설치&lt;/strong&gt;&lt;/span&gt;   &lt;a name=&quot;list1&quot;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;실습 환경&lt;/strong&gt; &lt;a name=&quot;list1_1&quot;&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;※ 본 포스트를 포함한 앞으로의 도커 관련 실습 환경은 다음과 같은 환경에서 진행됩니다.&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;Host OS인 Ubuntu에서 Virtualbox를 통해 CentOS VM을 생성 및 접속하여 진행했습니다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Host OS - Ubuntu 18.04 LTS&lt;/strong&gt;&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;IP : 192.168.56.1&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Username : son&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Hostname : ubuntu&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Guest OS - CentOS 7.8 (on Virtualbox)&lt;/strong&gt;&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;IP : 192.168.56.100&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Username : user&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Hostname : docker&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;도커 설치 실습&lt;/strong&gt;    &lt;a name=&quot;list1_2&quot;&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;c&quot;&gt;# 1. 사전 패키지 설치&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;yum &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; yum-utils &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; device-mapper-persistent-data &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; lvm2

  &lt;span class=&quot;c&quot;&gt;# 2. yum 저장소 설정&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;yum-config-manager &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--add-repo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://download.docker.com/linux/centos/docker-ce.repo&quot;&lt;/span&gt;

  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;yum repolist

  &lt;span class=&quot;c&quot;&gt;# 3. docker-ce 설치&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;yum &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;docker-ce docker-ce-cli containerd.io

  &lt;span class=&quot;c&quot;&gt;# 4. 서비스 실행 및 활성화&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl start docker
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;docker

  &lt;span class=&quot;c&quot;&gt;# 5. docker 그룹 지정&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;usermod &lt;span class=&quot;nt&quot;&gt;-aG&lt;/span&gt; docker &lt;span class=&quot;nv&quot;&gt;$USER&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exit

  &lt;/span&gt;son@ubuntu:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh user@192.168.56.100

  &lt;span class=&quot;c&quot;&gt;# 6. docker 버전 확인&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker version
  Client: Docker Engine - Community
      Version:           19.03.12
      API version:       1.40
      Go version:        go1.13.10
      Git commit:        48a66213fe
      Built:             Mon Jun 22 15:46:54 2020
      OS/Arch:           linux/amd64
      Experimental:      &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;# 7. hello world 컨테이너 실행&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run hello-world
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 01 Sep 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/cccr/2020/09/01/docker2.html</link>
        <guid isPermaLink="true">http://localhost:4000/cccr/2020/09/01/docker2.html</guid>
        
        <category>son</category>
        
        <category>blog</category>
        
        <category>cccr</category>
        
        <category>docker</category>
        
        
        <category>Cccr</category>
        
      </item>
    
      <item>
        <title>[Docker] 도커 개요</title>
        <description>&lt;hr /&gt;

&lt;h3 id=&quot;목차&quot;&gt;목차&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;#list1&quot;&gt;1. 도커 개요&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list1_1&quot;&gt;   1.1. 도커란?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list1_2&quot;&gt;   1.2. 가상머신과 컨테이너 비교&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list1_3&quot;&gt;   1.3. 도커의 특징&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list1_4&quot;&gt;   1.4. 도커의 구조 및 기능&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list1_5&quot;&gt;   1.5. 도커의 핵심 기술&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1-도커-개요---&quot;&gt;&lt;span style=&quot;color:purple&quot;&gt;&lt;strong&gt;1. 도커 개요&lt;/strong&gt;&lt;/span&gt;   &lt;a name=&quot;list1&quot;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;도커란?&lt;/strong&gt;   &lt;a name=&quot;list1_1&quot;&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Go 언어로 개발&lt;/strong&gt;된 컨테이너 기반의 오픈소스 가상화 플랫폼&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;다양한 OS 환경, 여러 프로그램들을 화물에 비유하여 컨테이너에 실어 여러 곳으로 운반하여 배포한다는 개념&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;가상머신과 컨테이너 비교&lt;/strong&gt;    &lt;a name=&quot;list1_2&quot;&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;/static/assets/img/landing/vm_vs_container.png&quot; alt=&quot;vm_vs_container&quot; width=&quot;760&quot; height=&quot;330&quot; /&gt;&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;[그림 1] 컨테이너(왼쪽) vs 가상머신(오른쪽)&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;

    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;가상머신(Virtual Machine)&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Host OS의 자원을 할당받아&lt;/code&gt; 하이퍼바이저를 이용해 Guest OS를 가상화 하여 사용하는 방식&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Host OS의 리소스 분할 또는 오버헤드와 OS 위에 또 OS를 설치하는 개념이기 때문에 &lt;code class=&quot;highlighter-rouge&quot;&gt;속도저하&lt;/code&gt;의 단점이 존재&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;컨테이너(Container)&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Host OS를 공유&lt;/code&gt;하며, 여러 개의 컨테이너들이 서로 영향을 미치지 않고 &lt;code class=&quot;highlighter-rouge&quot;&gt;독립적으로 실행&lt;/code&gt;되어 &lt;code class=&quot;highlighter-rouge&quot;&gt;가벼움&lt;/code&gt;&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;VM과의 가장 큰 차이점은 &lt;code class=&quot;highlighter-rouge&quot;&gt;프로세스를 격리&lt;/code&gt; 하는 것&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;독립적으로 Host OS의 자원을 공유하며 각각 필요한 자원들을 할당받아 실행되기 때문에 &lt;code class=&quot;highlighter-rouge&quot;&gt;오버헤드가 적음&lt;/code&gt;&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ol&gt;

    &lt;p&gt;즉, 가상 머신은 전체 하드웨어 서버를 추상화하는 반면 컨테이너는 운영 체제 커널을 추상화하여 &lt;strong&gt;훨씬 더 빠르고 가벼운 인스턴스를 제공&lt;/strong&gt;합니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;도커의 특징&lt;/strong&gt;   &lt;a name=&quot;list1_3&quot;&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;서버를 코드 형태로 정의&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;&lt;strong&gt;IaC(Infrastructure as Code)&lt;/strong&gt;&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;이미지를 제작할 때 코드 형태로 정의하여 작성 가능&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;이식성(portability)&lt;/strong&gt;&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;개발 환경, 테스트 환경, 서비스 환경을 모두 동일하게 사용 가능&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;도커 컨테이너의 기반이 되는 &lt;code class=&quot;highlighter-rouge&quot;&gt;도커 이미지&lt;/code&gt;가 있다면 애플리케이션을 동일한 환경에서 구동할 수 있다&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;상호운용성(interoperability)&lt;/strong&gt;&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;다양한 벤더의 시스템 및 오픈소스와 연계하여 사용 가능&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;예를 들어, 상용 Linux 중 가장 많이 쓰이는 RHEL7에서도 도커를 &lt;code class=&quot;highlighter-rouge&quot;&gt;기본으로 탑재&lt;/code&gt;&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;AWS에서도 Amazon EC2 Container Service를 통해 도커 실행 환경 운영 서비스를 제공&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;도커의 구조 및 기능&lt;/strong&gt;   &lt;a name=&quot;list1_4&quot;&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;/static/assets/img/landing/docker_architecture.png&quot; alt=&quot;docker_architecture&quot; width=&quot;760&quot; height=&quot;390&quot; /&gt;&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;[그림 2] 도커 아키텍처&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;

    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;도커 데몬(Docker Deamon)&lt;/strong&gt;&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;&lt;strong&gt;도커 API 요청을 지속적으로 수신 및 처리&lt;/strong&gt;&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;도커 이미지, 컨테이너, 네트워크 및 볼륨을 관리하는 지속적인 백그라운드 프로세스&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;도커 클라이언트(Docker Client)&lt;/strong&gt;&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;&lt;strong&gt;도커 데몬과 상호 작용&lt;/strong&gt;하기 위한 CLI(Docker)&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;컨테이너 인스턴스 관리 방법이 단순함&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;docker commit, docker export, docker import 등의 도커 관련 명령이 존재&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;도커 레지스트리(Docker Registry)&lt;/strong&gt;&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;도커 이미지를 저장&lt;/code&gt;하기 위해 사용&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;기본적으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;Docker Hub&lt;/code&gt;라는 퍼블릭 레지스트리로 설정되어 있고 &lt;code class=&quot;highlighter-rouge&quot;&gt;Harbor&lt;/code&gt;와 같은 프라이빗 레지스트리도 사용 가능&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;도커 객체&lt;/strong&gt;&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;이미지&lt;/p&gt;

            &lt;ul&gt;
              &lt;li&gt;
                &lt;p&gt;컨테이너를 생성하기 위한 &lt;code class=&quot;highlighter-rouge&quot;&gt;Read Only&lt;/code&gt; 템플릿&lt;/p&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;p&gt;도커 이미지를 생성하고 실행하기 까지의 단계를 정의한 &lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt;을 통해 빌드 가능&lt;/p&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;p&gt;새로운 컨테이너를 생성하면 변경된 레이어만 따로 체크하는 형태로 가볍고 빠름&lt;/p&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;컨테이너&lt;/p&gt;

            &lt;ul&gt;
              &lt;li&gt;
                &lt;p&gt;이미지의 실행 형태, 이미지를 실행하여 메모리에 올려 동작하는 것&lt;/p&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;하나의 컨테이너&lt;/code&gt;에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;하나의 애플리케이션&lt;/code&gt;만 실행하는 것을 &lt;strong&gt;권장&lt;/strong&gt;&lt;/p&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;p&gt;기본적으로 호스트 머신의 네트워크 연결을 통해 외부 네트워크와 연결 가능&lt;/p&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;네트워크&lt;/p&gt;

            &lt;ul&gt;
              &lt;li&gt;
                &lt;p&gt;격리 되어 동작하는 모든 컨테이너가 통신하기 위한 통로로 사용되며 다음의 5 가지 네트워크 드라이버를 사용&lt;/p&gt;

                &lt;p&gt;1) Bridge&lt;/p&gt;

                &lt;p&gt;컨테이너의 &lt;code class=&quot;highlighter-rouge&quot;&gt;기본 네트워크 드라이버&lt;/code&gt;입니다. 애플리케이션이 독립 실행형 컨테이너, 즉 동일한 도커 호스트와 통신하는 여러 컨테이너에서 실행될 때 이 네트워크를 사용합니다.&lt;/p&gt;

                &lt;p&gt;2) Host&lt;/p&gt;

                &lt;p&gt;이 드라이버는 도커 컨테이너와 도커 호스트 간의 &lt;code class=&quot;highlighter-rouge&quot;&gt;네트워크 격리를 제거&lt;/code&gt;합니다. 호스트와 컨테이너간에 네트워크 격리가 필요하지 않을 때 사용할 수 있습니다.&lt;/p&gt;

                &lt;p&gt;3) Overlay&lt;/p&gt;

                &lt;p&gt;이 네트워크는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Swarm 서비스가 서로 통신&lt;/code&gt; 할 수 있도록합니다. 컨테이너가 다른 도커 호스트에서 실행되기를 원하거나 여러 애플리케이션에서 Swarm 서비스를 구성하려는 경우에 사용합니다.&lt;/p&gt;

                &lt;p&gt;4) None&lt;/p&gt;

                &lt;p&gt;이 드라이버는 &lt;strong&gt;모든 네트워킹을 비활성화&lt;/strong&gt;합니다.&lt;/p&gt;

                &lt;p&gt;5) macvlan&lt;/p&gt;

                &lt;p&gt;이 드라이버는 &lt;code class=&quot;highlighter-rouge&quot;&gt;컨테이너에 MAC 주소를 할당&lt;/code&gt;하여 물리 장치처럼 보이게합니다. &lt;strong&gt;Mac 주소를 통해 컨테이너 간의 트래픽을 라우팅&lt;/strong&gt;합니다. 예를 들어, VM 설정을 마이그레이션하는 동안 컨테이너가 물리 장치처럼 보이게 하려는 경우에 이 네트워크를 사용합니다.&lt;/p&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;서비스&lt;/p&gt;

            &lt;ul&gt;
              &lt;li&gt;
                &lt;p&gt;여러가지 도커 데몬들로 구성 및 확장 가능&lt;/p&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Docker Swarm&lt;/code&gt;과 같은 서비스를 통해 사용자에게는 단일 애플리케이션처럼 보임&lt;/p&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;도커의 핵심 기술&lt;/strong&gt;   &lt;a name=&quot;list1_5&quot;&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;네임스페이스(Namespace)&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;&lt;strong&gt;서로가 충돌하지 않는 독립된 컨테이너를 제공하기 위해&lt;/strong&gt; 네임스페이스라는 기술을 적용&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;리눅스에서는 다음 6 가지 네임스페이스를 지원&lt;/p&gt;

            &lt;p&gt;1) mnt (파일시스템 마운트): 호스트 파일시스템에 구애받지 않고 독립적으로 파일시스템을 마운트하거나 언마운트 가능&lt;/p&gt;

            &lt;p&gt;2) pid (프로세스): 독립적인 프로세스 공간을 할당&lt;/p&gt;

            &lt;p&gt;3) net (네트워크): namespace간에 network 충돌 방지 (중복 포트 바인딩 등)&lt;/p&gt;

            &lt;p&gt;4) ipc (SystemV IPC): 프로세스간의 독립적인 통신통로 할당&lt;/p&gt;

            &lt;p&gt;5) uts (hostname): 독립적인 hostname 할당&lt;/p&gt;

            &lt;p&gt;6) user (UID): 독립적인 사용자 할당&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;cgroups(Control Groups)&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;&lt;strong&gt;리소스에 대한 제어를 가능&lt;/strong&gt;하게 해주는 리눅스 커널의 기능&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;도커 엔진(Docker Engine)이 사용 가능한 하드웨어 자원을 공유하도록 허용하거나 선택적으로 제한할 수 있음&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;다음 리소스를 제어할 수 있음&lt;/p&gt;

            &lt;p&gt;1) 메모리&lt;/p&gt;

            &lt;p&gt;2) CPU&lt;/p&gt;

            &lt;p&gt;3) I/O&lt;/p&gt;

            &lt;p&gt;4) 네트워크&lt;/p&gt;

            &lt;p&gt;5) device 노드(/dev/)&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 01 Sep 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/cccr/2020/09/01/docker1.html</link>
        <guid isPermaLink="true">http://localhost:4000/cccr/2020/09/01/docker1.html</guid>
        
        <category>son</category>
        
        <category>blog</category>
        
        <category>cccr</category>
        
        <category>docker</category>
        
        <category>vm</category>
        
        
        <category>Cccr</category>
        
      </item>
    
      <item>
        <title>[Project]ssustack_installer</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;본 프로젝트는 숭실대학교에서 김명호 교수님의 지도하에 진행 된 프로젝트입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;ssustack_installer&quot;&gt;ssustack_installer&lt;/h2&gt;

&lt;p&gt;ssustack_installer 프로젝트는 ssustack 설치를 웹 브라우저에서 더욱 쉽게 설치할 수 있도록 도와줍니다.&lt;/p&gt;

&lt;p&gt;ssustack_installer를 실행하면 웹 브라우저가 뜨게되고, 필요한 설정을 입력 및 선택하면 ssustack 스크립트를 기반으로 설치가 시작됩니다.&lt;/p&gt;

&lt;p&gt;사용자의 선택에 따라 싱글노드 혹은 멀티호스트로 자유롭게 설치가 가능합니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;environment&quot;&gt;Environment&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;OpenStack : Rokcy Release&lt;/li&gt;
  &lt;li&gt;OS : Ubuntu 18.04 LTS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;

&lt;p&gt;다음 설명할 설치 방법은 모든 노드가 Ubuntu 18.04 운영체제만 설치된 환경이라 가정하고 진행해야 할 작업을 설명합니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;1-ssustack--ssustack_installer-클론&quot;&gt;1. ssustack &amp;amp; ssustack_installer 클론&lt;/h4&gt;

&lt;p&gt;OpenStack 환경을 구성하는 모든 노드에서 진행합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone http://git.dotstack.io/crisis513/ssustack.git
$ git clone http://git.dotstack.io/dotstack/ssustack_installer.git
$ cd ssustack/bin
$ ./ssustack_user_creation.sh
$ cp -r &amp;lt;your_controller_path&amp;gt;/ssustack/ .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;생성할 유저의 패스워드를 설정하여 ssustack 유저가 생성되면 ssustack 폴더를 ssustack 유저의 홈 디렉토리로 복사합니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-network-설정&quot;&gt;2. network 설정&lt;/h4&gt;

&lt;p&gt;모든 노드의 네트워크 인터페이스를 수정 후 재부팅해주어야 합니다. 먼저 Controller node의 경우, 외부와의 통신을 위한 네트워크와 오픈스택 컴포넌트들이 서로 API를 호출할 때 사용하는 내부 네트워크, VM 인스턴스들이 외부와 통신하기 위한 메뉴얼 네트워크를 설정해주어야 합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo vi /etc/network/interfaces
auto &amp;lt;INTERFACE_NAME_1&amp;gt;
iface &amp;lt;INTERFACE_NAME_1&amp;gt; inet static
    address &amp;lt;PUBLIC_IP&amp;gt;
    netmask &amp;lt;PUBLIC_IP_NETMASK&amp;gt;
    gateway &amp;lt;PUBLIC_IP_GATEWAY&amp;gt;
    dns-servernames &amp;lt;DNS_NAMESERVERS&amp;gt;
auto &amp;lt;INTERFACE_NAME_2&amp;gt;
iface &amp;lt;INTERFACE_NAME_2&amp;gt; inet static
    address 10.10.10.11
    netmask 255.255.255.0
auto &amp;lt;INTERFACE_NAME_3&amp;gt;
iface &amp;lt;INTERFACE_NAME_3&amp;gt; inet manual
up ip link set dev $IFACE up
down ip link set dev $IFACE down
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Compute node의 경우, 메뉴얼 네트워크가 필요없다. 오픈스택 설치가 정상적으로 설치되고나면 외부와의 통신은 필요없어 외부 네트워크를 OSD들 간의 통신을 위한 스토리지 네트워크로 설정하여 사용해도 됩니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo vi /etc/network/interfaces
auto &amp;lt;INTERFACE_NAME_1&amp;gt;
iface &amp;lt;INTERFACE_NAME_1&amp;gt; inet static
    address &amp;lt;PUBLIC_IP&amp;gt;
    netmask &amp;lt;PUBLIC_IP_NETMASK&amp;gt;
    gateway &amp;lt;PUBLIC_IP_GATEWAY&amp;gt;
    dns-servernames &amp;lt;DNS_NAMESERVERS&amp;gt;
auto &amp;lt;INTERFACE_NAME_2&amp;gt;
iface &amp;lt;INTERFACE_NAME_2&amp;gt; inet static
    address 10.10.10.21
    netmask 255.255.255.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;3-hosts-및-ssh-설정&quot;&gt;3. hosts 및 SSH 설정&lt;/h4&gt;

&lt;p&gt;위의 작업이 끝나면 Controller node에서 hosts 및 SSH 설정합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo vi /etc/hosts
10.10.10.11 controller-node
10.10.10.21 compute-node1 
10.10.10.22 compute-node2
10.10.10.23 compute-node3
    
$ cd ssustack/bin/
$ ./creating_ssh_keys.sh [&amp;lt;host_name&amp;gt; ... ]
ex) ./creating_ssh_keys.sh compute-node1 compute-node2 compute-node3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;4-ssustack_installer-실행&quot;&gt;4. ssustack_installer 실행&lt;/h4&gt;

&lt;p&gt;ssustack_installer는 Controller node에서 실행시킵니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd ssustack_installer/
$ ./app.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;app.sh를 실행시키고나면 우분투 기본 브라우저로 사용되는 파이어폭스가 실행됩니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;5-welcome-페이지&quot;&gt;5. Welcome 페이지&lt;/h4&gt;

&lt;p&gt;권장 사양과 현재 PC의 사양을 확인해보고 설치 전 작업이 재대로 되었는지 확인하고 다음으로 넘어갑니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;6-enable-services-페이지&quot;&gt;6. Enable Services 페이지&lt;/h4&gt;

&lt;p&gt;Controller node 및 Compute node에서 설치할 서비스를 선택하고 넘어갑니다. 필수로 설치되어야하는 패키지의 경우 이미 체크되어 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;7-environment-settings-페이지&quot;&gt;7. Environment Settings 페이지&lt;/h4&gt;

&lt;p&gt;각각의 Controller node 및 Compute node에서 설정되어야 할 ip, subnet, hostname, password 등을 설정하고 다음으로 넘어갑니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;8-installing-페이지&quot;&gt;8. Installing 페이지&lt;/h4&gt;

&lt;p&gt;앞의 설정이 재대로 되어있는지 확인해보고 Start 버튼을 눌러주고 설치 로그를 확인해줍니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;한 번만 누르고 브라우저를 종료하면 안됩니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;9-finished-페이지&quot;&gt;9. Finished 페이지&lt;/h4&gt;

&lt;p&gt;정상적으로 설치되었는지 확인하고 종료합니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;10-추가-설정&quot;&gt;10. 추가 설정&lt;/h4&gt;

&lt;p&gt;아래 비디오에서 Ceph OSD를 추가하고, Horizon에서 네트워크를 생성하고, 우분투 이미지를 업로드하여 인스턴스 생성 및 테스트하는 부분까지 보여줍니다. (10:30)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;testing-video&quot;&gt;Testing video&lt;/h3&gt;

&lt;video width=&quot;840&quot; height=&quot;480&quot; src=&quot;/static/assets/video/ssustack_working.mp4&quot; controls=&quot;&quot;&gt;&lt;/video&gt;

&lt;blockquote&gt;
  &lt;p&gt;영상이 재생되지 않는다면 IE 환경에서 다시 재생해보세요.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Thu, 30 Apr 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/project/2020/04/30/ssustack_installer.html</link>
        <guid isPermaLink="true">http://localhost:4000/project/2020/04/30/ssustack_installer.html</guid>
        
        <category>son</category>
        
        <category>blog</category>
        
        <category>project</category>
        
        <category>ssustack</category>
        
        <category>installer</category>
        
        
        <category>Project</category>
        
      </item>
    
      <item>
        <title>[Project]ssustack</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;본 프로젝트는 숭실대학교에서 김명호 교수님, 김영종 교수님의 지도하에 진행되었습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;ssustack&quot;&gt;ssustack&lt;/h2&gt;

&lt;p&gt;ssustack 프로젝트는 Ubuntu 환경에서 OpenStack을 자동으로 설치하여 클라우드 컴퓨팅을 손쉽게 구축할 수 있도록 만들어졌습니다.&lt;/p&gt;

&lt;p&gt;OpenStack에서 사용할 기본적인 설정을 정의한 후에 설치스크립트를 이용하여 간편하게 설치가 가능합니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;environment&quot;&gt;Environment&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;OpenStack : Rokcy Release&lt;/li&gt;
  &lt;li&gt;OS : Ubuntu 18.04 LTS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;minimum-hardware-requirements&quot;&gt;Minimum hardware requirements&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Controller node
    &lt;ul&gt;
      &lt;li&gt;Processor: 1 Core&lt;/li&gt;
      &lt;li&gt;Ram: 4GB&lt;/li&gt;
      &lt;li&gt;Storage: 5GB&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Compute node
    &lt;ul&gt;
      &lt;li&gt;Processor: 1 Core&lt;/li&gt;
      &lt;li&gt;Ram: 2GB&lt;/li&gt;
      &lt;li&gt;Storage: 10GB&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;노드별-설치-패키지&quot;&gt;노드별 설치 패키지&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/landing/node_packages.png&quot; alt=&quot;node_packages&quot; width=&quot;600&quot; height=&quot;280&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;

&lt;p&gt;다음 설명할 설치 방법은 모든 노드가 Ubuntu 18.04 운영체제만 설치된 환경이라 가정하고 진행해야 할 작업을 설명합니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;1-ssustack-클론&quot;&gt;1. ssustack 클론&lt;/h4&gt;

&lt;p&gt;OpenStack 환경을 구성하는 모든 노드에서 진행&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone http://git.dotstack.io/crisis513/ssustack.git
$ cd ssustack/bin
$ ./ssustack_user_creation.sh
$ cp -r &amp;lt;your_controller_path&amp;gt;/ssustack/ .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;생성할 유저의 패스워드를 설정하여 ssustack 유저가 생성되면 ssustack 폴더를 ssustack 유저의 홈 디렉토리로 복사합니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-hosts-및-ssh-설정&quot;&gt;2. hosts 및 SSH 설정&lt;/h4&gt;

&lt;p&gt;위의 작업이 끝나면 controller node에서 hosts 및 SSH 설정&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo vi /etc/hosts
10.10.10.11 controller-node
10.10.10.21 compute-node1 
10.10.10.22 compute-node2
10.10.10.23 compute-node3
    
$ cd ssustack/bin/
$ ./creating_ssh_keys.sh [&amp;lt;host_name&amp;gt; ... ]
ex) ./creating_ssh_keys.sh compute-node1 compute-node2 compute-node3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;3-openstack-설치-스크립트-설정&quot;&gt;3. OpenStack 설치 스크립트 설정&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd ..
$ vi local.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;4-localconf-설정을-기반으로-각-노드별-스크립트-생성&quot;&gt;4. local.conf 설정을 기반으로 각 노드별 스크립트 생성&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./ssustack.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;5-ssustacktmp-경로에서-각-노드에-맞는-스크립트-실행&quot;&gt;5. ssustack/tmp 경로에서 각 노드에 맞는 스크립트 실행&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;## controller-node Case
$ cd tmp/controller/
$ ./controller.sh

## compute-node1 Case
$ cd tmp/compute/
$ ./compute_1.sh
 
## compute-node2 Case
$ cd tmp/compute/
$ ./compute_2.sh
 
## compute-node3 Case
$ cd tmp/compute/
$ ./compute_3.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;현재는 각 스크립트를 직접 수정하여 rbd_secret_uuid 값을 수동으로 맞춰주어야 합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;6-controller-node에서-ceph-추가-설정&quot;&gt;6. controller node에서 ceph 추가 설정&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd ../../bin/ # ssustack/bin/
$ ./ceph_configuration.sh [&amp;lt;host_name&amp;gt; ... ]
ex) ./ceph_configuration.sh compute-node1 compute-node2 compute-node3 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;7-각-compute-node에서-ceph-osd-및-ceph-mon-설정&quot;&gt;7. 각 compute node에서 ceph osd 및 ceph mon 설정&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd ../../bin/ # ssustack/bin/
$ ./add_ceph_osd.sh /dev/sdb    # /dev/sdb는 각 컴퓨터 노드에서 추가할 osd 장치명
$ ./add_ceph_mon.sh 10.10.10.21 # 10.10.10.21은 각 컴퓨터 노드에서 management network로 사용하는 ip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;8-controller-node에서-compute-호스트를-찾도록-스크립트-실행&quot;&gt;8. controller node에서 compute 호스트를 찾도록 스크립트 실행&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./add_compute_node.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Wed, 29 Apr 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/project/2020/04/29/ssustack.html</link>
        <guid isPermaLink="true">http://localhost:4000/project/2020/04/29/ssustack.html</guid>
        
        <category>son</category>
        
        <category>blog</category>
        
        <category>project</category>
        
        <category>ssustack</category>
        
        
        <category>Project</category>
        
      </item>
    
      <item>
        <title>[Project]naver-news-scraper</title>
        <description>&lt;h1 id=&quot;naver-news-scraper&quot;&gt;naver-news-scraper&lt;/h1&gt;

&lt;p&gt;nn-scraper 프로젝트는 원하는 키워드에 해당하는 네이버 뉴스 속보를 스크랩하여 텔레그램 봇 혹은 카카오톡 봇으로 알림받을 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;environment&quot;&gt;Environment&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;OS : Ubuntu 18.04 LTS&lt;/li&gt;
  &lt;li&gt;Python : 2.7.17&lt;/li&gt;
  &lt;li&gt;pip : 9.0.1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;

&lt;h4 id=&quot;1-naver-news-scraper-클론&quot;&gt;1. naver-news-scraper 클론&lt;/h4&gt;

&lt;p&gt;naver-news-scraper 소스를 다운로드 합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone https://github.com/crisis513/naver-news-scraper.git
$ cd naver-news-scraper
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-실행환경-설정&quot;&gt;2. 실행환경 설정&lt;/h4&gt;

&lt;p&gt;nn-scraper 실행을 위해 python 및 pip를 설치하고, 필요한 pip 패키지를 설치합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apt-get install -y python python-pip
$ pip install -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;3-봇-설정&quot;&gt;3. 봇 설정&lt;/h4&gt;

&lt;p&gt;nn-scraper에서 사용할 수 있는 봇은 카카오톡, 텔레그램 두 종류가 있습니다.&lt;/p&gt;

&lt;p&gt;사용할 봇을 설정하는 방법은 다음과 같습니다.&lt;/p&gt;

&lt;p&gt;1) config.py 파일에서 USE_BOT 값을 카카오톡일 경우 kakaotalk, 텔레그램일 경우 telegram으로 입력합니다.&lt;/p&gt;

&lt;p&gt;2) 아래 Testing images에서 선택한 플랫폼에 맞게 토큰 값을 얻어 config.py 파일에서 요구하는 토큰 혹은 키 값을 입력합니다.&lt;/p&gt;

&lt;p&gt;3) app.py 파일을 실행하면 1분 주기로 SEARCH_LIST 값에 설정된 키워드에 맞는 네이버 속보 뉴스를 스크랩하여 보내줍니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;testing-images&quot;&gt;Testing images&lt;/h3&gt;

&lt;h4 id=&quot;telegram-bot&quot;&gt;[Telegram bot]&lt;/h4&gt;

&lt;p&gt;텔레그램 봇을 사용하기 위해서는 @botfather 를 검색하여 아래 사진과 같이 새로운 봇을 만들고 봇의 TOKEN을 획득해야 합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/landing/telegrambot.png&quot; alt=&quot;use_telegrambot&quot; width=&quot;360&quot; height=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위에서 획득한 TOKEN 값을 config.py 파일에서 TELEGRAM_TOKEN 값에 넣어줍니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/landing/telegrambot2.jpg&quot; alt=&quot;use_telegrambot&quot; width=&quot;350&quot; height=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;kakaotalk-bot&quot;&gt;[Kakaotalk bot]&lt;/h4&gt;

&lt;p&gt;카카오톡 봇을 사용하기 위해서는 Kakao Developer 사이트에서 카카오 API KEY를 발급 받아야 합니다.&lt;/p&gt;

&lt;p&gt;https://developers.kakao.com/&lt;/p&gt;

&lt;p&gt;해당 사이트로 들어가서 로그인을 하고 애플리케이션을 만들어줍니다.&lt;/p&gt;

&lt;p&gt;여기서는 NN-SCRAPER 라는 앱 이름으로 생성하였고, 정상적으로 설치되면 아래 사진처럼 각종 앱 키가 보이는 것을 확인할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/landing/kakaotalkbot.png&quot; alt=&quot;use_kakaotalkbot&quot; width=&quot;700&quot; height=&quot;460&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이 앱 키 중에서 REST API 키를 config.py 파일에서 RESTAPI_KEY 값에 넣어줍니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/landing/kakaotalkbot2.png&quot; alt=&quot;use_kakaotalkbot&quot; width=&quot;360&quot; height=&quot;780&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 08 Apr 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/project/2020/04/08/nn_scraper.html</link>
        <guid isPermaLink="true">http://localhost:4000/project/2020/04/08/nn_scraper.html</guid>
        
        <category>son</category>
        
        <category>blog</category>
        
        <category>project</category>
        
        <category>nn-scraper</category>
        
        
        <category>Project</category>
        
      </item>
    
      <item>
        <title>[Patent]히스토그램을 이용한 영상 처리 방법 및 이를 수행하기 위한 기록매체</title>
        <description>&lt;h3 id=&quot;abstract&quot;&gt;Abstract&lt;/h3&gt;

&lt;p&gt;히스토그램을 이용한 고속 유사도 측정 방법 및 이를 수행할 수 있는 유사도 측정 장치가 제공된다. 본 발명의 실시례에 따른 고속 유사도 측정 방법은 유사도 측정 대상 영상의 히스토그램을 생성하는 히스토그램 생성 단계, 상기 히스토그램을 기반으로 상기 유사도 측정 대상 영상의 이진수 열을 생성하는 메타데이터 생성 단계, 메타데이터 데이터베이스로부터 기준 영상의 이진수 열을 획득하여 상기 유사도 측정 대상 영상의 이진수 열과 매칭(matching)하는 매칭 단계 및 상기 매칭 결과를 출력하는 출력 단계를 포함한다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;목차&quot;&gt;목차&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;#list1&quot;&gt;1. 특허증&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list2&quot;&gt;   1.1. 특허&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list3&quot;&gt;   1.2. 출원번호&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list4&quot;&gt;   1.3. 출원일&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list5&quot;&gt;   1.4. 등록일&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list6&quot;&gt;   1.5. 발명의 명칭&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list7&quot;&gt;   1.6. KIPRIS 검색&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;특허증----&quot;&gt;특허증    &lt;a name=&quot;list1&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h5 id=&quot;certificate-of-patent&quot;&gt;CERTIFICATE OF PATENT&lt;/h5&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;특허&quot;&gt;특허&lt;/h3&gt;
&lt;h6 id=&quot;patent-number&quot;&gt;PATENT NUMBER&lt;/h6&gt;
&lt;p&gt;10-1957610&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;출원번호&quot;&gt;출원번호&lt;/h3&gt;
&lt;h6 id=&quot;application-number&quot;&gt;Application Number&lt;/h6&gt;
&lt;p&gt;10-2017-0173938&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;출원일&quot;&gt;출원일&lt;/h3&gt;
&lt;h6 id=&quot;filing-date&quot;&gt;Filing Date&lt;/h6&gt;
&lt;p&gt;2017년 12월 18일&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;등록일&quot;&gt;등록일&lt;/h3&gt;
&lt;h6 id=&quot;registration-date&quot;&gt;Registration Date&lt;/h6&gt;
&lt;p&gt;2019년 03월 06일&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;발명의-명칭&quot;&gt;발명의 명칭&lt;/h3&gt;
&lt;h6 id=&quot;title-of-the-invention&quot;&gt;Title of the Invention&lt;/h6&gt;
&lt;p&gt;히스토그램을 이용한 영상 처리 방법 및 이를 수행하기 위한 기록매체&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;kipris-검색&quot;&gt;KIPRIS 검색&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/landing/patent2.png&quot; alt=&quot;patent2&quot; width=&quot;675&quot; height=&quot;150&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 03 Apr 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/patent/2020/04/03/patent2.html</link>
        <guid isPermaLink="true">http://localhost:4000/patent/2020/04/03/patent2.html</guid>
        
        <category>son</category>
        
        <category>blog</category>
        
        <category>patent</category>
        
        <category>histogram</category>
        
        
        <category>Patent</category>
        
      </item>
    
      <item>
        <title>[Patent]타이핑 속도 정보를 이용한 사용자 인증 시스템 및 방법, 이를 수행하기 위한 기록매체</title>
        <description>&lt;h3 id=&quot;abstact&quot;&gt;Abstact&lt;/h3&gt;

&lt;p&gt;타이핑 속도 정보를 이용한 사용자 인증 시스템 및 방법을 개시한다. 사용자 단말로부터 수신한 ID와 패스워드를 이용하여 웹 서버에서 사용자 인증을 수행하는 사용자 인증 시스템에 있어서, 상기 사용자 단말은, 사용자로부터 ID 및 패스워드를 입력받는 입력부; 상기 입력부를 통해 패스워드를 입력받을 때, 패스워드를 구성하는 각각의 문자에 대해 키 입력이 시작되는 시간 및 키 입력이 종료되는 시간, 마지막 엔터키가 입력되는 시간을 감지하여 키 입력 정보를 생성하는 키 입력 정보 생성부; 및 상기 입력부를 통해 입력받은 ID 및 패스워드와 상기 키 입력 정보 생성부에서 생성된 키 입력 정보를 상기 웹 서버로 전송하는 전송부;를 포함하고, 상기 웹 서버는, 상기 사용자 단말로부터 ID 및 패스워드와 키 입력 정보를 수신하는 수신부; 사용자별로 사용자 인증에 필요한 ID 및 패스워드와 타이핑 속도 허용 범위를 저장하는 사용자 인증 DB; 상기 수신한 키 입력 정보를 이용하여 패스워드를 구성하는 문자열의 입력에 대한 타이핑 속도를 산출하는 타이핑 속도 산출부; 상기 수신한 ID 및 패스워드와 상기 사용자 인증 DB에 저장되어 있는 ID 및 패스워드를 비교하여 사용자 인증을 수행하는 제1사용자 인증부; 및 상기 제1사용자 인증부에서 사용자 인증에 성공하면, 상기 산출된 타이핑 속도와 상기 ID에 매핑되어 상기 사용자 인증 DB에 저장되어 있는 타이핑 속도 허용 범위를 비교하여 사용자 인증을 수행하는 제2사용자 인증부;를 포함하는 것이 바람직하다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;목차&quot;&gt;목차&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;#list1&quot;&gt;1. 특허증&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list2&quot;&gt;   1.1. 특허&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list3&quot;&gt;   1.2. 출원번호&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list4&quot;&gt;   1.3. 출원일&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list5&quot;&gt;   1.4. 등록일&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list6&quot;&gt;   1.5. 발명의 명칭&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list7&quot;&gt;   1.6. KIPRIS 검색&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;특허증----&quot;&gt;특허증    &lt;a name=&quot;list1&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h5 id=&quot;certificate-of-patent&quot;&gt;CERTIFICATE OF PATENT&lt;/h5&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;특허----&quot;&gt;특허    &lt;a name=&quot;list2&quot;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h6 id=&quot;patent-number&quot;&gt;PATENT NUMBER&lt;/h6&gt;
&lt;p&gt;10-1959219&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;출원번호----&quot;&gt;출원번호    &lt;a name=&quot;list3&quot;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h6 id=&quot;application-number&quot;&gt;Application Number&lt;/h6&gt;
&lt;p&gt;10-2017-0120224&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;출원일--&quot;&gt;출원일  &lt;a name=&quot;list4&quot;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h6 id=&quot;filing-date&quot;&gt;Filing Date&lt;/h6&gt;
&lt;p&gt;2017년 09월 19일&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;등록일--&quot;&gt;등록일  &lt;a name=&quot;list5&quot;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h6 id=&quot;registration-date&quot;&gt;Registration Date&lt;/h6&gt;
&lt;p&gt;2019년 03월 12일&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;발명의-명칭-&quot;&gt;발명의 명칭 &lt;a name=&quot;list6&quot;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h6 id=&quot;title-of-the-invention&quot;&gt;Title of the Invention&lt;/h6&gt;
&lt;p&gt;타이핑 속도 정보를 이용한 사용자 인증 시스템 및 방법, 이를 수행하기 위한 기록매체&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;kipris-검색-&quot;&gt;KIPRIS 검색 &lt;a name=&quot;list7&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/landing/patent.png&quot; alt=&quot;patent1&quot; width=&quot;675&quot; height=&quot;150&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 03 Apr 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/patent/2020/04/03/patent1.html</link>
        <guid isPermaLink="true">http://localhost:4000/patent/2020/04/03/patent1.html</guid>
        
        <category>son</category>
        
        <category>blog</category>
        
        <category>patent</category>
        
        <category>authentication</category>
        
        <category>tps</category>
        
        
        <category>Patent</category>
        
      </item>
    
      <item>
        <title>[Thesis]클라우드 컴퓨팅 환경에서 블록체인 기반의 인증 키 관리 시스템 설계 및 구현</title>
        <description>&lt;h3 id=&quot;abstract&quot;&gt;Abstract&lt;/h3&gt;

&lt;p&gt;클라우드 컴퓨팅은 컴퓨팅 자원을 유연하게 사용할 수 있어 프로비저닝이 빠르고 편리하며 확장성이 높은 등 많은 장점을 제공하고 있다. 하지만 해킹을 통한 중요 데이터가 유출되는 사고가 발생한 사례들이 많아 클라우드 보안 위협은 꾸준히 제기되고 있다. 그 중에서도 클라우드 인증에 사용되는 토큰과 이 토큰의 정보를 보호하기 위해 사용되는 암호 키를 관리하는 것은 보안에 있어 항상 중요한 문제이다. 암호 키가 재대로 관리되지 않으면 무단 접근을 허용하여 조직 혹은 사용자에게 심각한 피해가 생기게 된다. 보안 강도가 높은 암호화 알고리즘을 사용하더라도 키가 노출된다면 자유롭게 데이터를 복호화할 수 있게 되기 때문에 키 관리는 매우 중요하다. 기존에는 대부분 중앙집중식으로 키를 관리하여 확장성이 낮고 분산된 키 관리 서비스를 제공하지 않아 항상 잠재적인 단일 장애점의 문제를 갖고 있다. 그리고 키 보안 공급 업체를 통해 암호 키를 관리하더라도 단일 보안 위반 상태가 된다.&lt;/p&gt;

&lt;p&gt;본 논문에서는 프라이빗 블록체인을 구축하여 허가형 비공개 네트워크에서 안전하게 암호 키를 분산 저장 및 관리하는 환경을 통해 클라우드 컴퓨팅 인증을 수행하는 시스템을 제안한다. 제안하는 시스템은 기존에 항상 잠재적으로 존재해왔던 단일 장애점의 문제를 해결하고 분산 저장을 통해 확장성을 높일 수 있다. 제안하는 시스템을 구현한 결과 기존의 키 관리 방식에 비해 성능에 큰 차이가 없고 기본적인 키 관리 요구사항들을 충족시키면서 단일 장애점의 문제를 해결했다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;목차&quot;&gt;목차&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;#list1&quot;&gt;1. 논문 제목&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list2&quot;&gt;   1.1. 저자&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list3&quot;&gt;   1.2. 발행연도&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list4&quot;&gt;   1.3. 주제어&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list5&quot;&gt;   1.4. URL&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;논문-제목---&quot;&gt;논문 제목   &lt;a name=&quot;list1&quot;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;클라우드 컴퓨팅 환경에서 블록체인 기반의 인증 키 관리 시스템 설계 및 구현 = Design and Implementation of Blockchain-based Authentication Key Management System in Cloud Computing Environment&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;저자----&quot;&gt;저자    &lt;a name=&quot;list2&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;손한기&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;발행연도----&quot;&gt;발행연도    &lt;a name=&quot;list3&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;2020.02&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;주제어----&quot;&gt;주제어    &lt;a name=&quot;list4&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;클라우드 컴퓨팅, 블록체인, 키 관리 시스템&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;url---&quot;&gt;URL   &lt;a name=&quot;list5&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;http://www.riss.kr/search/detail/DetailView.do?p_mat_type=be54d9b8bc7cdb09&amp;amp;control_no=648f5d72e457c232ffe0bdc3ef48d419&lt;/p&gt;
</description>
        <pubDate>Wed, 01 Apr 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/thesis/2020/04/01/bkms.html</link>
        <guid isPermaLink="true">http://localhost:4000/thesis/2020/04/01/bkms.html</guid>
        
        <category>son</category>
        
        <category>blog</category>
        
        <category>thesis</category>
        
        <category>bkms</category>
        
        <category>blockchain</category>
        
        <category>cloud</category>
        
        
        <category>Thesis</category>
        
      </item>
    
      <item>
        <title>Blog sample</title>
        <description>&lt;h3 id=&quot;목차&quot;&gt;목차&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;#list1&quot;&gt;1. 헤더(Header)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list2&quot;&gt;2. 목록(List)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list3&quot;&gt;3. 이미지(Images)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list4&quot;&gt;4. 하이퍼링크(Links)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list5&quot;&gt;5. 인용 상자(Blockquotes)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list6&quot;&gt;6. 강조(Emphasis)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list7&quot;&gt;7. 테이블(Tables)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list8&quot;&gt;8. 체크 박스(Task Lists)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list9&quot;&gt;9. 인라인 코드(Inline code)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list10&quot;&gt;10. 수평선(hr)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list11&quot;&gt;11. 탈출 문자(Backslash Escapes)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list12&quot;&gt;12. 이모지(Emoji)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list13&quot;&gt;13. 코드 블록(Code Blocks)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list14&quot;&gt;14. 배지(Badge) 만들기&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;헤더header----&quot;&gt;헤더(Header)    &lt;a name=&quot;list1&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;h1 id=&quot;헤더-크기-h1&quot;&gt;헤더 크기 (h1)&lt;/h1&gt;
&lt;h2 id=&quot;헤더-크기-h2&quot;&gt;헤더 크기 (h2)&lt;/h2&gt;
&lt;h3 id=&quot;헤더-크기-h3&quot;&gt;헤더 크기 (h3)&lt;/h3&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;목록list----&quot;&gt;목록(List)    &lt;a name=&quot;list2&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Unordered&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Item 1&lt;/li&gt;
  &lt;li&gt;Item 2
    &lt;ul&gt;
      &lt;li&gt;Item 2a&lt;/li&gt;
      &lt;li&gt;Item 2b&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ordered&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Item 1&lt;/li&gt;
  &lt;li&gt;Item 2&lt;/li&gt;
  &lt;li&gt;Item 3
    &lt;ol&gt;
      &lt;li&gt;Item 3a&lt;/li&gt;
      &lt;li&gt;Item 3b&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;이미지images----&quot;&gt;이미지(Images)    &lt;a name=&quot;list3&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;첫번째 방법&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/markdown_logo.jpg&quot; alt=&quot;Github logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Format: &lt;img src=&quot;url 링크&quot; alt=&quot;이미지 alt명&quot; /&gt;&lt;/p&gt;

&lt;p&gt;두번째 방법&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;&lt;img src=&quot;https://github.com/..각자절대경로../images/markdown_syntax.jpg&quot; width=&quot;400px&quot; alt=&quot;sample image&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Format: img 태그 사용 - 이미지경로는 상대경로 or 절대경로&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;하이퍼링크links----&quot;&gt;하이퍼링크(Links)    &lt;a name=&quot;list4&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://github.com&quot; title=&quot;깃허브&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;인용-상자blockquotes----&quot;&gt;인용 상자(Blockquotes)    &lt;a name=&quot;list5&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;As Grace Hopper said:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I’ve always been more interested. 
in the future than in the past.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;강조emphasis----&quot;&gt;강조(Emphasis)    &lt;a name=&quot;list6&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;This text will be italic&lt;/em&gt; 
&lt;em&gt;This will also be italic&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This text will be bold&lt;/strong&gt; 
&lt;strong&gt;This will also be bold&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You &lt;strong&gt;can&lt;/strong&gt; combine them&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;테이블tables----&quot;&gt;테이블(Tables)    &lt;a name=&quot;list7&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;First Header&lt;/th&gt;
      &lt;th&gt;Second Header&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Content cell 1&lt;/td&gt;
      &lt;td&gt;Content cell 2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Content column 1&lt;/td&gt;
      &lt;td&gt;Content column 2&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;체크-박스task-lists----&quot;&gt;체크 박스(Task Lists)    &lt;a name=&quot;list8&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;this is a complete item&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;this is an incomplete item&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;@mentions, #refs, &lt;a href=&quot;&quot;&gt;links&lt;/a&gt;, &lt;strong&gt;formatting&lt;/strong&gt;, and &lt;del&gt;tags&lt;/del&gt; supported&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;list syntax required (any unordered or ordered list supported)&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;인라인-코드inline-code----&quot;&gt;인라인 코드(Inline code)    &lt;a name=&quot;list9&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;문단 중간에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Code&lt;/code&gt;를 넣을 수 있습니다. 
예를 들어 &lt;code class=&quot;highlighter-rouge&quot;&gt;printf(&quot;hello world!&quot;);&lt;/code&gt; 이런 식으로 들어갑니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;수평선hr----&quot;&gt;수평선(hr)    &lt;a name=&quot;list10&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;hr /&gt;
&lt;hr /&gt;
&lt;hr /&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;탈출-문자backslash-escapes----&quot;&gt;탈출 문자(Backslash Escapes)    &lt;a name=&quot;list11&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;＼&lt;em&gt;literal asterisks＼&lt;/em&gt; 
&lt;em&gt;literal asterisks&lt;/em&gt; 
&lt;strong&gt;＼&lt;em&gt;＼&lt;/em&gt;Text＼&lt;em&gt;＼&lt;/em&gt;&lt;/strong&gt; 
_＼_Tom＼__&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;이모지emoji----&quot;&gt;이모지(Emoji)    &lt;a name=&quot;list12&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;GitHub supports emoji!&lt;/p&gt;

&lt;p&gt;:+1: :sparkles: :camel: :tada: 
:rocket: :metal: :octocat:&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;코드-블록code-blocks----&quot;&gt;코드 블록(Code Blocks)    &lt;a name=&quot;list13&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;코드 내용
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;배지bedge-만들기----&quot;&gt;배지(Bedge) 만들기    &lt;a name=&quot;list14&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;https://shields.io&lt;/p&gt;

&lt;p&gt;작성 예시
&lt;a href=&quot;https://img.shields.io/badge/license-mit-green.svg&amp;quot;&quot;&gt;https://img.shields.io/badge/license-mit-green.svg&quot;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;https://img.shields.io/badge/–.svg&lt;/p&gt;

&lt;p&gt;APM: /apm/l/:packageName.svg&lt;/p&gt;

&lt;p&gt;AUR license: /aur/license/:packageName.svg&lt;/p&gt;
</description>
        <pubDate>Sat, 07 Mar 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/sample/2020/03/07/sample.html</link>
        <guid isPermaLink="true">http://localhost:4000/sample/2020/03/07/sample.html</guid>
        
        <category>Son</category>
        
        <category>blog</category>
        
        
        <category>Sample</category>
        
      </item>
    
      <item>
        <title>code snippet test</title>
        <description>&lt;p&gt;This is a raw snippet:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hello world
123
This is a text snippet
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is a JavaScript snippet:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const add = (a, b) =&amp;gt; a + b
const minus = (a, b) =&amp;gt; a - b

console.log(add(100,200))  // 300
console.log(minus(100,200))  // -100
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is a Python snippet:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def say_hello():
    print(&quot;hello world!&quot;)

say_hello()   // &quot;hello world!&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;Side note comment: applied a bug fix similar to &lt;a href=&quot;https://github.com/Atlas7/atlas7.github.io/commit/6659f4a47f6ec66987adb0f683a9c6f3842252ae#diff-818954a41dbfb01af70050a459c603b9&quot;&gt;this commit&lt;/a&gt; to ensure code snippet does not collapse unexpectly upon clicking on it. This issue is tracked &lt;a href=&quot;https://github.com/jarrekk/Jalpc/issues/97&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Thu, 21 Dec 2017 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/sample/2017/12/21/test_code_snippets.html</link>
        <guid isPermaLink="true">http://localhost:4000/sample/2017/12/21/test_code_snippets.html</guid>
        
        <category>Jalpc</category>
        
        <category>Jekyll</category>
        
        
        <category>Sample</category>
        
      </item>
    
      <item>
        <title>3 Steps (2 minutes) to Setup Your Personal Website with Jalpc</title>
        <description>&lt;p&gt;Everyone wants to have a personal website, you can display your infomation to public, post blogs and make friends. If you are CS engineer, haveing a self website will benefit your interview.&lt;/p&gt;

&lt;p&gt;So, if you like this website &lt;a href=&quot;https://jarrekk.github.io/Jalpc/&quot;&gt;https://jarrekk.github.io/Jalpc/&lt;/a&gt; or &lt;a href=&quot;http://www.jarrekk.com&quot;&gt;http://www.jarrekk.com&lt;/a&gt; and are willing to have a website, here is a way to build your website in 3 steps(2 minutes). Following are steps to setup your website(make sure you have basic knowledge of &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; and &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;, if you want to custom css/js &lt;a href=&quot;https://github.com/npm/npm&quot;&gt;NPM&lt;/a&gt; is needed):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Fork &lt;a href=&quot;https://github.com/jarrekk/Jalpc&quot;&gt;this project – Jalpc&lt;/a&gt; at &lt;a href=&quot;https://github.com&quot;&gt;GitHub&lt;/a&gt;. If you want to edit website at github, do it as following gif or clone forked repository. &lt;code class=&quot;highlighter-rouge&quot;&gt;git clone git@github.com:github_username/Jalpc.git&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;&lt;!-- ![edit](/crisis513.github.io/static/assets/img/blog/3steps/edit.gif) --&gt;
 &lt;img src=&quot;/crisis513.github.io/static/assets/img/blog/3steps/edit.gif&quot; width=&quot;75%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Enter into repository directory and edit following file list:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;_config.yml&lt;/strong&gt;: edit ‘Website settings’, ‘author’, ‘comment’ and ‘analytics’ items.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;_data/landing.yml&lt;/strong&gt;: custom sections of index page.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;_data/index/&lt;/strong&gt;: edit sections’ data to yours at index page, please notice comment at each file.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;_data/blog.yml&lt;/strong&gt;: edit navbar(categories) of blog page, if you have different/more blog page, copy &lt;code class=&quot;highlighter-rouge&quot;&gt;blog/python.html&lt;/code&gt; and change it to your category HTML file, and edit &lt;strong&gt;Python&lt;/strong&gt;, &lt;strong&gt;/python/&lt;/strong&gt; to your category name at items &lt;strong&gt;title&lt;/strong&gt; and &lt;strong&gt;permalink&lt;/strong&gt;, make sure title is the same as permalink but capitalized first letter(except HTML).&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;CNAME&lt;/strong&gt;: If you wanna release website at your own domain name: edit it and create &lt;code class=&quot;highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt; branch; if you want to use &lt;em&gt;github_username.github.io&lt;/em&gt;: leave it blank.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Go to repo’s settings panel, config &lt;strong&gt;GitHub Pages&lt;/strong&gt; section to make sure website is released.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Push changes to your github repository and view your website, done!&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;From now on, you can post your blog to this website by creating md files at &lt;code class=&quot;highlighter-rouge&quot;&gt;post/&lt;/code&gt; directory and push it to GitHub, you can clear files at this directory before you post blogs.&lt;/p&gt;

&lt;p&gt;If you like this repository, I appreciate you star this repository. Please don’t hesitate to mail me or post issues on GitHub if you have any questions. Hope you have a happy blog time!😊&lt;/p&gt;
</description>
        <pubDate>Tue, 31 Jan 2017 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/sample/2017/01/31/3_steps_to_setup_website_with_Jalpc.html</link>
        <guid isPermaLink="true">http://localhost:4000/sample/2017/01/31/3_steps_to_setup_website_with_Jalpc.html</guid>
        
        <category>Jalpc</category>
        
        <category>Jekyll</category>
        
        
        <category>Sample</category>
        
      </item>
    
      <item>
        <title>파이썬 크롤링</title>
        <description>&lt;h3 id=&quot;크롤링-관련-용어-정리&quot;&gt;크롤링 관련 용어 정리&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;스크랩핑(scraping) : 데이터를 수집하는 행위&lt;/li&gt;
  &lt;li&gt;크롤링(Crawling) : 조직적 자동화된 방법으로 월드와이드웹을 탐색 하는 것&lt;/li&gt;
  &lt;li&gt;파싱(parsing) : 문장 혹은 문서를 구성 성분으로 분해하고 위계관계를 분석하여 문장의 구조를 결정하는 것&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;os 모듈 - 시스템 명령어를 실행시킬 수 있는 모듈&lt;/p&gt;

&lt;h3 id=&quot;파이썬-크롤링에-사용되는-모듈&quot;&gt;파이썬 크롤링에 사용되는 모듈&lt;/h3&gt;

&lt;h3 id=&quot;1-requests&quot;&gt;1. requests&lt;/h3&gt;
&lt;p&gt;requests 모듈은 Apache License 2.0에 따라 배포 된 HTTP 파이썬 라이브러리&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;$ pip install requests&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;2-beautifulsoup4&quot;&gt;2. BeautifulSoup4&lt;/h3&gt;
&lt;p&gt;BeautifulSoup 모듈은 HTML과 XML을 파싱하는 데에 사용되는 파이썬 라이브러리&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;$ pip install bs4&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;3-selenium&quot;&gt;3. selenium&lt;/h3&gt;
&lt;p&gt;selenium은 웹 애플리케이션 테스트를 위한 포터블 프레임워크&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;$ pip install selenium&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;사용할 브라우저의 드라이버를 설치
https://chromedriver.storage.googleapis.com/index.html?path=83.0.4103.14/&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;from selenium import webdriver
import time&lt;/p&gt;

  &lt;p&gt;driver = webdriver.Chrome(‘chromedriver’)
driver.get(“https://www.youtube.com/”)&lt;/p&gt;

  &lt;p&gt;time.sleep(3)&lt;/p&gt;

  &lt;p&gt;search = driver.find_element_by_xpath(‘//*[@id=”search”]’)&lt;/p&gt;

  &lt;p&gt;search.send_keys(‘검색’)
time.sleep(1)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;[1 to 50 게임 자동화]&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;num = 1&lt;/p&gt;

  &lt;p&gt;def clickBtn():
    global num
    btns = driver.find_elements_by_xpath(‘//&lt;em&gt;[@id=”grid”]/div[&lt;/em&gt;]’)&lt;/p&gt;

  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for btn in btns:
    print(btn.text, end='\t')
    if btn.text == str(num):
        btn.click()
        prunt(true)
        num += 1
        return
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;

  &lt;p&gt;while num &amp;lt;= 50:
    clickBtn()&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;특수문자-치환&quot;&gt;특수문자 치환&lt;/h3&gt;
&lt;p&gt;re.sub(‘[^0-9a-zA-Zr-힗]’, ‘’, title)&lt;/p&gt;

&lt;h3 id=&quot;다운로드&quot;&gt;다운로드&lt;/h3&gt;
&lt;p&gt;urlretrive(img_src, title + ‘.jpg’)&lt;/p&gt;

</description>
        <pubDate>Sat, 01 Jan 2000 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2000/01/01/python_crawling.html</link>
        <guid isPermaLink="true">http://localhost:4000/2000/01/01/python_crawling.html</guid>
        
        <category>son</category>
        
        <category>blog</category>
        
        <category>python</category>
        
        <category>crawling</category>
        
        
      </item>
    
  </channel>
</rss>
