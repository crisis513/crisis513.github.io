<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>s6i</title>
    <description>s6i's blog, use Jekyll and github pages.</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 21 Sep 2020 01:39:21 +0900</pubDate>
    <lastBuildDate>Mon, 21 Sep 2020 01:39:21 +0900</lastBuildDate>
    <generator>Jekyll v4.0.0</generator>
    
      <item>
        <title>[Docker] 도커 네트워크</title>
        <description>&lt;hr /&gt;

&lt;h3 id=&quot;목차&quot;&gt;목차&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;#list1&quot;&gt;1. 도커 네트워크 &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list1_1&quot;&gt;   1.1. 네트워크 드라이버&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list1_2&quot;&gt;   1.2. bridge&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list1_3&quot;&gt;   1.3. host&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list1_4&quot;&gt;   1.4. none&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list1_5&quot;&gt;   1.5. overlay&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list1_6&quot;&gt;   1.6. macvlan&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list2&quot;&gt;2. 컨테이너의 통신&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list2_1&quot;&gt;   2.1. 링크&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list2_2&quot;&gt;   2.2. 포트 포워딩&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;1-도커-네트워크---&quot;&gt;&lt;span style=&quot;color:purple&quot;&gt;&lt;strong&gt;1. 도커 네트워크&lt;/strong&gt;&lt;/span&gt;   &lt;a name=&quot;list1&quot;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;네트워크 드라이버&lt;/strong&gt; &lt;a name=&quot;list1_1&quot;&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;docker network ls    → 네트워크 드라이버 목록 확인&lt;/p&gt;

        &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker network &lt;span class=&quot;nb&quot;&gt;ls
 &lt;/span&gt;NETWORK ID          NAME                DRIVER              SCOPE
 b3b9ff62fe49        bridge              bridge              &lt;span class=&quot;nb&quot;&gt;local
 &lt;/span&gt;aeca1add77f7        host                host                &lt;span class=&quot;nb&quot;&gt;local
 &lt;/span&gt;766cc2ddc934        none                null                &lt;span class=&quot;nb&quot;&gt;local&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;bridge&lt;/strong&gt;    &lt;a name=&quot;list1_2&quot;&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;컨테이너가 사용하는 프라이빗 네트워크&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;같은 bridge에 연결되어 있으면 컨테이너의 IP주소로 통신 가능&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;외부와 통신도 가능함 → NAPT 통신 사용, 외부와 통신하기 위해서 포트포워딩 사용&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;bridge 네트워크 실습&lt;/strong&gt;&lt;/p&gt;

        &lt;ol&gt;
          &lt;li&gt;
            &lt;p&gt;docker network create   → 네트워크 생성&lt;/p&gt;

            &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker inspect bridge
 → 해당 네트워크의 대역과 연결되어 있는 컨테이너의 목록 및 IP 주소 확인 가능 

 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker network create &lt;span class=&quot;nt&quot;&gt;--subnet&lt;/span&gt; 172.18.0.0/16 &lt;span class=&quot;nt&quot;&gt;--gateway&lt;/span&gt; 172.18.0.1 net1

 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker network &lt;span class=&quot;nb&quot;&gt;ls
 &lt;/span&gt;NETWORK ID          NAME                DRIVER              SCOPE
 b3b9ff62fe49        bridge              bridge              &lt;span class=&quot;nb&quot;&gt;local
 &lt;/span&gt;aeca1add77f7        host                host                &lt;span class=&quot;nb&quot;&gt;local&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;7854534b99b2      net1                bridge              &lt;span class=&quot;nb&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;
 766cc2ddc934        none                null                &lt;span class=&quot;nb&quot;&gt;local&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;net1을 사용하는 컨테이너 생성&lt;/p&gt;

            &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-itd&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; os5 &lt;span class=&quot;nt&quot;&gt;--network&lt;/span&gt; net1 centos:latest

 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;os5 ip a s
 1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
     &lt;span class=&quot;nb&quot;&gt;link&lt;/span&gt;/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
     inet 127.0.0.1/8 scope host lo
     valid_lft forever preferred_lft forever
 12: eth0@if13: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc noqueue state UP group default 
     &lt;span class=&quot;nb&quot;&gt;link&lt;/span&gt;/ether 02:42:ac:12:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0
     inet &lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;172.18.0.2/16&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt; brd 172.18.255.255 scope global eth0
     valid_lft forever preferred_lft forever
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;host&lt;/strong&gt;  &lt;a name=&quot;list1_3&quot;&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;호스트에서 컨테이너의 네트워크 격리를 해제하여 호스트의 네트워크 정보를 공유해서 사용하는 방법&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;host 네트워크 실습&lt;/strong&gt;&lt;/p&gt;

        &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; web4 &lt;span class=&quot;nt&quot;&gt;--network&lt;/span&gt; host httpd:latest 
  06f5be6f136862da2df9ee875c71167820eabd29c489c934b2834db859258762

  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl localhost
  &amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&amp;lt;h1&amp;gt;It works!&amp;lt;/h1&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;

  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--network&lt;/span&gt; host &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; os6 &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; centos:latest
  → 원래 호스트의 ip가 나옴

  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker stop web4
  web4

  &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; httpd 설치
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;yum &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;httpd
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl start httpd
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl status httpd

  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl localhost

  &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; host 네트워크를 사용하는 webserver2 컨테이너 생성
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; webserver2 &lt;span class=&quot;nt&quot;&gt;--network&lt;/span&gt; host httpd:latest
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl localhost
  → 호스트 OS에 있는 httpd.service가 출력
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;none&lt;/strong&gt;  &lt;a name=&quot;list1_4&quot;&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;컨테이너의 네트워크 기능을 사용 X&lt;/p&gt;

        &lt;p&gt;→ Interface를 할당하지 않을 때 사용&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;none 네트워크 실습&lt;/strong&gt;&lt;/p&gt;

        &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; os6 &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--network&lt;/span&gt; none centos:latest ip a s
  1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
      &lt;span class=&quot;nb&quot;&gt;link&lt;/span&gt;/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
      inet 127.0.0.1/8 scope host lo
         valid_lft forever preferred_lft forever
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;overlay&lt;/strong&gt;   &lt;a name=&quot;list1_5&quot;&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;서로 다른 도커 호스트를 연결하여 통신&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;도커 스웜과 같은 클러스터 서비스에 사용&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;macvlan&lt;/strong&gt;   &lt;a name=&quot;list1_6&quot;&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;MAC 주소를 컨테이너에 할당 → 물리적인 네트워크에서 같이 사용 가능&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;실제 네트워크에 직접 연결해야할 때 사용&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;macvlan 네트워크 실습&lt;/strong&gt;&lt;/p&gt;

        &lt;ol&gt;
          &lt;li&gt;IP 확인
            &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ip a show enp0s8
     enp0s8: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
     &lt;span class=&quot;nb&quot;&gt;link&lt;/span&gt;/ether 08:00:27:dd:11:95 brd ff:ff:ff:ff:ff:ff
     inet 192.168.56.100/24 brd 192.168.56.255 scope global noprefixroute enp0s8
         valid_lft forever preferred_lft forever
     inet6 fe80::d31:5047:a77b:837e/64 scope &lt;span class=&quot;nb&quot;&gt;link &lt;/span&gt;noprefixroute 
         valid_lft forever preferred_lft forever
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;NIC의 promisc모드를 활성화&lt;/p&gt;

            &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ip &lt;span class=&quot;nb&quot;&gt;link set &lt;/span&gt;enp0s8 promisc on

 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ip a show enp0s8
 enp0s8: &amp;lt;BROADCAST,MULTICAST,&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;PROMISC&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
 &lt;span class=&quot;nb&quot;&gt;link&lt;/span&gt;/ether 08:00:27:dd:11:95 brd ff:ff:ff:ff:ff:ff
 inet 192.168.56.100/24 brd 192.168.56.255 scope global noprefixroute enp0s8
     valid_lft forever preferred_lft forever
 inet6 fe80::d31:5047:a77b:837e/64 scope &lt;span class=&quot;nb&quot;&gt;link &lt;/span&gt;noprefixroute 
     valid_lft forever preferred_lft forever
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;macvlan 네트워크 생성&lt;/p&gt;

            &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker network create &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; macvlan &lt;span class=&quot;nt&quot;&gt;--subnet&lt;/span&gt; 192.168.56.0/24 
 &lt;span class=&quot;nt&quot;&gt;--gateway&lt;/span&gt; 192.168.56.1 &lt;span class=&quot;nt&quot;&gt;--ip-range&lt;/span&gt; 192.168.56.128/25 &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;enp0s8 macvlan1

 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker network &lt;span class=&quot;nb&quot;&gt;ls
 &lt;/span&gt;NETWORK ID          NAME                DRIVER              SCOPE
 b3b9ff62fe49        bridge              bridge              &lt;span class=&quot;nb&quot;&gt;local
 &lt;/span&gt;aeca1add77f7        host                host                &lt;span class=&quot;nb&quot;&gt;local&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;309515f14dde        macvlan1            macvlan             &lt;span class=&quot;nb&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;macvlan 드라이버를 사용하는 컨테이너 생성&lt;/p&gt;

            &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--network&lt;/span&gt; macvlan1 &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; centos:latest

 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@da574e50dae8 /]# ip a
 lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
     &lt;span class=&quot;nb&quot;&gt;link&lt;/span&gt;/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
     inet 127.0.0.1/8 scope host lo
     valid_lft forever preferred_lft forever
 eth0@if3: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc noqueue state UNKNOWN group default 
     &lt;span class=&quot;nb&quot;&gt;link&lt;/span&gt;/ether 02:42:c0:a8:38:80 brd ff:ff:ff:ff:ff:ff link-netnsid 0
     inet 192.168.56.128/24 brd 192.168.56.255 scope global eth0
     valid_lft forever preferred_lft forever
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;컨테이너의-통신---&quot;&gt;&lt;span style=&quot;color:purple&quot;&gt;&lt;strong&gt;컨테이너의 통신&lt;/strong&gt;&lt;/span&gt;   &lt;a name=&quot;list2&quot;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;링크&lt;/strong&gt;  &lt;a name=&quot;list2_1&quot;&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;컨테이너 간 이름 또는 Alias으로 통신해야 하는 경우에 링크 기능 사용&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;링크 실습&lt;/strong&gt;&lt;/p&gt;

        &lt;ol&gt;
          &lt;li&gt;
            &lt;p&gt;web3 컨테이너 생성&lt;/p&gt;

            &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; web3 httpd:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;link 사용 → ping 테스트&lt;/p&gt;

            &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-itd&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; os7 &lt;span class=&quot;nt&quot;&gt;--link&lt;/span&gt; web3 centos:latest
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker attach os7
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@c3efaa711015 /]# ping web3
 PING web3 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;172.17.0.2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 56&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;84&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; bytes of data.
 64 bytes from web3 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;172.17.0.2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: &lt;span class=&quot;nv&quot;&gt;icmp_seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 &lt;span class=&quot;nv&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;64 &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.089 ms
 64 bytes from web3 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;172.17.0.2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: &lt;span class=&quot;nv&quot;&gt;icmp_seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2 &lt;span class=&quot;nv&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;64 &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.099 ms
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;/etc/hosts 파일 확인&lt;/p&gt;

            &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@c3efaa711015 /]# &lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /etc/hosts
 172.17.0.2	web3 029780c37d77
 172.17.0.3	c3efaa711015
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;컨테이너 이름 or 별칭 사용 가능&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;포트 포워딩&lt;/strong&gt;   &lt;a name=&quot;list2_2&quot;&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;브릿지 네트워크를 사용하는 컨테이너는 외부에서 접근할 때 포트 포워딩해야 함&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;포트 포워딩 실습&lt;/strong&gt;&lt;/p&gt;

        &lt;ol&gt;
          &lt;li&gt;
            &lt;p&gt;호스트의 8080포트로 접근할때 컨테이너의 80번 포트로 전달하는 포트포워딩 설정&lt;/p&gt;

            &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; web5 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 8080:80 httpd:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;docker ps&lt;/p&gt;

            &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker ps 
 CONTAINER ID        IMAGE               COMMAND              CREATED             STATUS              PORTS                  NAMES
 f0929f220e86        httpd:latest        &lt;span class=&quot;s2&quot;&gt;&quot;httpd-foreground&quot;&lt;/span&gt;   29 seconds ago      Up 28 seconds       0.0.0.0:8080-&amp;gt;80/tcp   web5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;접근 확인&lt;/p&gt;

            &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl localhost:8080
 &amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&amp;lt;h1&amp;gt;It works!&amp;lt;/h1&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;

            &lt;p&gt;현재 도커가 설치되어 있는 CentOS 7에서 curl 명령어를 통해 8080 포트로의 접근이 가능한지 확인합니다.&lt;/p&gt;

            &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; son@ubuntu:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl 192.168.56.100:8080
 &amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&amp;lt;h1&amp;gt;It works!&amp;lt;/h1&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;

            &lt;p&gt;현재 Virtualbox를 통해 CentOS를 구동시키고 있는 Ubuntu(Host OS)에서 curl 명령어를 통해 8080 포트로의 접근이 가능한지 확인합니다.&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 02 Sep 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/infra/2020/09/02/docker3.html</link>
        <guid isPermaLink="true">http://localhost:4000/infra/2020/09/02/docker3.html</guid>
        
        <category>son</category>
        
        <category>blog</category>
        
        <category>infra</category>
        
        <category>docker</category>
        
        <category>network</category>
        
        
        <category>Infra</category>
        
      </item>
    
      <item>
        <title>[Docker] 도커 이미지와 컨테이너 및 볼륨 기초</title>
        <description>&lt;hr /&gt;

&lt;h3 id=&quot;목차&quot;&gt;목차&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;#list1&quot;&gt;1. 도커 이미지(Docker Image)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list1_1&quot;&gt;   1.1. 도커 허브(Docker Hub)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list1_2&quot;&gt;   1.2. 도커 이미지 관련 명령어 실습&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list2&quot;&gt;2. 도커 컨테이너(Docker Container)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list2_1&quot;&gt;   2.1. 컨테이너 관련 명령어 실습&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list3&quot;&gt;3. 도커 볼륨(Docker Volume)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list3_1&quot;&gt;   3.1. 도커에서 데이터 관리&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list3_2&quot;&gt;   3.2. Bind Mount 사용&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list3_3&quot;&gt;   3.3. 볼륨 사용 실습&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;1-도커-이미지---&quot;&gt;&lt;span style=&quot;color:purple&quot;&gt;&lt;strong&gt;1. 도커 이미지&lt;/strong&gt;&lt;/span&gt;   &lt;a name=&quot;list1&quot;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;도커 허브(Docker Hub)&lt;/strong&gt; &lt;a name=&quot;list1_1&quot;&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;자신의 계정이 있다면 프로젝트를 Push/Pull 할 수 있는 Github와 같이 도커에서도 도커 허브라는 컨테이너 이미지 저장소를 제공하고 있습니다.&lt;/p&gt;

    &lt;p&gt;Github와 마찬가지로 도커 계정이 있다면 누구나 Push/Pull 할 수 있다는 점에서 비슷합니다.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://hub.docker.com/&quot;&gt;Docker Hub&lt;/a&gt; 사이트에서 회원가입하여 사용하실 수 있습니다.&lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;/static/assets/img/landing/docker_image.png&quot; alt=&quot;docker_image&quot; width=&quot;760&quot; height=&quot;330&quot; /&gt;&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;[그림 1] 깃허브와 도커 허브&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;

    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;도커에서 운영하고 있는 컨테이너 이미지 저장소&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;도커 허브에 저장된 이미지의 이름은 &lt;strong&gt;저장소 이름:태그&lt;/strong&gt; 형태&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Inactive 이미지(6개월간 Push나 Pull이 한 번도 일어나지 않은 이미지)는 삭제 대상이 됨&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;

    &lt;p&gt;이 외의 자세한 정보는 아래의 도커의 FAQ 문서를 참고해주세요.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://www.docker.com/pricing/resource-consumption-updates&quot;&gt;Resource Consumption Updates FAQ&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://www.docker.com/legal/docker-terms-service&quot;&gt;Docker Terms of Service&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;도커 이미지 관련 명령어 실습&lt;/strong&gt;  &lt;a name=&quot;list1_2&quot;&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;docker search&lt;/strong&gt;&lt;/p&gt;

        &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker search centos
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;

        &lt;p&gt;도커 이미지를 검색하기 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker search&lt;/code&gt; 명령어를 사용합니다. 해당 명령어는 centos 공식 이미지가 있는지를 검색하게 됩니다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;docker pull&lt;/strong&gt;&lt;/p&gt;

        &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker pull httpd
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker pull centos:7
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker pull mysql:5.7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;

        &lt;p&gt;이미지를 다운로드하기 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker pull 이미지명:태그명&lt;/code&gt; 명령어를 사용합니다.&lt;/p&gt;

        &lt;p&gt;태그를 생략하면 가장 최신 버전(latest)를 자동으로 받게 되고, 태그를 지정하면 해당 태그의 이미지를 다운로드 하게 됩니다.&lt;/p&gt;

        &lt;p&gt;위의 명령어를 수행하면 최신버전의 httpd 이미지, 7 태그(버전)에 해당하는 centos 이미지와 5.7 태그(버전)에 해당하는 mysql 이미지를 다운로드 받을 수 있습니다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;docker image&lt;/strong&gt;&lt;/p&gt;

        &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker images
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker image &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;

        &lt;p&gt;이미지 목록을 보기 위한 명령어로 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker images&lt;/code&gt;를 사용합니다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;docker rmi&lt;/strong&gt;&lt;/p&gt;

        &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker rmi hello-world:latest
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker rmi mysql:5.7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;

        &lt;p&gt;이미지를 삭제하기 위해&lt;code class=&quot;highlighter-rouge&quot;&gt;docker rmi&lt;/code&gt; 명령어를 사용합니다.&lt;/p&gt;

        &lt;p&gt;기본적으로 컨테이너가 실행되고 있으면 삭제되지 않지만 &lt;code class=&quot;highlighter-rouge&quot;&gt;-f&lt;/code&gt; 옵션을 사용하여 이미지를 강제로 삭제시킬 수 있습니다.&lt;/p&gt;

        &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker rmi &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;docker images &lt;span class=&quot;nt&quot;&gt;-aq&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;

        &lt;p&gt;나아가 모든 이미지를 한번에 삭제하고자 한다면 다음과 같이 docker images 명령의 -a, -q 옵션을 사용하여 이미지 ID를 구한 뒤 docker rmi 명령에 넘겨주는 방법이 있습니다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;docker inspect&lt;/strong&gt;&lt;/p&gt;

        &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker inspect httpd:latest
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;s2&quot;&gt;&quot;Id&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;8aadfb1607e5065070b96cbe5e3259312038cc0e51b2ba62e4ea9da802691574&quot;&lt;/span&gt;,
         &lt;span class=&quot;s2&quot;&gt;&quot;Created&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;2020-08-18T07:16:27.598216826Z&quot;&lt;/span&gt;,
         &lt;span class=&quot;s2&quot;&gt;&quot;Path&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;httpd-foreground&quot;&lt;/span&gt;,
         &lt;span class=&quot;s2&quot;&gt;&quot;Args&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;,
         &lt;span class=&quot;s2&quot;&gt;&quot;State&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
             &lt;span class=&quot;s2&quot;&gt;&quot;Status&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;running&quot;&lt;/span&gt;,
             &lt;span class=&quot;s2&quot;&gt;&quot;Running&quot;&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;,
             &lt;span class=&quot;s2&quot;&gt;&quot;Paused&quot;&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;,
             &lt;span class=&quot;s2&quot;&gt;&quot;Restarting&quot;&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;,
             &lt;span class=&quot;s2&quot;&gt;&quot;OOMKilled&quot;&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;,
             &lt;span class=&quot;s2&quot;&gt;&quot;Dead&quot;&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;,
             &lt;span class=&quot;s2&quot;&gt;&quot;Pid&quot;&lt;/span&gt;: 4925,
             &lt;span class=&quot;s2&quot;&gt;&quot;ExitCode&quot;&lt;/span&gt;: 0,
             &lt;span class=&quot;s2&quot;&gt;&quot;Error&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;,
             &lt;span class=&quot;s2&quot;&gt;&quot;StartedAt&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;2020-08-18T07:20:00.233063636Z&quot;&lt;/span&gt;,
             &lt;span class=&quot;s2&quot;&gt;&quot;FinishedAt&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;2020-08-18T07:19:49.732866179Z&quot;&lt;/span&gt;
         &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
     ...&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;중략&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;

        &lt;p&gt;도커 오브젝트의 정보를 자세하게 확인하고싶을 때 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker inspect&lt;/code&gt; 명령을 사용합니다. 컨테이너 혹은 이미지의 low level 정보를 확인할 수 있고, 기본적인 출력 포맷은 &lt;code class=&quot;highlighter-rouge&quot;&gt;json&lt;/code&gt; 형태입니다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;docker save&lt;/strong&gt; / &lt;strong&gt;docker load&lt;/strong&gt;&lt;/p&gt;

        &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker save &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; img.tar centos:7 httpd:latest
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;tar &lt;/span&gt;tf img.tar
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; img.tar 
 &lt;span class=&quot;nt&quot;&gt;-rw-------&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; 1 user user 393334272  8월 10 13:56 img.tar
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker rmi centos:7 httpd:latest

 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker load &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; img.tar
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker images
 REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
 centos              7                   831691599b88        4 days ago          215MB
 httpd               latest              a6ea92c35c43        4 days ago          166MB
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;

        &lt;p&gt;호스트에 저장된 이미지를 아카이브로 복사하기 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker save&lt;/code&gt; 명령어를 사용하고, 아카이브 파일을 미이지로 불러오기 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker load&lt;/code&gt; 명령어를 사용합니다.&lt;/p&gt;

        &lt;p&gt;2번에서 생성한 centos:7 이미지와 httpd:latest 이미지를 img.tar라는 이름으로 저장하고나서 두 이미지를 삭제한 후에 img.tar 파일으로 이미지를 불러오는 것을 확인할 수 있습니다.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-도커-컨테이너docker-container---&quot;&gt;&lt;span style=&quot;color:purple&quot;&gt;&lt;strong&gt;2. 도커 컨테이너(Docker Container)&lt;/strong&gt;&lt;/span&gt;   &lt;a name=&quot;list2&quot;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker version
Client: Docker Engine - Community
    Version:           19.03.12
    API version:       1.40
    Go version:        go1.13.10
    Git commit:        48a66213fe
    Built:             Mon Jun 22 15:46:54 2020
    OS/Arch:           linux/amd64
    Experimental:      &lt;span class=&quot;nb&quot;&gt;false

&lt;/span&gt;Server: Docker Engine - Community
    Version:           19.03.12
    API version:       1.40
    Go version:        go1.13.10
    Git commit:        48a66213fe
    Built:             Mon Jun 22 15:46:54 2020
    OS/Arch:           linux/amd64
    Experimental:      &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;도커 버전을 확인하기 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker version&lt;/code&gt; 명령어를 입력하면 도커의 버전 정보가 클라이언트와 서버로 나뉘어져 있습니다. 도커는 하나의 명령어로 실행되지만 실제로는 클라이언트와 서버 역할을 각각 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;/static/assets/img/landing/docker_client_host.png&quot; alt=&quot;docker_client_host&quot; width=&quot;523&quot; height=&quot;228&quot; /&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;[그림 2] 도커 클라이언트와 호스트&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;도커 명령어를 입력하면 도커 클라이언트가 도커 서버로 명령을 전송하고 결과를 받아 터미널에 출력해줍니다. 기본값이 도커 서버의 소켓을 바라보고 있기 때문에 사용자는 의식하지 않고 마치 바로 명령을 내리는 것 같은 느낌을 받습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;컨테이너 관련 명령어 실습&lt;/strong&gt; &lt;a name=&quot;list2_1&quot;&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;컨테이너 생성 및 확인&lt;/strong&gt;&lt;/p&gt;

        &lt;ol&gt;
          &lt;li&gt;
            &lt;p&gt;docker ps&lt;/p&gt;

            &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker ps
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker ps &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;

            &lt;p&gt;컨테이너 목록을 확인하기 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker ps&lt;/code&gt; 명령어를 사용합니다.&lt;/p&gt;

            &lt;p&gt;현재 호스트에 존재하는 모든 컨테이너를 출력하고 싶다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;-a&lt;/code&gt; 옵션을 추가하면 됩니다.&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;web1 컨테이너 생성&lt;/p&gt;

            &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker create &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; web1 httpd:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;

            &lt;p&gt;컨테이너를 생성하기 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker create&lt;/code&gt; 명령어를 사용합니다.&lt;/p&gt;

            &lt;p&gt;생성할 컨테이너의 이름은 web1 이고 httpd:latest 이미지를 사용하여 컨테이너를 생성합니다.&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;os1 컨테이너 생성&lt;/p&gt;

            &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker create &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; os1 centos:latest 
 1457915352d8967c6a910d102481120b731329219d258144637302b321da2c3e
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;

            &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-it&lt;/code&gt; 옵션은 &lt;code class=&quot;highlighter-rouge&quot;&gt;-i&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;-t&lt;/code&gt;를 동시에 사용한 것으로 터미널 입력을 위해 자주 사용되는 옵션입니다.&lt;/p&gt;

            &lt;p&gt;-i, –interactive=false: &lt;strong&gt;표준 입력(stdin)을 활성화&lt;/strong&gt;하며 컨테이너와 연결(attach)되어 있지 않더라도 표준 입력을 유지합니다. 보통 이 옵션을 사용하여 Bash에 명령을 입력합니다.&lt;/p&gt;

            &lt;p&gt;-t, –tty=false: &lt;strong&gt;TTY 모드(pseudo-TTY)를 사용&lt;/strong&gt;합니다. &lt;strong&gt;Bash를 사용하려면 이 옵션을 설정&lt;/strong&gt;해야 합니다. 이 옵션을 설정하지 않으면 명령을 입력할 수는 있지만 셸이 표시되지 않습니다.&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;web1 컨테이너 시작&lt;/p&gt;

            &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker start web1
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker inspect web1 | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;IPAddress
         &lt;span class=&quot;s2&quot;&gt;&quot;SecondaryIPAddresses&quot;&lt;/span&gt;: null,
         &lt;span class=&quot;s2&quot;&gt;&quot;IPAddress&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;172.17.0.2&quot;&lt;/span&gt;,
                 &lt;span class=&quot;s2&quot;&gt;&quot;IPAddress&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;172.17.0.2&quot;&lt;/span&gt;,

 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl 172.17.0.2
 &amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&amp;lt;h1&amp;gt;It works!&amp;lt;/h1&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;

            &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker create&lt;/code&gt; 명령으로 생성한 컨테이너를 사용하려면 다음과 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker start&lt;/code&gt; 명령으로 컨테이너를 시작해주어야 합니다.&lt;/p&gt;

            &lt;p&gt;web1 이름의 컨테이너를 시작하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker inspect&lt;/code&gt; 명령을 통해 web1 컨테이너의 ip 주소를 확인하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt; 명령을 통해 해당 ip 주소의 웹서버가 정상적으로 동작하는지 확인합니다.&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;os1 컨테이너 시작&lt;/p&gt;

            &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker start &lt;span class=&quot;nt&quot;&gt;-ai&lt;/span&gt; os1
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@1457915352d8 /]#
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@1457915352d8 /]# &lt;span class=&quot;nb&quot;&gt;exit
 exit&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker ps
 CONTAINER ID        IMAGE               COMMAND              CREATED             STATUS              PORTS               NAMES
 4a0638e6bea2        httpd:latest        &lt;span class=&quot;s2&quot;&gt;&quot;httpd-foreground&quot;&lt;/span&gt;   10 minutes ago      Up 4 minutes        80/tcp              web1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;

            &lt;p&gt;컨테이너를 시작할 때 &lt;code class=&quot;highlighter-rouge&quot;&gt;-a&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;-i&lt;/code&gt; 옵션을 추가하면 컨테이너를 시작시킨 후에 Bash 화면을 연결해줍니다. -a 옵션의 설명은 다음과 같습니다.&lt;/p&gt;

            &lt;p&gt;-a, –attach=[]: 컨테이너에 표준 입력(stdin), 표준 출력(stdout), 표준 에러(stderr)를 연결합니다.&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;docker run 명령으로 web2 컨테이너 실행&lt;/p&gt;

            &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; web2 httpd:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;

            &lt;p&gt;이미지로 컨테이너를 생성할 때는 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker run&lt;/code&gt; 명령어를 사용합니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;-d&lt;/code&gt; 옵션의 설명은 다음과 같습니다.&lt;/p&gt;

            &lt;p&gt;-d, –detach=false: &lt;strong&gt;Detached 모드&lt;/strong&gt;입니다. 보통 데몬 모드라고 부르며 컨테이너가 백그라운드로 실행됩니다.&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;os2 컨테이너 실행&lt;/p&gt;

            &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; os2 centos:latest 
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@f20ddba876c2 /]#
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;os3 컨테이너 실행하면서 hostname 명령 실행&lt;/p&gt;

            &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; os3 centos:latest &lt;span class=&quot;nb&quot;&gt;hostname&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;

            &lt;p&gt;위 명령어는 os3 컨테이너의 hostname을 한 번 출력하고 프로세스가 종료됩니다.&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;os4 컨테이너 실행 후 삭제&lt;/p&gt;

            &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; os4 &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; centos:latest &lt;span class=&quot;nb&quot;&gt;hostname&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;

            &lt;p&gt;위 명령어는 os4 컨테이너의 hostname을 한 번 출력하고 프로세스가 종료된 후에 컨테이너가 삭제됩니다.&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;컨테이너 삭제&lt;/p&gt;

            &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker &lt;span class=&quot;nb&quot;&gt;rm &lt;/span&gt;os3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;

            &lt;p&gt;컨테이너를 삭제하기 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker rm&lt;/code&gt; 명령어를 사용합니다.&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;실행되는 컨테이너 외 전부 삭제&lt;/p&gt;

            &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker container prune
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker ps &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt;
CONTAINER ID        IMAGE               COMMAND              CREATED             STATUS              PORTS               NAMES
f20ddba876c2        centos:latest       &lt;span class=&quot;s2&quot;&gt;&quot;/bin/bash&quot;&lt;/span&gt;          6 minutes ago       Up 6 minutes                            os2
60c84d29c6dc        httpd:latest        &lt;span class=&quot;s2&quot;&gt;&quot;httpd-foreground&quot;&lt;/span&gt;   6 minutes ago       Up 6 minutes        80/tcp              web2
1457915352d8        centos:latest       &lt;span class=&quot;s2&quot;&gt;&quot;/bin/bash&quot;&lt;/span&gt;          44 minutes ago      Up 30 minutes                           os1
4a0638e6bea2        httpd:latest        &lt;span class=&quot;s2&quot;&gt;&quot;httpd-foreground&quot;&lt;/span&gt;   47 minutes ago      Up 41 minutes       80/tcp              web1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;

            &lt;p&gt;실행되는 컨테이너 외의 모든 컨테이너를 삭제하기 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker container prune&lt;/code&gt; 명령어를 사용합니다.&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;docker stats&lt;/p&gt;

            &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker stats 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;

            &lt;p&gt;컨테이너의 실시간 상태를 확인하기 위해서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker stats&lt;/code&gt; 명령어를 사용합니다.&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;컨테이너 중지 및 제거&lt;/strong&gt;&lt;/p&gt;

        &lt;ol&gt;
          &lt;li&gt;
            &lt;p&gt;os2 컨테이너 중지&lt;/p&gt;

            &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker stop os2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;os2 컨테이너 삭제&lt;/p&gt;

            &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker &lt;span class=&quot;nb&quot;&gt;rm &lt;/span&gt;os2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;실행중인 컨테이너 삭제&lt;/p&gt;

            &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker &lt;span class=&quot;nb&quot;&gt;rm &lt;/span&gt;os1 &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;컨테이너 실행 시 유용한 설정&lt;/strong&gt;&lt;/p&gt;

        &lt;ol&gt;
          &lt;li&gt;
            &lt;p&gt;환경변수&lt;/p&gt;

            &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; os3 &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;LAB=docker&quot;&lt;/span&gt; centos:latest
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@38b6ed0b4cdb /]# &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$LAB&lt;/span&gt;
 docker
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@38b6ed0b4cdb /]# &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;cpu 제한&lt;/p&gt;

            &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; os3 &lt;span class=&quot;nt&quot;&gt;--cpus&lt;/span&gt; 0.3 centos:latest
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@c2df3a13921e /]# &lt;span class=&quot;nb&quot;&gt;dd &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/dev/zero &lt;span class=&quot;nv&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/dev/null &amp;amp;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;

            &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--cpus 0.3&lt;/code&gt; 명령을 통해 컨테이너의 cpu 사용을 30%로 제한할 수 있습니다.&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;메모리 제한&lt;/p&gt;

            &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-itd&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; os5 &lt;span class=&quot;nt&quot;&gt;--memory&lt;/span&gt; 1024m centos:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;

            &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--memory 1024m&lt;/code&gt; 명령을 통해 메모리 사용을 1GB로 제한할 수 있습니다.&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;자원 제한 변경&lt;/p&gt;

            &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker update &lt;span class=&quot;nt&quot;&gt;--memory&lt;/span&gt; 2048m os5

 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker update &lt;span class=&quot;nt&quot;&gt;--cpus&lt;/span&gt; 0.05 os5
 os5
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker attach os5
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@50c259122bc9 /]# &lt;span class=&quot;nb&quot;&gt;dd &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/dev/zero &lt;span class=&quot;nv&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/dev/null &amp;amp;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;

            &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker update&lt;/code&gt; 명령을 통해 cpu 혹은 메모리의 제한을 변경할 수 있습니다.&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;컨테이너 접근 및 실행&lt;/strong&gt;&lt;/p&gt;

        &lt;ol&gt;
          &lt;li&gt;
            &lt;p&gt;docker attach&lt;/p&gt;

            &lt;p&gt;표준 입력, 표준 출력/에러를 포함하는 컨테이너에 연결이 가능합니다.&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;docker exec&lt;/p&gt;

            &lt;p&gt;실행중인 컨테이너에서 명령을 실행이 가능합니다.&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;컨테이너 프로세스 및 로그 확인&lt;/strong&gt;&lt;/p&gt;

        &lt;p&gt;컨테이너에서 실행 중인 프로세스와 로그를 확인할 수 있습니다.&lt;/p&gt;

        &lt;ol&gt;
          &lt;li&gt;
            &lt;p&gt;docker top&lt;/p&gt;

            &lt;ul&gt;
              &lt;li&gt;
                &lt;p&gt;컨테이너에서 실행되는 프로세스의 정보를 확인 가능&lt;/p&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;p&gt;리눅스의 ps 옵션을 그대로 사용 가능함&lt;/p&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;docker logs&lt;/p&gt;

            &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; db1 mysql:5.7
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker logs db1
 2020-08-10 06:54:13+00:00 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;ERROR] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Entrypoint]: Database is uninitialized and password option is not specified
     You need to specify one of MYSQL_ROOT_PASSWORD, MYSQL_ALLOW_EMPTY_PASSWORD and MYSQL_RANDOM_ROOT_PASSWORD

 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; db2 &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;MYSQL_ROOT_PASSWORD=1234&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; mysql:5.7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;

            &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker logs&lt;/code&gt; 명령어를 통해 컨테이너의 로그를 확인할 수 있습니다.&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;컨테이너에 파일 복사 및 확인&lt;/strong&gt;&lt;/p&gt;

        &lt;ol&gt;
          &lt;li&gt;
            &lt;p&gt;docker cp&lt;/p&gt;

            &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker &lt;span class=&quot;nb&quot;&gt;cp&lt;/span&gt; /etc/passwd os5:/tmp
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;os5 &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; /tmp/passwd
 &lt;span class=&quot;nt&quot;&gt;-rw-r--r--&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; 1 root root 2304 Aug 10 02:15 /tmp/passwd
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker &lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;os5:/tmp/passwd /home/user/
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; passwd
 &lt;span class=&quot;nt&quot;&gt;-rw-r--r--&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; 1 user user 2304  8월 10 11:15 passwd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;

            &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker cp&lt;/code&gt; 명령어를 통해 호스트 파일을 컨테이너로 복사하거나 컨테이너의 파일을 호스트에 복사할 수 있습니다.&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;docker diff&lt;/p&gt;

            &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker diff os5
 C /tmp
 A /tmp/passwd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;

            &lt;p&gt;컨테이너에서의 파일의 변경 상태를 체크하기 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker diff&lt;/code&gt; 명령어를 사용합니다.&lt;/p&gt;

            &lt;ul&gt;
              &lt;li&gt;
                &lt;p&gt;docker diff 명령으로 출력되는 파일의 상태&lt;/p&gt;

                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;p&gt;A : 파일이 추가됨&lt;/p&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;p&gt;C : 파일이 변경됨&lt;/p&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;p&gt;D : 파일이 삭제됨&lt;/p&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;3-도커-볼륨docker-volume---&quot;&gt;&lt;span style=&quot;color:purple&quot;&gt;&lt;strong&gt;3. 도커 볼륨(Docker Volume)&lt;/strong&gt;&lt;/span&gt;   &lt;a name=&quot;list3&quot;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;도커에서 데이터 관리&lt;/strong&gt;  &lt;a name=&quot;list3_1&quot;&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;기본적으로 컨테이너에 생성되는 모든 파일은 컨테이너 레이어에 저장됨&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;컨테이너와 함께 삭제되는 런타임 데이터&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;이 데이터를 영구적으로 저장하려면 반드시 볼륨을 사용해야 함&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;Bind Mount&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;초기 도커부터 사용했던 방식&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;호스트의 특정 디렉토리와 컨테이너의 디렉토리를 연결하는 방식&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;따로 기록하지 않으면 관리하기 쉽지 않음&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;성능이 뛰어나지만 호스트의 파일 시스템에 대한 의존도가 높음&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;호스트의 민감한 파일까지 접근할 수 있음으로 보안 측면인 문제가 발생 가능함&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;볼륨&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;도커에 의해 관리되는 스토리지&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;docker 명령을 사용하여 생성 가능, 사용되지 않으면 한꺼번에 삭제 가능&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;이미지의 Volumes 부분에 어떤 값이 지정되어 있는 경우, 컨테이너로 실행할 때 볼륨을 지정해야 함&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;다양한 드라이버를 지원&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Bind Mount 사용&lt;/strong&gt; &lt;a name=&quot;list3_2&quot;&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  ```bash
  [user@docker ~]$ mkdir ~/bm1
  [user@docker ~]$ touch ~/bm1/fileA.txt

  [user@docker ~]$ docker run -dit --name os3 -v ~/bm1:/tmp/mount centos:latest

  [user@docker ~]$ docker exec os3 ls -l /tmp/mount
  total 0
  -rw-rw-r--. 1 1000 1000 0 Aug 10 07:23 fileA.txt

  [user@docker ~]$ sudo -i
  [sudo] user의 암호: 
  [root@docker ~]# cd /var/lib/docker/volumes/
  [root@docker volumes]# ls -l
  ```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;볼륨 사용 실습&lt;/strong&gt;    &lt;a name=&quot;list3_3&quot;&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;vol1 볼륨 생성&lt;/p&gt;

        &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker volume create vol1
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker inspect vol1 
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;s2&quot;&gt;&quot;CreatedAt&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;2020-08-18T16:28:04+09:00&quot;&lt;/span&gt;,
         &lt;span class=&quot;s2&quot;&gt;&quot;Driver&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;local&quot;&lt;/span&gt;,
         &lt;span class=&quot;s2&quot;&gt;&quot;Labels&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;,
         &lt;span class=&quot;s2&quot;&gt;&quot;Mountpoint&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;/var/lib/docker/volumes/vol1/_data&quot;&lt;/span&gt;,
         &lt;span class=&quot;s2&quot;&gt;&quot;Name&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;vol1&quot;&lt;/span&gt;,
         &lt;span class=&quot;s2&quot;&gt;&quot;Options&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;,
         &lt;span class=&quot;s2&quot;&gt;&quot;Scope&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;local&quot;&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@docker ~]# &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /var/lib/docker/volumes/
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@docker volumes]# &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;vol1 볼륨을 os4의 /tmp/volume에 연결&lt;/p&gt;

        &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-itd&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; os4 &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; vol1:/tmp/volume centos:latest

 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;os4 &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; /tmp/volume
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;os4 &lt;span class=&quot;nb&quot;&gt;touch&lt;/span&gt; /tmp/volume/fileB.txt

 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@docker ~]# &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /var/lib/docker/volumes/vol1/_data/
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@docker _data]# &lt;span class=&quot;nb&quot;&gt;ls
 &lt;/span&gt;fileB.txt

 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@docker _data]# &lt;span class=&quot;nb&quot;&gt;exit
 logout&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker attach os4
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@f083223357e9 /]# &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /tmp/volume/
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@f083223357e9 volume]# &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt;
 total 0
 &lt;span class=&quot;nt&quot;&gt;-rw-r--r--&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; 1 root root 0 Aug 10 07:31 fileB.txt
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@f083223357e9 volume]# &lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; index.html
 Hello World!

 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@f083223357e9 volume]# &lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;escape sequence &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Ctrl + p + q&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; web3 &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; vol1:/usr/local/apache2/htdocs

 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; web3 &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; vol1:/usr/local/apache2/htdocs:ro httpd:latest
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker inspect web3 | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; ipaddress
             &lt;span class=&quot;s2&quot;&gt;&quot;SecondaryIPAddresses&quot;&lt;/span&gt;: null,
             &lt;span class=&quot;s2&quot;&gt;&quot;IPAddress&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;172.17.0.7&quot;&lt;/span&gt;,
                     &lt;span class=&quot;s2&quot;&gt;&quot;IPAddress&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;172.17.0.7&quot;&lt;/span&gt;,
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl 172.17.0.7
 Hello World! 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
        &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 01 Sep 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/infra/2020/09/01/docker2.html</link>
        <guid isPermaLink="true">http://localhost:4000/infra/2020/09/01/docker2.html</guid>
        
        <category>son</category>
        
        <category>blog</category>
        
        <category>infra</category>
        
        <category>docker</category>
        
        <category>image</category>
        
        <category>container</category>
        
        <category>volume</category>
        
        
        <category>Infra</category>
        
      </item>
    
      <item>
        <title>[Docker] 도커 개요 및 설치 - CentOS 7</title>
        <description>&lt;hr /&gt;

&lt;h3 id=&quot;목차&quot;&gt;목차&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;#list1&quot;&gt;1. 도커 개요&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list1_1&quot;&gt;   1.1. 도커란?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list1_2&quot;&gt;   1.2. 가상머신과 컨테이너 비교&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list1_3&quot;&gt;   1.3. 도커의 특징&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list1_4&quot;&gt;   1.4. 도커의 구조 및 기능&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list1_5&quot;&gt;   1.5. 도커의 핵심 기술&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list2&quot;&gt;2. 도커 설치&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list2_1&quot;&gt;   2.1. 실습 환경&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list2_2&quot;&gt;   2.2. 도커 설치 실습&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1-도커-개요---&quot;&gt;&lt;span style=&quot;color:purple&quot;&gt;&lt;strong&gt;1. 도커 개요&lt;/strong&gt;&lt;/span&gt;   &lt;a name=&quot;list1&quot;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;도커란?&lt;/strong&gt;   &lt;a name=&quot;list1_1&quot;&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Go 언어로 개발&lt;/strong&gt;된 컨테이너 기반의 오픈소스 가상화 플랫폼&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;다양한 OS 환경, 여러 프로그램들을 화물에 비유하여 컨테이너에 실어 여러 곳으로 운반하여 배포한다는 개념&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;가상머신과 컨테이너 비교&lt;/strong&gt;    &lt;a name=&quot;list1_2&quot;&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;/static/assets/img/landing/vm_vs_container.png&quot; alt=&quot;vm_vs_container&quot; width=&quot;760&quot; height=&quot;330&quot; /&gt;&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;[그림 1] 컨테이너(왼쪽) vs 가상머신(오른쪽)&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;

    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;가상머신(Virtual Machine)&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Host OS의 자원을 할당받아&lt;/code&gt; 하이퍼바이저를 이용해 Guest OS를 가상화 하여 사용하는 방식&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Host OS의 리소스 분할 또는 오버헤드와 OS 위에 또 OS를 설치하는 개념이기 때문에 &lt;code class=&quot;highlighter-rouge&quot;&gt;속도저하&lt;/code&gt;의 단점이 존재&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;컨테이너(Container)&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Host OS를 공유&lt;/code&gt;하며, 여러 개의 컨테이너들이 서로 영향을 미치지 않고 &lt;code class=&quot;highlighter-rouge&quot;&gt;독립적으로 실행&lt;/code&gt;되어 &lt;code class=&quot;highlighter-rouge&quot;&gt;가벼움&lt;/code&gt;&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;VM과의 가장 큰 차이점은 &lt;code class=&quot;highlighter-rouge&quot;&gt;프로세스를 격리&lt;/code&gt; 하는 것&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;독립적으로 Host OS의 자원을 공유하며 각각 필요한 자원들을 할당받아 실행되기 때문에 &lt;code class=&quot;highlighter-rouge&quot;&gt;오버헤드가 적음&lt;/code&gt;&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ol&gt;

    &lt;p&gt;즉, 가상 머신은 전체 하드웨어 서버를 추상화하는 반면 컨테이너는 운영 체제 커널을 추상화하여 &lt;strong&gt;훨씬 더 빠르고 가벼운 인스턴스를 제공&lt;/strong&gt;합니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;도커의 특징&lt;/strong&gt;   &lt;a name=&quot;list1_3&quot;&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;서버를 코드 형태로 정의&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;&lt;strong&gt;IaC(Infrastructure as Code)&lt;/strong&gt;&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;이미지를 제작할 때 코드 형태로 정의하여 작성 가능&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;이식성(portability)&lt;/strong&gt;&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;개발 환경, 테스트 환경, 서비스 환경을 모두 동일하게 사용 가능&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;도커 컨테이너의 기반이 되는 &lt;code class=&quot;highlighter-rouge&quot;&gt;도커 이미지&lt;/code&gt;가 있다면 애플리케이션을 동일한 환경에서 구동할 수 있다&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;상호운용성(interoperability)&lt;/strong&gt;&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;다양한 벤더의 시스템 및 오픈소스와 연계하여 사용 가능&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;예를 들어, 상용 Linux 중 가장 많이 쓰이는 RHEL7에서도 도커를 &lt;code class=&quot;highlighter-rouge&quot;&gt;기본으로 탑재&lt;/code&gt;&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;AWS에서도 Amazon EC2 Container Service를 통해 도커 실행 환경 운영 서비스를 제공&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;도커의 구조 및 기능&lt;/strong&gt;   &lt;a name=&quot;list1_4&quot;&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;/static/assets/img/landing/docker_architecture.png&quot; alt=&quot;docker_architecture&quot; width=&quot;760&quot; height=&quot;390&quot; /&gt;&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;[그림 2] 도커 아키텍처&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;

    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;도커 데몬(Docker Deamon)&lt;/strong&gt;&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;&lt;strong&gt;도커 API 요청을 지속적으로 수신 및 처리&lt;/strong&gt;&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;도커 이미지, 컨테이너, 네트워크 및 볼륨을 관리하는 지속적인 백그라운드 프로세스&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;도커 클라이언트(Docker Client)&lt;/strong&gt;&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;&lt;strong&gt;도커 데몬과 상호 작용&lt;/strong&gt;하기 위한 CLI(Docker)&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;컨테이너 인스턴스 관리 방법이 단순함&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;docker commit, docker export, docker import 등의 도커 관련 명령이 존재&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;도커 레지스트리(Docker Registry)&lt;/strong&gt;&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;도커 이미지를 저장&lt;/code&gt;하기 위해 사용&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;기본적으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;Docker Hub&lt;/code&gt;라는 퍼블릭 레지스트리로 설정되어 있고 &lt;code class=&quot;highlighter-rouge&quot;&gt;Harbor&lt;/code&gt;와 같은 프라이빗 레지스트리도 사용 가능&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;도커 객체&lt;/strong&gt;&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;이미지&lt;/p&gt;

            &lt;ul&gt;
              &lt;li&gt;
                &lt;p&gt;컨테이너를 생성하기 위한 &lt;code class=&quot;highlighter-rouge&quot;&gt;Read Only&lt;/code&gt; 템플릿&lt;/p&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;p&gt;도커 이미지를 생성하고 실행하기 까지의 단계를 정의한 &lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt;을 통해 빌드 가능&lt;/p&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;p&gt;새로운 컨테이너를 생성하면 변경된 레이어만 따로 체크하는 형태로 가볍고 빠름&lt;/p&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;컨테이너&lt;/p&gt;

            &lt;ul&gt;
              &lt;li&gt;
                &lt;p&gt;이미지의 실행 형태, 이미지를 실행하여 메모리에 올려 동작하는 것&lt;/p&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;하나의 컨테이너&lt;/code&gt;에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;하나의 애플리케이션&lt;/code&gt;만 실행하는 것을 &lt;strong&gt;권장&lt;/strong&gt;&lt;/p&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;p&gt;기본적으로 호스트 머신의 네트워크 연결을 통해 외부 네트워크와 연결 가능&lt;/p&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;네트워크&lt;/p&gt;

            &lt;ul&gt;
              &lt;li&gt;
                &lt;p&gt;격리 되어 동작하는 모든 컨테이너가 통신하기 위한 통로로 사용되며 다음의 5 가지 네트워크 드라이버를 사용&lt;/p&gt;

                &lt;p&gt;1) Bridge&lt;/p&gt;

                &lt;p&gt;컨테이너의 &lt;code class=&quot;highlighter-rouge&quot;&gt;기본 네트워크 드라이버&lt;/code&gt;입니다. 애플리케이션이 독립 실행형 컨테이너, 즉 동일한 도커 호스트와 통신하는 여러 컨테이너에서 실행될 때 이 네트워크를 사용합니다.&lt;/p&gt;

                &lt;p&gt;2) Host&lt;/p&gt;

                &lt;p&gt;이 드라이버는 도커 컨테이너와 도커 호스트 간의 &lt;code class=&quot;highlighter-rouge&quot;&gt;네트워크 격리를 제거&lt;/code&gt;합니다. 호스트와 컨테이너간에 네트워크 격리가 필요하지 않을 때 사용할 수 있습니다.&lt;/p&gt;

                &lt;p&gt;3) Overlay&lt;/p&gt;

                &lt;p&gt;이 네트워크는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Swarm 서비스가 서로 통신&lt;/code&gt; 할 수 있도록합니다. 컨테이너가 다른 도커 호스트에서 실행되기를 원하거나 여러 애플리케이션에서 Swarm 서비스를 구성하려는 경우에 사용합니다.&lt;/p&gt;

                &lt;p&gt;4) None&lt;/p&gt;

                &lt;p&gt;이 드라이버는 &lt;strong&gt;모든 네트워킹을 비활성화&lt;/strong&gt;합니다.&lt;/p&gt;

                &lt;p&gt;5) macvlan&lt;/p&gt;

                &lt;p&gt;이 드라이버는 &lt;code class=&quot;highlighter-rouge&quot;&gt;컨테이너에 MAC 주소를 할당&lt;/code&gt;하여 물리 장치처럼 보이게합니다. &lt;strong&gt;Mac 주소를 통해 컨테이너 간의 트래픽을 라우팅&lt;/strong&gt;합니다. 예를 들어, VM 설정을 마이그레이션하는 동안 컨테이너가 물리 장치처럼 보이게 하려는 경우에 이 네트워크를 사용합니다.&lt;/p&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;서비스&lt;/p&gt;

            &lt;ul&gt;
              &lt;li&gt;
                &lt;p&gt;여러가지 도커 데몬들로 구성 및 확장 가능&lt;/p&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Docker Swarm&lt;/code&gt;과 같은 서비스를 통해 사용자에게는 단일 애플리케이션처럼 보임&lt;/p&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;도커의 핵심 기술&lt;/strong&gt;   &lt;a name=&quot;list1_5&quot;&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;네임스페이스(Namespace)&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;&lt;strong&gt;서로가 충돌하지 않는 독립된 컨테이너를 제공하기 위해&lt;/strong&gt; 네임스페이스라는 기술을 적용&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;리눅스에서는 다음 6 가지 네임스페이스를 지원&lt;/p&gt;

            &lt;p&gt;1) mnt (파일시스템 마운트): 호스트 파일시스템에 구애받지 않고 독립적으로 파일시스템을 마운트하거나 언마운트 가능&lt;/p&gt;

            &lt;p&gt;2) pid (프로세스): 독립적인 프로세스 공간을 할당&lt;/p&gt;

            &lt;p&gt;3) net (네트워크): namespace간에 network 충돌 방지 (중복 포트 바인딩 등)&lt;/p&gt;

            &lt;p&gt;4) ipc (SystemV IPC): 프로세스간의 독립적인 통신통로 할당&lt;/p&gt;

            &lt;p&gt;5) uts (hostname): 독립적인 hostname 할당&lt;/p&gt;

            &lt;p&gt;6) user (UID): 독립적인 사용자 할당&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;cgroups(Control Groups)&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;&lt;strong&gt;리소스에 대한 제어를 가능&lt;/strong&gt;하게 해주는 리눅스 커널의 기능&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;도커 엔진(Docker Engine)이 사용 가능한 하드웨어 자원을 공유하도록 허용하거나 선택적으로 제한할 수 있음&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;다음 리소스를 제어할 수 있음&lt;/p&gt;

            &lt;p&gt;1) 메모리&lt;/p&gt;

            &lt;p&gt;2) CPU&lt;/p&gt;

            &lt;p&gt;3) I/O&lt;/p&gt;

            &lt;p&gt;4) 네트워크&lt;/p&gt;

            &lt;p&gt;5) device 노드(/dev/)&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;2-도커-설치---&quot;&gt;&lt;span style=&quot;color:purple&quot;&gt;&lt;strong&gt;2. 도커 설치&lt;/strong&gt;&lt;/span&gt;   &lt;a name=&quot;list2&quot;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;실습 환경&lt;/strong&gt; &lt;a name=&quot;list2_1&quot;&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;※ 본 포스트를 포함한 앞으로의 도커 관련 실습 환경은 다음과 같은 환경에서 진행됩니다.&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;Host OS인 Ubuntu에서 Virtualbox를 통해 CentOS VM을 생성 및 접속하여 진행했습니다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Host OS - Ubuntu 18.04 LTS&lt;/strong&gt;&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;IP : 192.168.56.1&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Username : son&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Hostname : ubuntu&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Guest OS - CentOS 7.8 (on Virtualbox)&lt;/strong&gt;&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;IP : 192.168.56.100&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Username : user&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Hostname : docker&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;도커 설치 실습&lt;/strong&gt;    &lt;a name=&quot;list2_2&quot;&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;docker-ce 설치&lt;/p&gt;

        &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;yum &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; yum-utils &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; device-mapper-persistent-data &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; lvm2

 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;yum-config-manager &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--add-repo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://download.docker.com/linux/centos/docker-ce.repo&quot;&lt;/span&gt;

 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;yum &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;docker-ce docker-ce-cli containerd.io

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;

        &lt;p&gt;yum-config-manager를 통해 docker-ce 패키지 저장소를 추가하여 설치해줍니다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;서비스 실행 및 활성화&lt;/p&gt;

        &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl start docker
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;docker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;

        &lt;p&gt;docker 서비스를 실행시키고, 부팅 시 docker 서비스가 자동으로 구동되도록 enable 시켜줍니다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;docker 그룹 지정&lt;/p&gt;

        &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;usermod &lt;span class=&quot;nt&quot;&gt;-aG&lt;/span&gt; docker &lt;span class=&quot;nv&quot;&gt;$USER&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exit

 &lt;/span&gt;son@ubuntu:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh user@192.168.56.100
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;

        &lt;p&gt;기본적으로 docker 명령어를 사용하기 위해서는 root 권한이 필요합니다.&lt;/p&gt;

        &lt;p&gt;$USER에는 현재 사용 중인 유저인 user가 들어가고, &lt;code class=&quot;highlighter-rouge&quot;&gt;docker 그룹에 user를 추가&lt;/code&gt;하여 &lt;strong&gt;권한 상승 없이도 docker 명령을 사용&lt;/strong&gt;할 수 있도록 해줍니다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;docker 버전 확인&lt;/p&gt;

        &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker version
 Client: Docker Engine - Community
     Version:           19.03.12
     API version:       1.40
     Go version:        go1.13.10
     Git commit:        48a66213fe
     Built:             Mon Jun 22 15:46:54 2020
     OS/Arch:           linux/amd64
     Experimental:      &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;hello world 컨테이너 실행&lt;/p&gt;

        &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;user@docker ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run hello-world
 Unable to find image &lt;span class=&quot;s1&quot;&gt;'hello-world:latest'&lt;/span&gt; locally
 latest: Pulling from library/hello-world
 0e03bdcc26d7: Pull &lt;span class=&quot;nb&quot;&gt;complete 
 &lt;/span&gt;Digest: sha256:7f0a9f93b4aa3022c3a4c147a449bf11e0941a1fd0bf4a8e6c9408b2600777c5
 Status: Downloaded newer image &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;hello-world:latest

 Hello from Docker!
 This message shows that your installation appears to be working correctly.

 To generate this message, Docker took the following steps:
 1. The Docker client contacted the Docker daemon.
 2. The Docker daemon pulled the &lt;span class=&quot;s2&quot;&gt;&quot;hello-world&quot;&lt;/span&gt; image from the Docker Hub.
     &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;amd64&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 3. The Docker daemon created a new container from that image which runs the
     executable that produces the output you are currently reading.
 4. The Docker daemon streamed that output to the Docker client, which sent it
     to your terminal.

 To try something more ambitious, you can run an Ubuntu container with:
 &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; ubuntu bash

 Share images, automate workflows, and more with a free Docker ID:
 https://hub.docker.com/

 For more examples and ideas, visit:
 https://docs.docker.com/get-started/

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 01 Sep 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/infra/2020/09/01/docker1.html</link>
        <guid isPermaLink="true">http://localhost:4000/infra/2020/09/01/docker1.html</guid>
        
        <category>son</category>
        
        <category>blog</category>
        
        <category>infra</category>
        
        <category>docker</category>
        
        <category>vm</category>
        
        <category>overviwe</category>
        
        <category>install</category>
        
        
        <category>Infra</category>
        
      </item>
    
      <item>
        <title>[Project] GCP를 활용한 웹사이트 구축과 모너터링 및 부하테스트</title>
        <description>&lt;p&gt;본 프로젝트는 CCCR에서 GCP(Google Cloud Platform)를 공부하며 짧은 기간 진행된 토이 프로젝트입니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;목차&quot;&gt;목차&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;#list1&quot;&gt;1. 프로젝트 개요&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list2&quot;&gt;2. 프로젝트 구현&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list2_1&quot;&gt;   2.1. Cloud SQL 구성&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list2_2&quot;&gt;   2.2. 인스턴스 생성&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list2_3&quot;&gt;   2.3. Wordpress 구축 및 Cloud SQL 연동&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list2_4&quot;&gt;   2.4. 스냅샷을 통한 복제 및 NFS 설정&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list2_5&quot;&gt;   2.5. 비관리형 로드밸런싱 구성&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list2_6&quot;&gt;   2.6. Bucket 생성 및 백업 설정&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list2_7&quot;&gt;   2.7. Stack Driver를 활용한 모니터링 및 로깅 시스템 구축&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list3&quot;&gt;3. 프로젝트 테스트&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list3_1&quot;&gt;   3.1. NFS 테스트&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list3_2&quot;&gt;   3.2. Cloud SQL 로깅 테스트&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list3_3&quot;&gt;   3.3. 오토스케일링 및 부하테스트&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;1-프로젝트-개요---&quot;&gt;&lt;span style=&quot;color:purple&quot;&gt;&lt;strong&gt;1. 프로젝트 개요&lt;/strong&gt;&lt;/span&gt;   &lt;a name=&quot;list1&quot;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;먼저, 프로젝트 진행 당시에 notion을 통해 정리했었던 프로젝트 진행 순서는 다음 [그림 1]과 같습니다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;/static/assets/img/landing/gcp_toyproject_1.png&quot; alt=&quot;What_we_did&quot; width=&quot;560&quot; height=&quot;310&quot; /&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;[그림 1] 프로젝트 진행 순서&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;웹서비스는 CentOS 인스턴스를 생성하여 워드프레스(Wordpress)를 구축하였고, 구축한 웹서비스에 GCP의 기능을 최대한 활용하는 형태로 프로젝트를 진행했습니다.&lt;/p&gt;

&lt;p&gt;GCP에서 제공해주는 Cloud DNS를 이용하여 도메인을 설정해보고 싶었지만, 도메인을 구입하고 등록하는 과정이 필요하여 생략했습니다.&lt;/p&gt;

&lt;p&gt;다음 [그림 2]는 본 프로젝트의 구조를 쉽게 나타낼 수 있도록 아키텍처를 그린 것입니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;/static/assets/img/landing/gcp_toyproject_2.png&quot; alt=&quot;project_architecture&quot; width=&quot;850&quot; height=&quot;400&quot; /&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;[그림 2] 프로젝트 아키텍처&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;2-프로젝트-구현---&quot;&gt;&lt;span style=&quot;color:purple&quot;&gt;&lt;strong&gt;2. 프로젝트 구현&lt;/strong&gt;&lt;/span&gt;   &lt;a name=&quot;list2&quot;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;cloud-sql-구성---&quot;&gt;Cloud SQL 구성   &lt;a name=&quot;list2_1&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;GCP 콘솔 페이지에 접속하면 상단 바에 제품 및 리소스를 검색할 수 있는 텍스트 박스가 있습니다.&lt;/p&gt;

&lt;p&gt;해당 검색창에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Cloud SQL Admin API&lt;/code&gt;를 입력하여 다음 [그림 3]에 보이는 &lt;strong&gt;사용&lt;/strong&gt; 버튼을 눌러 Cloud SQL를 활성화 시켜줍니다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;/static/assets/img/landing/gcp_toyproject_3.png&quot; alt=&quot;enable_cloudsql&quot; width=&quot;380&quot; height=&quot;163&quot; /&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;[그림 3] Cloud SQL Admin API 활성화&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Cloud SQL Admin API를 활성화 했다면 GCP 콘솔 페이지의 왼쪽 상단에 있는 탐색 메뉴에서 &lt;strong&gt;SQL 탭&lt;/strong&gt;을 눌러 다음 [그림 4]와 같이 &lt;strong&gt;Cloud SQL 인스턴스를 생성&lt;/strong&gt;했습니다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;/static/assets/img/landing/gcp_toyproject_4.png&quot; alt=&quot;create_cloudsql_instance&quot; width=&quot;500&quot; height=&quot;600&quot; /&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;[그림 4] Cloud SQL 인스턴스 생성&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;본 프로젝트에서는 MySQL 5.7을 선택하여 데이터베이스를 생성하였고, 리전은 성능 향상을 위해 비교적 가까운 서울 리전을 선택하였습니다.&lt;/p&gt;

&lt;p&gt;다음으로 GCP 콘솔 기능인 Cloud Shell 화면에서 웹서버에서 사용할 데이터베이스의 설정을 진행합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-mysql&quot;&gt;crisis51526@cloudshell:~ (cccr-gcp-project)$ gcloud sql connect mysql-wordpress --user=root --quiet
Allowlisting your IP for incoming connection for 5 minutes...done.
Connecting to database with SQL user [root].Enter password: Input Your Password

Your MySQL connection id is 187
Server version: 5.7.25-google-log (Google)

Copyright (c) 2000, 2020, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.

mysql&amp;gt; GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'Input Your Password' WITH GRANT OPTION;
Query OK, 0 rows affected, 1 warning (0.05 sec)

mysql&amp;gt; CREATE DATABASE wordpress CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;
Query OK, 1 row affected (0.05 sec)

mysql&amp;gt; GRANT ALL ON wordpress.* TO 'wordpressuser'@'%' IDENTIFIED BY 'Input Your Password';
Query OK, 0 rows affected, 1 warning (0.06 sec)

mysql&amp;gt; FLUSH PRIVILEGES;
Query OK, 0 rows affected (0.06 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;인스턴스-생성---&quot;&gt;인스턴스 생성   &lt;a name=&quot;list2_2&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;웹서버로 사용할 인스턴스를 선택할 때 같은 리전을 선택하도록 합니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;wordpress-구축-및-cloud-sql-연동---&quot;&gt;Wordpress 구축 및 Cloud SQL 연동   &lt;a name=&quot;list2_3&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&quot;스냅샷을-통한-복제-및-nfs-설정---&quot;&gt;스냅샷을 통한 복제 및 NFS 설정   &lt;a name=&quot;list2_4&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&quot;비관리형-로드밸런싱-구성---&quot;&gt;비관리형 로드밸런싱 구성   &lt;a name=&quot;list2_5&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&quot;bucket-생성-및-백업-설정---&quot;&gt;Bucket 생성 및 백업 설정   &lt;a name=&quot;list2_6&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&quot;stack-driver를-활용한-모니터링-및-로깅-시스템-구축---&quot;&gt;Stack Driver를 활용한 모니터링 및 로깅 시스템 구축   &lt;a name=&quot;list2_7&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;3-프로젝트-테스트---&quot;&gt;&lt;span style=&quot;color:purple&quot;&gt;&lt;strong&gt;3. 프로젝트 테스트&lt;/strong&gt;&lt;/span&gt;   &lt;a name=&quot;list3&quot;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;nfs-테스트---&quot;&gt;NFS 테스트   &lt;a name=&quot;list3_1&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&quot;cloud-sql-로깅-테스트---&quot;&gt;Cloud SQL 로깅 테스트   &lt;a name=&quot;list3_2&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&quot;오토스케일링-및-부하테스트---&quot;&gt;오토스케일링 및 부하테스트   &lt;a name=&quot;list3_3&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

</description>
        <pubDate>Sun, 16 Aug 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/project/2020/08/16/gcp_project.html</link>
        <guid isPermaLink="true">http://localhost:4000/project/2020/08/16/gcp_project.html</guid>
        
        <category>son</category>
        
        <category>blog</category>
        
        <category>project</category>
        
        <category>gcp</category>
        
        
        <category>Project</category>
        
      </item>
    
      <item>
        <title>[Project] ssustack_installer</title>
        <description>&lt;p&gt;본 프로젝트는 숭실대학교에서 김명호 교수님의 지도하에 진행 된 프로젝트입니다.&lt;/p&gt;

&lt;h2 id=&quot;ssustack_installer&quot;&gt;ssustack_installer&lt;/h2&gt;

&lt;p&gt;ssustack_installer 프로젝트는 ssustack 설치를 웹 브라우저에서 더욱 쉽게 설치할 수 있도록 도와줍니다.&lt;/p&gt;

&lt;p&gt;ssustack_installer를 실행하면 웹 브라우저가 뜨게되고, 필요한 설정을 입력 및 선택하면 ssustack 스크립트를 기반으로 설치가 시작됩니다.&lt;/p&gt;

&lt;p&gt;사용자의 선택에 따라 싱글노드 혹은 멀티호스트로 자유롭게 설치가 가능합니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;environment&quot;&gt;Environment&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;OpenStack : Rokcy Release&lt;/li&gt;
  &lt;li&gt;OS : Ubuntu 18.04 LTS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;

&lt;p&gt;다음 설명할 설치 방법은 모든 노드가 Ubuntu 18.04 운영체제만 설치된 환경이라 가정하고 진행해야 할 작업을 설명합니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;1-ssustack--ssustack_installer-클론&quot;&gt;1. ssustack &amp;amp; ssustack_installer 클론&lt;/h4&gt;

&lt;p&gt;OpenStack 환경을 구성하는 모든 노드에서 진행합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone http://git.dotstack.io/crisis513/ssustack.git
$ git clone http://git.dotstack.io/dotstack/ssustack_installer.git
$ cd ssustack/bin
$ ./ssustack_user_creation.sh
$ cp -r &amp;lt;your_controller_path&amp;gt;/ssustack/ .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;생성할 유저의 패스워드를 설정하여 ssustack 유저가 생성되면 ssustack 폴더를 ssustack 유저의 홈 디렉토리로 복사합니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-network-설정&quot;&gt;2. network 설정&lt;/h4&gt;

&lt;p&gt;모든 노드의 네트워크 인터페이스를 수정 후 재부팅해주어야 합니다. 먼저 Controller node의 경우, 외부와의 통신을 위한 네트워크와 오픈스택 컴포넌트들이 서로 API를 호출할 때 사용하는 내부 네트워크, VM 인스턴스들이 외부와 통신하기 위한 메뉴얼 네트워크를 설정해주어야 합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo vi /etc/network/interfaces
auto &amp;lt;INTERFACE_NAME_1&amp;gt;
iface &amp;lt;INTERFACE_NAME_1&amp;gt; inet static
    address &amp;lt;PUBLIC_IP&amp;gt;
    netmask &amp;lt;PUBLIC_IP_NETMASK&amp;gt;
    gateway &amp;lt;PUBLIC_IP_GATEWAY&amp;gt;
    dns-servernames &amp;lt;DNS_NAMESERVERS&amp;gt;
auto &amp;lt;INTERFACE_NAME_2&amp;gt;
iface &amp;lt;INTERFACE_NAME_2&amp;gt; inet static
    address 10.10.10.11
    netmask 255.255.255.0
auto &amp;lt;INTERFACE_NAME_3&amp;gt;
iface &amp;lt;INTERFACE_NAME_3&amp;gt; inet manual
up ip link set dev $IFACE up
down ip link set dev $IFACE down
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Compute node의 경우, 메뉴얼 네트워크가 필요없다. 오픈스택 설치가 정상적으로 설치되고나면 외부와의 통신은 필요없어 외부 네트워크를 OSD들 간의 통신을 위한 스토리지 네트워크로 설정하여 사용해도 됩니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo vi /etc/network/interfaces
auto &amp;lt;INTERFACE_NAME_1&amp;gt;
iface &amp;lt;INTERFACE_NAME_1&amp;gt; inet static
    address &amp;lt;PUBLIC_IP&amp;gt;
    netmask &amp;lt;PUBLIC_IP_NETMASK&amp;gt;
    gateway &amp;lt;PUBLIC_IP_GATEWAY&amp;gt;
    dns-servernames &amp;lt;DNS_NAMESERVERS&amp;gt;
auto &amp;lt;INTERFACE_NAME_2&amp;gt;
iface &amp;lt;INTERFACE_NAME_2&amp;gt; inet static
    address 10.10.10.21
    netmask 255.255.255.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;3-hosts-및-ssh-설정&quot;&gt;3. hosts 및 SSH 설정&lt;/h4&gt;

&lt;p&gt;위의 작업이 끝나면 Controller node에서 hosts 및 SSH 설정합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo vi /etc/hosts
10.10.10.11 controller-node
10.10.10.21 compute-node1 
10.10.10.22 compute-node2
10.10.10.23 compute-node3
    
$ cd ssustack/bin/
$ ./creating_ssh_keys.sh [&amp;lt;host_name&amp;gt; ... ]
ex) ./creating_ssh_keys.sh compute-node1 compute-node2 compute-node3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;4-ssustack_installer-실행&quot;&gt;4. ssustack_installer 실행&lt;/h4&gt;

&lt;p&gt;ssustack_installer는 Controller node에서 실행시킵니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd ssustack_installer/
$ ./app.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;app.sh를 실행시키고나면 우분투 기본 브라우저로 사용되는 파이어폭스가 실행됩니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;5-welcome-페이지&quot;&gt;5. Welcome 페이지&lt;/h4&gt;

&lt;p&gt;권장 사양과 현재 PC의 사양을 확인해보고 설치 전 작업이 재대로 되었는지 확인하고 다음으로 넘어갑니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;6-enable-services-페이지&quot;&gt;6. Enable Services 페이지&lt;/h4&gt;

&lt;p&gt;Controller node 및 Compute node에서 설치할 서비스를 선택하고 넘어갑니다. 필수로 설치되어야하는 패키지의 경우 이미 체크되어 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;7-environment-settings-페이지&quot;&gt;7. Environment Settings 페이지&lt;/h4&gt;

&lt;p&gt;각각의 Controller node 및 Compute node에서 설정되어야 할 ip, subnet, hostname, password 등을 설정하고 다음으로 넘어갑니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;8-installing-페이지&quot;&gt;8. Installing 페이지&lt;/h4&gt;

&lt;p&gt;앞의 설정이 재대로 되어있는지 확인해보고 Start 버튼을 눌러주고 설치 로그를 확인해줍니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;한 번만 누르고 브라우저를 종료하면 안됩니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;9-finished-페이지&quot;&gt;9. Finished 페이지&lt;/h4&gt;

&lt;p&gt;정상적으로 설치되었는지 확인하고 종료합니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;10-추가-설정&quot;&gt;10. 추가 설정&lt;/h4&gt;

&lt;p&gt;아래 비디오에서 Ceph OSD를 추가하고, Horizon에서 네트워크를 생성하고, 우분투 이미지를 업로드하여 인스턴스 생성 및 테스트하는 부분까지 보여줍니다. (10:30)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;testing-video&quot;&gt;Testing video&lt;/h3&gt;

&lt;video width=&quot;840&quot; height=&quot;480&quot; src=&quot;/static/assets/video/ssustack_working.mp4&quot; controls=&quot;&quot;&gt;&lt;/video&gt;

&lt;blockquote&gt;
  &lt;p&gt;영상이 재생되지 않는다면 IE 환경에서 다시 재생해보세요.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Thu, 30 Apr 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/project/2020/04/30/ssustack_installer.html</link>
        <guid isPermaLink="true">http://localhost:4000/project/2020/04/30/ssustack_installer.html</guid>
        
        <category>son</category>
        
        <category>blog</category>
        
        <category>project</category>
        
        <category>ssustack</category>
        
        <category>installer</category>
        
        
        <category>Project</category>
        
      </item>
    
      <item>
        <title>[Project] ssustack</title>
        <description>&lt;p&gt;본 프로젝트는 숭실대학교에서 김명호 교수님, 김영종 교수님의 지도하에 진행되었습니다.&lt;/p&gt;

&lt;h2 id=&quot;ssustack&quot;&gt;ssustack&lt;/h2&gt;

&lt;p&gt;ssustack 프로젝트는 Ubuntu 환경에서 OpenStack을 자동으로 설치하여 클라우드 컴퓨팅을 손쉽게 구축할 수 있도록 만들어졌습니다.&lt;/p&gt;

&lt;p&gt;OpenStack에서 사용할 기본적인 설정을 정의한 후에 설치스크립트를 이용하여 간편하게 설치가 가능합니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;environment&quot;&gt;Environment&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;OpenStack : Rokcy Release&lt;/li&gt;
  &lt;li&gt;OS : Ubuntu 18.04 LTS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;minimum-hardware-requirements&quot;&gt;Minimum hardware requirements&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Controller node
    &lt;ul&gt;
      &lt;li&gt;Processor: 1 Core&lt;/li&gt;
      &lt;li&gt;Ram: 4GB&lt;/li&gt;
      &lt;li&gt;Storage: 5GB&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Compute node
    &lt;ul&gt;
      &lt;li&gt;Processor: 1 Core&lt;/li&gt;
      &lt;li&gt;Ram: 2GB&lt;/li&gt;
      &lt;li&gt;Storage: 10GB&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;노드별-설치-패키지&quot;&gt;노드별 설치 패키지&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/landing/node_packages.png&quot; alt=&quot;node_packages&quot; width=&quot;600&quot; height=&quot;280&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;

&lt;p&gt;다음 설명할 설치 방법은 모든 노드가 Ubuntu 18.04 운영체제만 설치된 환경이라 가정하고 진행해야 할 작업을 설명합니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;1-ssustack-클론&quot;&gt;1. ssustack 클론&lt;/h4&gt;

&lt;p&gt;OpenStack 환경을 구성하는 모든 노드에서 진행&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone http://git.dotstack.io/crisis513/ssustack.git
$ cd ssustack/bin
$ ./ssustack_user_creation.sh
$ cp -r &amp;lt;your_controller_path&amp;gt;/ssustack/ .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;생성할 유저의 패스워드를 설정하여 ssustack 유저가 생성되면 ssustack 폴더를 ssustack 유저의 홈 디렉토리로 복사합니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-hosts-및-ssh-설정&quot;&gt;2. hosts 및 SSH 설정&lt;/h4&gt;

&lt;p&gt;위의 작업이 끝나면 controller node에서 hosts 및 SSH 설정&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo vi /etc/hosts
10.10.10.11 controller-node
10.10.10.21 compute-node1 
10.10.10.22 compute-node2
10.10.10.23 compute-node3
    
$ cd ssustack/bin/
$ ./creating_ssh_keys.sh [&amp;lt;host_name&amp;gt; ... ]
ex) ./creating_ssh_keys.sh compute-node1 compute-node2 compute-node3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;3-openstack-설치-스크립트-설정&quot;&gt;3. OpenStack 설치 스크립트 설정&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd ..
$ vi local.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;4-localconf-설정을-기반으로-각-노드별-스크립트-생성&quot;&gt;4. local.conf 설정을 기반으로 각 노드별 스크립트 생성&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./ssustack.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;5-ssustacktmp-경로에서-각-노드에-맞는-스크립트-실행&quot;&gt;5. ssustack/tmp 경로에서 각 노드에 맞는 스크립트 실행&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;## controller-node Case
$ cd tmp/controller/
$ ./controller.sh

## compute-node1 Case
$ cd tmp/compute/
$ ./compute_1.sh
 
## compute-node2 Case
$ cd tmp/compute/
$ ./compute_2.sh
 
## compute-node3 Case
$ cd tmp/compute/
$ ./compute_3.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;현재는 각 스크립트를 직접 수정하여 rbd_secret_uuid 값을 수동으로 맞춰주어야 합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;6-controller-node에서-ceph-추가-설정&quot;&gt;6. controller node에서 ceph 추가 설정&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd ../../bin/ # ssustack/bin/
$ ./ceph_configuration.sh [&amp;lt;host_name&amp;gt; ... ]
ex) ./ceph_configuration.sh compute-node1 compute-node2 compute-node3 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;7-각-compute-node에서-ceph-osd-및-ceph-mon-설정&quot;&gt;7. 각 compute node에서 ceph osd 및 ceph mon 설정&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd ../../bin/ # ssustack/bin/
$ ./add_ceph_osd.sh /dev/sdb    # /dev/sdb는 각 컴퓨터 노드에서 추가할 osd 장치명
$ ./add_ceph_mon.sh 10.10.10.21 # 10.10.10.21은 각 컴퓨터 노드에서 management network로 사용하는 ip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;8-controller-node에서-compute-호스트를-찾도록-스크립트-실행&quot;&gt;8. controller node에서 compute 호스트를 찾도록 스크립트 실행&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./add_compute_node.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Wed, 29 Apr 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/project/2020/04/29/ssustack.html</link>
        <guid isPermaLink="true">http://localhost:4000/project/2020/04/29/ssustack.html</guid>
        
        <category>son</category>
        
        <category>blog</category>
        
        <category>project</category>
        
        <category>ssustack</category>
        
        
        <category>Project</category>
        
      </item>
    
      <item>
        <title>[Project] naver-news-scraper</title>
        <description>&lt;h1 id=&quot;naver-news-scraper&quot;&gt;naver-news-scraper&lt;/h1&gt;

&lt;p&gt;nn-scraper 프로젝트는 원하는 키워드에 해당하는 네이버 뉴스 속보를 스크랩하여 텔레그램 봇 혹은 카카오톡 봇으로 알림받을 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;environment&quot;&gt;Environment&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;OS : Ubuntu 18.04 LTS&lt;/li&gt;
  &lt;li&gt;Python : 2.7.17&lt;/li&gt;
  &lt;li&gt;pip : 9.0.1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;

&lt;h4 id=&quot;1-naver-news-scraper-클론&quot;&gt;1. naver-news-scraper 클론&lt;/h4&gt;

&lt;p&gt;naver-news-scraper 소스를 다운로드 합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone https://github.com/crisis513/naver-news-scraper.git
$ cd naver-news-scraper
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-실행환경-설정&quot;&gt;2. 실행환경 설정&lt;/h4&gt;

&lt;p&gt;nn-scraper 실행을 위해 python 및 pip를 설치하고, 필요한 pip 패키지를 설치합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apt-get install -y python python-pip
$ pip install -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;3-봇-설정&quot;&gt;3. 봇 설정&lt;/h4&gt;

&lt;p&gt;nn-scraper에서 사용할 수 있는 봇은 카카오톡, 텔레그램 두 종류가 있습니다.&lt;/p&gt;

&lt;p&gt;사용할 봇을 설정하는 방법은 다음과 같습니다.&lt;/p&gt;

&lt;p&gt;1) config.py 파일에서 USE_BOT 값을 카카오톡일 경우 kakaotalk, 텔레그램일 경우 telegram으로 입력합니다.&lt;/p&gt;

&lt;p&gt;2) 아래 Testing images에서 선택한 플랫폼에 맞게 토큰 값을 얻어 config.py 파일에서 요구하는 토큰 혹은 키 값을 입력합니다.&lt;/p&gt;

&lt;p&gt;3) app.py 파일을 실행하면 1분 주기로 SEARCH_LIST 값에 설정된 키워드에 맞는 네이버 속보 뉴스를 스크랩하여 보내줍니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;testing-images&quot;&gt;Testing images&lt;/h3&gt;

&lt;h4 id=&quot;telegram-bot&quot;&gt;[Telegram bot]&lt;/h4&gt;

&lt;p&gt;텔레그램 봇을 사용하기 위해서는 @botfather 를 검색하여 아래 사진과 같이 새로운 봇을 만들고 봇의 TOKEN을 획득해야 합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/landing/telegrambot.png&quot; alt=&quot;use_telegrambot&quot; width=&quot;360&quot; height=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위에서 획득한 TOKEN 값을 config.py 파일에서 TELEGRAM_TOKEN 값에 넣어줍니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/landing/telegrambot2.jpg&quot; alt=&quot;use_telegrambot&quot; width=&quot;350&quot; height=&quot;1200&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;kakaotalk-bot&quot;&gt;[Kakaotalk bot]&lt;/h4&gt;

&lt;p&gt;카카오톡 봇을 사용하기 위해서는 Kakao Developer 사이트에서 카카오 API KEY를 발급 받아야 합니다.&lt;/p&gt;

&lt;p&gt;https://developers.kakao.com/&lt;/p&gt;

&lt;p&gt;해당 사이트로 들어가서 로그인을 하고 애플리케이션을 만들어줍니다.&lt;/p&gt;

&lt;p&gt;여기서는 NN-SCRAPER 라는 앱 이름으로 생성하였고, 정상적으로 설치되면 아래 사진처럼 각종 앱 키가 보이는 것을 확인할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/landing/kakaotalkbot.png&quot; alt=&quot;use_kakaotalkbot&quot; width=&quot;700&quot; height=&quot;460&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이 앱 키 중에서 REST API 키를 config.py 파일에서 RESTAPI_KEY 값에 넣어줍니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/landing/kakaotalkbot2.png&quot; alt=&quot;use_kakaotalkbot&quot; width=&quot;360&quot; height=&quot;780&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 08 Apr 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/project/2020/04/08/nn_scraper.html</link>
        <guid isPermaLink="true">http://localhost:4000/project/2020/04/08/nn_scraper.html</guid>
        
        <category>son</category>
        
        <category>blog</category>
        
        <category>project</category>
        
        <category>nn-scraper</category>
        
        
        <category>Project</category>
        
      </item>
    
      <item>
        <title>[Patent] 히스토그램을 이용한 영상 처리 방법 및 이를 수행하기 위한 기록매체</title>
        <description>&lt;h3 id=&quot;abstract&quot;&gt;Abstract&lt;/h3&gt;

&lt;p&gt;히스토그램을 이용한 고속 유사도 측정 방법 및 이를 수행할 수 있는 유사도 측정 장치가 제공된다. 본 발명의 실사례에 따른 고속 유사도 측정 방법은 유사도 측정 대상 영상의 히스토그램을 생성하는 히스토그램 생성 단계, 상기 히스토그램을 기반으로 상기 유사도 측정 대상 영상의 이진수 열을 생성하는 메타데이터 생성 단계, 메타데이터 데이터베이스로부터 기준 영상의 이진수 열을 획득하여 상기 유사도 측정 대상 영상의 이진수 열과 매칭(matching)하는 매칭 단계 및 상기 매칭 결과를 출력하는 출력 단계를 포함한다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;목차&quot;&gt;목차&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;#list1&quot;&gt;1. 특허증&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list2&quot;&gt;   1.1. 특허&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list3&quot;&gt;   1.2. 출원번호&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list4&quot;&gt;   1.3. 출원일&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list5&quot;&gt;   1.4. 등록일&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list6&quot;&gt;   1.5. 발명의 명칭&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list7&quot;&gt;   1.6. KIPRIS 검색&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;특허증----&quot;&gt;특허증    &lt;a name=&quot;list1&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h5 id=&quot;certificate-of-patent&quot;&gt;CERTIFICATE OF PATENT&lt;/h5&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;특허&quot;&gt;특허&lt;/h3&gt;
&lt;h6 id=&quot;patent-number&quot;&gt;PATENT NUMBER&lt;/h6&gt;
&lt;p&gt;10-1957610&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;출원번호&quot;&gt;출원번호&lt;/h3&gt;
&lt;h6 id=&quot;application-number&quot;&gt;Application Number&lt;/h6&gt;
&lt;p&gt;10-2017-0173938&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;출원일&quot;&gt;출원일&lt;/h3&gt;
&lt;h6 id=&quot;filing-date&quot;&gt;Filing Date&lt;/h6&gt;
&lt;p&gt;2017년 12월 18일&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;등록일&quot;&gt;등록일&lt;/h3&gt;
&lt;h6 id=&quot;registration-date&quot;&gt;Registration Date&lt;/h6&gt;
&lt;p&gt;2019년 03월 06일&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;발명의-명칭&quot;&gt;발명의 명칭&lt;/h3&gt;
&lt;h6 id=&quot;title-of-the-invention&quot;&gt;Title of the Invention&lt;/h6&gt;
&lt;p&gt;히스토그램을 이용한 영상 처리 방법 및 이를 수행하기 위한 기록매체&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;kipris-검색&quot;&gt;KIPRIS 검색&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/landing/patent2.png&quot; alt=&quot;patent2&quot; width=&quot;675&quot; height=&quot;150&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 03 Apr 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/patent/2020/04/03/patent2.html</link>
        <guid isPermaLink="true">http://localhost:4000/patent/2020/04/03/patent2.html</guid>
        
        <category>son</category>
        
        <category>blog</category>
        
        <category>patent</category>
        
        <category>histogram</category>
        
        
        <category>Patent</category>
        
      </item>
    
      <item>
        <title>[Patent] 타이핑 속도 정보를 이용한 사용자 인증 시스템 및 방법, 이를 수행하기 위한 기록매체</title>
        <description>&lt;h3 id=&quot;abstact&quot;&gt;Abstact&lt;/h3&gt;

&lt;p&gt;타이핑 속도 정보를 이용한 사용자 인증 시스템 및 방법을 개시한다. 사용자 단말로부터 수신한 ID와 패스워드를 이용하여 웹 서버에서 사용자 인증을 수행하는 사용자 인증 시스템에 있어서, 상기 사용자 단말은, 사용자로부터 ID 및 패스워드를 입력받는 입력부; 상기 입력부를 통해 패스워드를 입력받을 때, 패스워드를 구성하는 각각의 문자에 대해 키 입력이 시작되는 시간 및 키 입력이 종료되는 시간, 마지막 엔터키가 입력되는 시간을 감지하여 키 입력 정보를 생성하는 키 입력 정보 생성부; 및 상기 입력부를 통해 입력받은 ID 및 패스워드와 상기 키 입력 정보 생성부에서 생성된 키 입력 정보를 상기 웹 서버로 전송하는 전송부;를 포함하고, 상기 웹 서버는, 상기 사용자 단말로부터 ID 및 패스워드와 키 입력 정보를 수신하는 수신부; 사용자별로 사용자 인증에 필요한 ID 및 패스워드와 타이핑 속도 허용 범위를 저장하는 사용자 인증 DB; 상기 수신한 키 입력 정보를 이용하여 패스워드를 구성하는 문자열의 입력에 대한 타이핑 속도를 산출하는 타이핑 속도 산출부; 상기 수신한 ID 및 패스워드와 상기 사용자 인증 DB에 저장되어 있는 ID 및 패스워드를 비교하여 사용자 인증을 수행하는 제1사용자 인증부; 및 상기 제1사용자 인증부에서 사용자 인증에 성공하면, 상기 산출된 타이핑 속도와 상기 ID에 매핑되어 상기 사용자 인증 DB에 저장되어 있는 타이핑 속도 허용 범위를 비교하여 사용자 인증을 수행하는 제2사용자 인증부;를 포함하는 것이 바람직하다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;목차&quot;&gt;목차&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;#list1&quot;&gt;1. 특허증&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list2&quot;&gt;   1.1. 특허&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list3&quot;&gt;   1.2. 출원번호&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list4&quot;&gt;   1.3. 출원일&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list5&quot;&gt;   1.4. 등록일&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list6&quot;&gt;   1.5. 발명의 명칭&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list7&quot;&gt;   1.6. KIPRIS 검색&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;특허증----&quot;&gt;특허증    &lt;a name=&quot;list1&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h5 id=&quot;certificate-of-patent&quot;&gt;CERTIFICATE OF PATENT&lt;/h5&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;특허----&quot;&gt;특허    &lt;a name=&quot;list2&quot;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h6 id=&quot;patent-number&quot;&gt;PATENT NUMBER&lt;/h6&gt;
&lt;p&gt;10-1959219&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;출원번호----&quot;&gt;출원번호    &lt;a name=&quot;list3&quot;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h6 id=&quot;application-number&quot;&gt;Application Number&lt;/h6&gt;
&lt;p&gt;10-2017-0120224&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;출원일--&quot;&gt;출원일  &lt;a name=&quot;list4&quot;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h6 id=&quot;filing-date&quot;&gt;Filing Date&lt;/h6&gt;
&lt;p&gt;2017년 09월 19일&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;등록일--&quot;&gt;등록일  &lt;a name=&quot;list5&quot;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h6 id=&quot;registration-date&quot;&gt;Registration Date&lt;/h6&gt;
&lt;p&gt;2019년 03월 12일&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;발명의-명칭-&quot;&gt;발명의 명칭 &lt;a name=&quot;list6&quot;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h6 id=&quot;title-of-the-invention&quot;&gt;Title of the Invention&lt;/h6&gt;
&lt;p&gt;타이핑 속도 정보를 이용한 사용자 인증 시스템 및 방법, 이를 수행하기 위한 기록매체&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;kipris-검색-&quot;&gt;KIPRIS 검색 &lt;a name=&quot;list7&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/landing/patent.png&quot; alt=&quot;patent1&quot; width=&quot;675&quot; height=&quot;150&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 03 Apr 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/patent/2020/04/03/patent1.html</link>
        <guid isPermaLink="true">http://localhost:4000/patent/2020/04/03/patent1.html</guid>
        
        <category>son</category>
        
        <category>blog</category>
        
        <category>patent</category>
        
        <category>authentication</category>
        
        <category>tps</category>
        
        
        <category>Patent</category>
        
      </item>
    
      <item>
        <title>[Thesis] 클라우드 컴퓨팅 환경에서 블록체인 기반의 인증 키 관리 시스템 설계 및 구현</title>
        <description>&lt;h3 id=&quot;abstract&quot;&gt;Abstract&lt;/h3&gt;

&lt;p&gt;클라우드 컴퓨팅은 컴퓨팅 자원을 유연하게 사용할 수 있어 프로비저닝이 빠르고 편리하며 확장성이 높은 등 많은 장점을 제공하고 있다. 하지만 해킹을 통한 중요 데이터가 유출되는 사고가 발생한 사례들이 많아 클라우드 보안 위협은 꾸준히 제기되고 있다. 그 중에서도 클라우드 인증에 사용되는 토큰과 이 토큰의 정보를 보호하기 위해 사용되는 암호 키를 관리하는 것은 보안에 있어 항상 중요한 문제이다. 암호 키가 재대로 관리되지 않으면 무단 접근을 허용하여 조직 혹은 사용자에게 심각한 피해가 생기게 된다. 보안 강도가 높은 암호화 알고리즘을 사용하더라도 키가 노출된다면 자유롭게 데이터를 복호화할 수 있게 되기 때문에 키 관리는 매우 중요하다. 기존에는 대부분 중앙집중식으로 키를 관리하여 확장성이 낮고 분산된 키 관리 서비스를 제공하지 않아 항상 잠재적인 단일 장애점의 문제를 갖고 있다. 그리고 키 보안 공급 업체를 통해 암호 키를 관리하더라도 단일 보안 위반 상태가 된다.&lt;/p&gt;

&lt;p&gt;본 논문에서는 프라이빗 블록체인을 구축하여 허가형 비공개 네트워크에서 안전하게 암호 키를 분산 저장 및 관리하는 환경을 통해 클라우드 컴퓨팅 인증을 수행하는 시스템을 제안한다. 제안하는 시스템은 기존에 항상 잠재적으로 존재해왔던 단일 장애점의 문제를 해결하고 분산 저장을 통해 확장성을 높일 수 있다. 제안하는 시스템을 구현한 결과 기존의 키 관리 방식에 비해 성능에 큰 차이가 없고 기본적인 키 관리 요구사항들을 충족시키면서 단일 장애점의 문제를 해결했다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;목차&quot;&gt;목차&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;#list1&quot;&gt;1. 논문 제목&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list2&quot;&gt;   1.1. 저자&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list3&quot;&gt;   1.2. 발행연도&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list4&quot;&gt;   1.3. 주제어&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list5&quot;&gt;   1.4. URL&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;논문-제목---&quot;&gt;논문 제목   &lt;a name=&quot;list1&quot;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;클라우드 컴퓨팅 환경에서 블록체인 기반의 인증 키 관리 시스템 설계 및 구현 = Design and Implementation of Blockchain-based Authentication Key Management System in Cloud Computing Environment&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;저자----&quot;&gt;저자    &lt;a name=&quot;list2&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;손한기&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;발행연도----&quot;&gt;발행연도    &lt;a name=&quot;list3&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;2020.02&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;주제어----&quot;&gt;주제어    &lt;a name=&quot;list4&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;클라우드 컴퓨팅, 블록체인, 키 관리 시스템&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;url---&quot;&gt;URL   &lt;a name=&quot;list5&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;http://www.riss.kr/search/detail/DetailView.do?p_mat_type=be54d9b8bc7cdb09&amp;amp;control_no=648f5d72e457c232ffe0bdc3ef48d419&lt;/p&gt;
</description>
        <pubDate>Wed, 01 Apr 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/thesis/2020/04/01/bkms.html</link>
        <guid isPermaLink="true">http://localhost:4000/thesis/2020/04/01/bkms.html</guid>
        
        <category>son</category>
        
        <category>blog</category>
        
        <category>thesis</category>
        
        <category>bkms</category>
        
        <category>blockchain</category>
        
        <category>cloud</category>
        
        
        <category>Thesis</category>
        
      </item>
    
      <item>
        <title>Blog sample</title>
        <description>&lt;h3 id=&quot;목차&quot;&gt;목차&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;#list1&quot;&gt;1. 헤더(Header)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list2&quot;&gt;2. 목록(List)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list3&quot;&gt;3. 이미지(Images)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list4&quot;&gt;4. 하이퍼링크(Links)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list5&quot;&gt;5. 인용 상자(Blockquotes)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list6&quot;&gt;6. 강조(Emphasis)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list7&quot;&gt;7. 테이블(Tables)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list8&quot;&gt;8. 체크 박스(Task Lists)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list9&quot;&gt;9. 인라인 코드(Inline code)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list10&quot;&gt;10. 수평선(hr)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list11&quot;&gt;11. 탈출 문자(Backslash Escapes)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list12&quot;&gt;12. 이모지(Emoji)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list13&quot;&gt;13. 코드 블록(Code Blocks)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#list14&quot;&gt;14. 배지(Badge) 만들기&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;헤더header----&quot;&gt;헤더(Header)    &lt;a name=&quot;list1&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;h1 id=&quot;헤더-크기-h1&quot;&gt;헤더 크기 (h1)&lt;/h1&gt;
&lt;h2 id=&quot;헤더-크기-h2&quot;&gt;헤더 크기 (h2)&lt;/h2&gt;
&lt;h3 id=&quot;헤더-크기-h3&quot;&gt;헤더 크기 (h3)&lt;/h3&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;목록list----&quot;&gt;목록(List)    &lt;a name=&quot;list2&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Unordered&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Item 1&lt;/li&gt;
  &lt;li&gt;Item 2
    &lt;ul&gt;
      &lt;li&gt;Item 2a&lt;/li&gt;
      &lt;li&gt;Item 2b&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ordered&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Item 1&lt;/li&gt;
  &lt;li&gt;Item 2&lt;/li&gt;
  &lt;li&gt;Item 3
    &lt;ol&gt;
      &lt;li&gt;Item 3a&lt;/li&gt;
      &lt;li&gt;Item 3b&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;이미지images----&quot;&gt;이미지(Images)    &lt;a name=&quot;list3&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;첫번째 방법&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/markdown_logo.jpg&quot; alt=&quot;Github logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Format: &lt;img src=&quot;url 링크&quot; alt=&quot;이미지 alt명&quot; /&gt;&lt;/p&gt;

&lt;p&gt;두번째 방법&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;&lt;img src=&quot;https://github.com/..각자절대경로../images/markdown_syntax.jpg&quot; width=&quot;400px&quot; alt=&quot;sample image&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Format: img 태그 사용 - 이미지경로는 상대경로 or 절대경로&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;하이퍼링크links----&quot;&gt;하이퍼링크(Links)    &lt;a name=&quot;list4&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://github.com&quot; title=&quot;깃허브&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;인용-상자blockquotes----&quot;&gt;인용 상자(Blockquotes)    &lt;a name=&quot;list5&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;As Grace Hopper said:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I’ve always been more interested. 
in the future than in the past.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;강조emphasis----&quot;&gt;강조(Emphasis)    &lt;a name=&quot;list6&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;This text will be italic&lt;/em&gt; 
&lt;em&gt;This will also be italic&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This text will be bold&lt;/strong&gt; 
&lt;strong&gt;This will also be bold&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You &lt;strong&gt;can&lt;/strong&gt; combine them&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;테이블tables----&quot;&gt;테이블(Tables)    &lt;a name=&quot;list7&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;First Header&lt;/th&gt;
      &lt;th&gt;Second Header&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Content cell 1&lt;/td&gt;
      &lt;td&gt;Content cell 2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Content column 1&lt;/td&gt;
      &lt;td&gt;Content column 2&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;체크-박스task-lists----&quot;&gt;체크 박스(Task Lists)    &lt;a name=&quot;list8&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;this is a complete item&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;this is an incomplete item&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;@mentions, #refs, &lt;a href=&quot;&quot;&gt;links&lt;/a&gt;, &lt;strong&gt;formatting&lt;/strong&gt;, and &lt;del&gt;tags&lt;/del&gt; supported&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;list syntax required (any unordered or ordered list supported)&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;인라인-코드inline-code----&quot;&gt;인라인 코드(Inline code)    &lt;a name=&quot;list9&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;문단 중간에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Code&lt;/code&gt;를 넣을 수 있습니다. 
예를 들어 &lt;code class=&quot;highlighter-rouge&quot;&gt;printf(&quot;hello world!&quot;);&lt;/code&gt; 이런 식으로 들어갑니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;수평선hr----&quot;&gt;수평선(hr)    &lt;a name=&quot;list10&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;hr /&gt;
&lt;hr /&gt;
&lt;hr /&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;탈출-문자backslash-escapes----&quot;&gt;탈출 문자(Backslash Escapes)    &lt;a name=&quot;list11&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;＼&lt;em&gt;literal asterisks＼&lt;/em&gt; 
&lt;em&gt;literal asterisks&lt;/em&gt; 
&lt;strong&gt;＼&lt;em&gt;＼&lt;/em&gt;Text＼&lt;em&gt;＼&lt;/em&gt;&lt;/strong&gt; 
_＼_Tom＼__&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;이모지emoji----&quot;&gt;이모지(Emoji)    &lt;a name=&quot;list12&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;GitHub supports emoji!&lt;/p&gt;

&lt;p&gt;:+1: :sparkles: :camel: :tada: 
:rocket: :metal: :octocat:&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;코드-블록code-blocks----&quot;&gt;코드 블록(Code Blocks)    &lt;a name=&quot;list13&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;코드 내용
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;배지bedge-만들기----&quot;&gt;배지(Bedge) 만들기    &lt;a name=&quot;list14&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;https://shields.io&lt;/p&gt;

&lt;p&gt;작성 예시
&lt;a href=&quot;https://img.shields.io/badge/license-mit-green.svg&amp;quot;&quot;&gt;https://img.shields.io/badge/license-mit-green.svg&quot;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;https://img.shields.io/badge/–.svg&lt;/p&gt;

&lt;p&gt;APM: /apm/l/:packageName.svg&lt;/p&gt;

&lt;p&gt;AUR license: /aur/license/:packageName.svg&lt;/p&gt;
</description>
        <pubDate>Sat, 07 Mar 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/sample/2020/03/07/sample.html</link>
        <guid isPermaLink="true">http://localhost:4000/sample/2020/03/07/sample.html</guid>
        
        <category>Son</category>
        
        <category>blog</category>
        
        
        <category>Sample</category>
        
      </item>
    
      <item>
        <title>code snippet test</title>
        <description>&lt;p&gt;This is a raw snippet:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hello world
123
This is a text snippet
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is a JavaScript snippet:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const add = (a, b) =&amp;gt; a + b
const minus = (a, b) =&amp;gt; a - b

console.log(add(100,200))  // 300
console.log(minus(100,200))  // -100
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is a Python snippet:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def say_hello():
    print(&quot;hello world!&quot;)

say_hello()   // &quot;hello world!&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;Side note comment: applied a bug fix similar to &lt;a href=&quot;https://github.com/Atlas7/atlas7.github.io/commit/6659f4a47f6ec66987adb0f683a9c6f3842252ae#diff-818954a41dbfb01af70050a459c603b9&quot;&gt;this commit&lt;/a&gt; to ensure code snippet does not collapse unexpectly upon clicking on it. This issue is tracked &lt;a href=&quot;https://github.com/jarrekk/Jalpc/issues/97&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Thu, 21 Dec 2017 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/sample/2017/12/21/test_code_snippets.html</link>
        <guid isPermaLink="true">http://localhost:4000/sample/2017/12/21/test_code_snippets.html</guid>
        
        <category>Jalpc</category>
        
        <category>Jekyll</category>
        
        
        <category>Sample</category>
        
      </item>
    
      <item>
        <title>3 Steps (2 minutes) to Setup Your Personal Website with Jalpc</title>
        <description>&lt;p&gt;Everyone wants to have a personal website, you can display your infomation to public, post blogs and make friends. If you are CS engineer, haveing a self website will benefit your interview.&lt;/p&gt;

&lt;p&gt;So, if you like this website &lt;a href=&quot;https://jarrekk.github.io/Jalpc/&quot;&gt;https://jarrekk.github.io/Jalpc/&lt;/a&gt; or &lt;a href=&quot;http://www.jarrekk.com&quot;&gt;http://www.jarrekk.com&lt;/a&gt; and are willing to have a website, here is a way to build your website in 3 steps(2 minutes). Following are steps to setup your website(make sure you have basic knowledge of &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; and &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;, if you want to custom css/js &lt;a href=&quot;https://github.com/npm/npm&quot;&gt;NPM&lt;/a&gt; is needed):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Fork &lt;a href=&quot;https://github.com/jarrekk/Jalpc&quot;&gt;this project – Jalpc&lt;/a&gt; at &lt;a href=&quot;https://github.com&quot;&gt;GitHub&lt;/a&gt;. If you want to edit website at github, do it as following gif or clone forked repository. &lt;code class=&quot;highlighter-rouge&quot;&gt;git clone git@github.com:github_username/Jalpc.git&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;&lt;!-- ![edit](/crisis513.github.io/static/assets/img/blog/3steps/edit.gif) --&gt;
 &lt;img src=&quot;/crisis513.github.io/static/assets/img/blog/3steps/edit.gif&quot; width=&quot;75%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Enter into repository directory and edit following file list:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;_config.yml&lt;/strong&gt;: edit ‘Website settings’, ‘author’, ‘comment’ and ‘analytics’ items.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;_data/landing.yml&lt;/strong&gt;: custom sections of index page.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;_data/index/&lt;/strong&gt;: edit sections’ data to yours at index page, please notice comment at each file.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;_data/blog.yml&lt;/strong&gt;: edit navbar(categories) of blog page, if you have different/more blog page, copy &lt;code class=&quot;highlighter-rouge&quot;&gt;blog/python.html&lt;/code&gt; and change it to your category HTML file, and edit &lt;strong&gt;Python&lt;/strong&gt;, &lt;strong&gt;/python/&lt;/strong&gt; to your category name at items &lt;strong&gt;title&lt;/strong&gt; and &lt;strong&gt;permalink&lt;/strong&gt;, make sure title is the same as permalink but capitalized first letter(except HTML).&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;CNAME&lt;/strong&gt;: If you wanna release website at your own domain name: edit it and create &lt;code class=&quot;highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt; branch; if you want to use &lt;em&gt;github_username.github.io&lt;/em&gt;: leave it blank.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Go to repo’s settings panel, config &lt;strong&gt;GitHub Pages&lt;/strong&gt; section to make sure website is released.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Push changes to your github repository and view your website, done!&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;From now on, you can post your blog to this website by creating md files at &lt;code class=&quot;highlighter-rouge&quot;&gt;post/&lt;/code&gt; directory and push it to GitHub, you can clear files at this directory before you post blogs.&lt;/p&gt;

&lt;p&gt;If you like this repository, I appreciate you star this repository. Please don’t hesitate to mail me or post issues on GitHub if you have any questions. Hope you have a happy blog time!😊&lt;/p&gt;
</description>
        <pubDate>Tue, 31 Jan 2017 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/sample/2017/01/31/3_steps_to_setup_website_with_Jalpc.html</link>
        <guid isPermaLink="true">http://localhost:4000/sample/2017/01/31/3_steps_to_setup_website_with_Jalpc.html</guid>
        
        <category>Jalpc</category>
        
        <category>Jekyll</category>
        
        
        <category>Sample</category>
        
      </item>
    
      <item>
        <title>파이썬 크롤링</title>
        <description>&lt;h3 id=&quot;크롤링-관련-용어-정리&quot;&gt;크롤링 관련 용어 정리&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;스크랩핑(scraping) : 데이터를 수집하는 행위&lt;/li&gt;
  &lt;li&gt;크롤링(Crawling) : 조직적 자동화된 방법으로 월드와이드웹을 탐색 하는 것&lt;/li&gt;
  &lt;li&gt;파싱(parsing) : 문장 혹은 문서를 구성 성분으로 분해하고 위계관계를 분석하여 문장의 구조를 결정하는 것&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;os 모듈 - 시스템 명령어를 실행시킬 수 있는 모듈&lt;/p&gt;

&lt;h3 id=&quot;파이썬-크롤링에-사용되는-모듈&quot;&gt;파이썬 크롤링에 사용되는 모듈&lt;/h3&gt;

&lt;h3 id=&quot;1-requests&quot;&gt;1. requests&lt;/h3&gt;
&lt;p&gt;requests 모듈은 Apache License 2.0에 따라 배포 된 HTTP 파이썬 라이브러리&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;$ pip install requests&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;2-beautifulsoup4&quot;&gt;2. BeautifulSoup4&lt;/h3&gt;
&lt;p&gt;BeautifulSoup 모듈은 HTML과 XML을 파싱하는 데에 사용되는 파이썬 라이브러리&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;$ pip install bs4&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;3-selenium&quot;&gt;3. selenium&lt;/h3&gt;
&lt;p&gt;selenium은 웹 애플리케이션 테스트를 위한 포터블 프레임워크&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;$ pip install selenium&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;사용할 브라우저의 드라이버를 설치
https://chromedriver.storage.googleapis.com/index.html?path=83.0.4103.14/&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;from selenium import webdriver
import time&lt;/p&gt;

  &lt;p&gt;driver = webdriver.Chrome(‘chromedriver’)
driver.get(“https://www.youtube.com/”)&lt;/p&gt;

  &lt;p&gt;time.sleep(3)&lt;/p&gt;

  &lt;p&gt;search = driver.find_element_by_xpath(‘//*[@id=”search”]’)&lt;/p&gt;

  &lt;p&gt;search.send_keys(‘검색’)
time.sleep(1)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;[1 to 50 게임 자동화]&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;num = 1&lt;/p&gt;

  &lt;p&gt;def clickBtn():
    global num
    btns = driver.find_elements_by_xpath(‘//&lt;em&gt;[@id=”grid”]/div[&lt;/em&gt;]’)&lt;/p&gt;

  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for btn in btns:
    print(btn.text, end='\t')
    if btn.text == str(num):
        btn.click()
        prunt(true)
        num += 1
        return
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;

  &lt;p&gt;while num &amp;lt;= 50:
    clickBtn()&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;특수문자-치환&quot;&gt;특수문자 치환&lt;/h3&gt;
&lt;p&gt;re.sub(‘[^0-9a-zA-Zr-힗]’, ‘’, title)&lt;/p&gt;

&lt;h3 id=&quot;다운로드&quot;&gt;다운로드&lt;/h3&gt;
&lt;p&gt;urlretrive(img_src, title + ‘.jpg’)&lt;/p&gt;

</description>
        <pubDate>Sat, 01 Jan 2000 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2000/01/01/python_crawling.html</link>
        <guid isPermaLink="true">http://localhost:4000/2000/01/01/python_crawling.html</guid>
        
        <category>son</category>
        
        <category>blog</category>
        
        <category>python</category>
        
        <category>crawling</category>
        
        
      </item>
    
  </channel>
</rss>
