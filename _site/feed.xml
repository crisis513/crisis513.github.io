<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Son</title>
    <description>Son's blog,use Jekyll and github pages.</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 11 Mar 2020 19:02:38 +0900</pubDate>
    <lastBuildDate>Wed, 11 Mar 2020 19:02:38 +0900</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>운영체제 개요</title>
        <description>&lt;h2 id=&quot;운영체제-역할&quot;&gt;운영체제 역할&lt;/h2&gt;

&lt;p&gt;운영체제는 응용 프로그램이 요청하는 시스템 리소스를 효율적으로 분배하고, 지원하는 소프트웨어&lt;/p&gt;

&lt;p&gt;운영체제의 목표: 사용자가 사용하는 응용 프로그램이 효율적으로, 적절하게 동작하도록 지원&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;시스템 자원(System Resource) 관리자
    &lt;ul&gt;
      &lt;li&gt;시스템 자원은 컴퓨터 하드웨어의 성능이라고 생각할 수 있다.&lt;/li&gt;
      &lt;li&gt;CPU(중앙처리장치), Memory(DRAM, RAM), I/O Devices(입출력장치 - Monitor, Mouse, Keyboard, Network)&lt;/li&gt;
      &lt;li&gt;저장매체: SSD, HDD&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;사용자와 컴퓨터간의 커뮤니케이션 지원&lt;/li&gt;
  &lt;li&gt;컴퓨터 하드웨어와 프로그램을 제어&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;컴퓨터 하드웨어는 스스로 할 수 있는 것이 없다.&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;CPU: 각 프로그램이 얼마나 CPU를 사용할지를 결정할 수는 없다.&lt;/li&gt;
  &lt;li&gt;Memory: 각 프로그램이 어느 주소에 저장되어야 하는지, 어느 정도의 메모리 공간을 확보해줘야 하는지를 결정할 수는 없다.&lt;/li&gt;
  &lt;li&gt;저장매체(HDD, SSD): 어떻게, 어디에 저장할지는 결정할 수 없다.&lt;/li&gt;
  &lt;li&gt;키보드/마우스: 스스로 표시할 수 는 없다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;운영체제와-응용-프로그램간의-관계&quot;&gt;운영체제와 응용 프로그램간의 관계&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;응용 프로그램을 관리&lt;/li&gt;
  &lt;li&gt;시스템 자원을 관리&lt;/li&gt;
  &lt;li&gt;사용자와 컴퓨터 간의 커뮤니케이션을 지원&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;운영체제-history&quot;&gt;운영체제 History&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;1950년대&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;에니악(ENIAC): 첫 번째 컴퓨터&lt;/p&gt;

&lt;p&gt;이 당시에는 운영체제가 없었기 때문에 응용프로그램이 시스템 자원을 제어했었다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1960년대 초반&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;프로그램 종류도 많아지고, 사용자도 슬슬 많아지기 시작한다.&lt;/p&gt;

&lt;p&gt;배치 처리 시스템(Batch processing system) 출현했다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;여러 응용 프로그램을 등록시켜 놓으면 순차적으로 실행하는 시스템&lt;/li&gt;
  &lt;li&gt;배치 처리 시스템을 기반으로 운영체제가 출현&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;배치 처리 시스템의 단점&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;컴퓨터 응답 시간(Response time)이 오래 걸릴 수 있다. (앞단에 실행 시간이 많이 필요로 하는 응용 프로그램이 실행될 경우)&lt;/li&gt;
  &lt;li&gt;실행 시간도 오래 걸릴 수 있다. (CPU가 필요없음에도 응용 프로그램이 CPU를 점유할 수 있기 때문)&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;1960년대 후반&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;실제 운영체제로 구현되지는 않았지만 응용 프로그램이 CPU를 사용하는 시간을 잘개 쪼개서 여러 개의 응용 프로그램을 동시에 실행할 수 있는 새로운 개념이 제안되었다.&lt;/p&gt;

&lt;p&gt;배치 처리 시스템의 단점을 해결하기 위해 나오게 되었다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;시분할 시스템(Time Sharing System)
    &lt;ul&gt;
      &lt;li&gt;다중 사용자를 지원하고, 컴퓨터 응답 시간을 최소화하는 시스템&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;멀티 태스킹(Multi Tasking)
    &lt;ul&gt;
      &lt;li&gt;단일 CPU에서 여러 응용 프로그램의 병렬 실행을 가능케 하는 시스템&lt;/li&gt;
      &lt;li&gt;보통은 시분할 시스템 = 멀티 태스킹&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;멀티 프로그래밍: 최대한 CPU를 많이 활용하도록 하는 시스템 (시간대비 CPU 활용도를 높이자)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;핵심 기술: 시간을 잘게 쪼개서 여러 응용 프로그램을 실행한다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;컴퓨터 응답 시간을 줄일 수 있다. (시분할 시스템, 다중 사용자를 지원)&lt;/li&gt;
  &lt;li&gt;전체 응용 프로그램의 실행 시간도 줄일 수 있다. (멀티 프로그래밍)&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;결과적으로, 사용자가 느낄 때에는 여러 응용 프로그램이 동시에 실행되는 것처럼 보인다. (멀티 태스킹)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;1970년대&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;UNIX(유닉스) OS가 탄생했다.&lt;/p&gt;

&lt;p&gt;미국 AT&amp;amp;T 사의 벨 연구소에서 켄 톰슨, 데니스 리치가 유닉스를 만들었다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;데니스 리치는 C언어를 개발한 사람이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;운영체제 개발에 C언어가 필요했던 이유&lt;/p&gt;

  &lt;p&gt;1970년대 이전에는 Assembly 언어로 소프트웨어를 개발하여 프로그래밍 복잡도가 높았다.
CPU 명령어나 Memory 주소를 직접 써야하는데, 컴퓨터마다 환경이 다를 수 있어 다시 개발해야하는 단점이 있었다.&lt;/p&gt;

  &lt;p&gt;1970년대 C언어가 개발 된 후에는 컴파일러를 통해 기계어로 바꿔주기 때문에 다양한 컴퓨터에서 동일한 C 코드를 사용하여 다시 작성할 필요가 없어졌고, 프로그래밍 복잡도도 낮아졌다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;유닉스 특징
    &lt;ul&gt;
      &lt;li&gt;현대 운영체제의 기본 기술을 모두 포함한 최초의 운영체제&lt;/li&gt;
      &lt;li&gt;멀티 태스킹, 시분할 시스템, 멀티 프로그래밍을 지원&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;1980년대&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;개인용 컴퓨터 시대&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1980년대 이전: 대형 컴퓨터를 여러 명이 접속해서 사용&lt;/li&gt;
  &lt;li&gt;1980년대 이후: Personal Computer(PC)
    &lt;ul&gt;
      &lt;li&gt;1980년대 초반: 아직 터미널 환경(CLI)&lt;/li&gt;
      &lt;li&gt;1980년대 중후반: GUI환경 (마우스)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;1990년대&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;응용 프로그램 시대 by GUI 환경, 개인용 컴퓨터로 인한 사용자 증대
    &lt;ul&gt;
      &lt;li&gt;엑셀, 워드 프로세서 등등&lt;/li&gt;
      &lt;li&gt;Windows OS 대중화&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;네트워크 기술 발전 - 월드와이드웹(WWW) 인터넷 대중화&lt;/li&gt;
  &lt;li&gt;오픈 소스 운동 활성화 시작
    &lt;ul&gt;
      &lt;li&gt;유닉스 계열 OS + 응용 프로그램 자체 개발, 소스 오픈&lt;/li&gt;
      &lt;li&gt;리눅스 운영체제, 소스 오픈, 무료&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;2000년대&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;오픈 소스 활성화
    &lt;ul&gt;
      &lt;li&gt;Apache(아파치, 웹서버), MySQL(데이터베이스)&lt;/li&gt;
      &lt;li&gt;최근에는 안드로이드, 딥러닝, 데이터 사이언스, IOT 등 다양한 분야&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;가상 머신, 대용량 병렬 처리 등 활성화&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;정리1&quot;&gt;정리1&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;1950년대: 운영체제 없음 (프로그램이 시스템 자원을 직접 제어)&lt;/li&gt;
  &lt;li&gt;1960년대: 배치 처리 시스템&lt;/li&gt;
  &lt;li&gt;1970년대: 시분할 시스템/멀티 태스킹 시스템 - UNIX OS (C언어)&lt;/li&gt;
  &lt;li&gt;1980년대: GUI, 개인용 컴퓨터&lt;/li&gt;
  &lt;li&gt;1990년대: 다양한 응용 프로그램, 인터넷 발달, 오픈 소스 운동 활성화&lt;/li&gt;
  &lt;li&gt;2000년대: 오픈 소스 활성화, 가상 머신, 대용량 병렬 처리 등&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Mon, 09 Mar 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/operating/2020/03/09/os-overview.html</link>
        <guid isPermaLink="true">http://localhost:4000/operating/2020/03/09/os-overview.html</guid>
        
        <category>son</category>
        
        <category>blog</category>
        
        <category>os</category>
        
        <category>history</category>
        
        
        <category>Operating</category>
        
      </item>
    
      <item>
        <title>스프링 부트(Spring Boot)</title>
        <description>&lt;h2 id=&quot;스프링-부트란&quot;&gt;스프링 부트란?&lt;/h2&gt;

&lt;p&gt;스프링 부트(Spring Boot)를 사용하면 빠르게 게발하고 이후 확장성도 좋다.&lt;/p&gt;

&lt;p&gt;Spring Framework의 설정이 너무 복잡하고 어려웠기 때문에, 이를 해결학디 위해 만들어졌다.&lt;/p&gt;

&lt;p&gt;Spring Boot가 나오면서 초기 생산성이 획기적으로 좋아졌다.&lt;/p&gt;

&lt;p&gt;스프링은 다양한 식재료이고, 스프링부트는 완성된 케이라고 생각하면 이해하기 쉽다.&lt;/p&gt;

&lt;p&gt;식재료를 다양하게 섞어서 자신만의 요리를 만들고 싶은 사람도 있을 것이고, 거의 다 만들어져 있는 음식을 데우기만 해서 먹고 싶은 사람도 있을 것이다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;스프링-부트의-특징&quot;&gt;스프링 부트의 특징&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Starter를 통한 어플리케이션의 간편하고 자동화된 빌드 및 설정을 제공함&lt;/li&gt;
  &lt;li&gt;Embed 서버를 제공함으로써 복잡한 배포 설정들을 간편하게 제공함&lt;/li&gt;
  &lt;li&gt;Production에서 사용할 수 있는 추가적인 기능을 제공함 (actuator)&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Convention Over Configuration = 설정보다는 관습 (CoC)&lt;/p&gt;

  &lt;p&gt;“개발자가 설정해야 하는 것은 어플리케이션의 관례를 따르지 않는 점 뿐이다.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;아래의 사이트를 통해 스프링 부트 프로젝트를 생성한다.&lt;/p&gt;

&lt;p&gt;https://start.spring.io/&lt;/p&gt;

&lt;p&gt;스프링 부트를 코딩하기 위해 IntelliJ IDEA를 사용한다.&lt;/p&gt;

&lt;p&gt;IntelliJ란?&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;젯브레인스(JetBrains) 사에서 제작한 Java 개발을 위한 툴&lt;/li&gt;
  &lt;li&gt;IntelliJ 혹은 IDEA 로도 불린다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;아래 사이트를 통해 설치한다.&lt;/p&gt;

&lt;p&gt;https://www.jetbrains.com/idea/&lt;/p&gt;

</description>
        <pubDate>Sun, 08 Mar 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/java/2020/03/08/spring-boot.html</link>
        <guid isPermaLink="true">http://localhost:4000/java/2020/03/08/spring-boot.html</guid>
        
        <category>son</category>
        
        <category>blog</category>
        
        <category>java</category>
        
        <category>spring</category>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>Blog sample</title>
        <description>&lt;h3 id=&quot;헤더header&quot;&gt;헤더(Header)&lt;/h3&gt;

&lt;h1 id=&quot;헤더-크기-h1&quot;&gt;헤더 크기 (h1)&lt;/h1&gt;
&lt;h2 id=&quot;헤더-크기-h2&quot;&gt;헤더 크기 (h2)&lt;/h2&gt;
&lt;h3 id=&quot;헤더-크기-h3&quot;&gt;헤더 크기 (h3)&lt;/h3&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;목록list&quot;&gt;목록(List)&lt;/h3&gt;

&lt;p&gt;Unordered&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Item 1&lt;/li&gt;
  &lt;li&gt;Item 2
    &lt;ul&gt;
      &lt;li&gt;Item 2a&lt;/li&gt;
      &lt;li&gt;Item 2b&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ordered&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Item 1&lt;/li&gt;
  &lt;li&gt;Item 2&lt;/li&gt;
  &lt;li&gt;Item 3
    &lt;ol&gt;
      &lt;li&gt;Item 3a&lt;/li&gt;
      &lt;li&gt;Item 3b&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;이미지images&quot;&gt;이미지(Images)&lt;/h3&gt;

&lt;p&gt;첫번째 방법&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/markdown_logo.jpg&quot; alt=&quot;Github logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Format: &lt;img src=&quot;url 링크&quot; alt=&quot;이미지 alt명&quot; /&gt;&lt;/p&gt;

&lt;p&gt;두번째 방법&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;&lt;img src=&quot;https://github.com/..각자절대경로../images/markdown_syntax.jpg&quot; width=&quot;400px&quot; alt=&quot;sample image&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Format: img 태그 사용 - 이미지경로는 상대경로 or 절대경로&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;하이퍼링크links&quot;&gt;하이퍼링크(Links)&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://github.com&quot; title=&quot;깃허브&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;인용-상자blockquotes&quot;&gt;인용 상자(Blockquotes)&lt;/h3&gt;

&lt;p&gt;As Grace Hopper said:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I’ve always been more interested. 
in the future than in the past.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;강조emphasis&quot;&gt;강조(Emphasis)&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;This text will be italic&lt;/em&gt; 
&lt;em&gt;This will also be italic&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This text will be bold&lt;/strong&gt; 
&lt;strong&gt;This will also be bold&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You &lt;strong&gt;can&lt;/strong&gt; combine them&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;테이블-tables&quot;&gt;테이블 TABLES&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;First Header&lt;/th&gt;
      &lt;th&gt;Second Header&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Content cell 1&lt;/td&gt;
      &lt;td&gt;Content cell 2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Content column 1&lt;/td&gt;
      &lt;td&gt;Content column 2&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;체크-박스task-lists&quot;&gt;체크 박스(Task Lists)&lt;/h3&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;this is a complete item&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;this is an incomplete item&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;@mentions, #refs, &lt;a href=&quot;&quot;&gt;links&lt;/a&gt;, &lt;strong&gt;formatting&lt;/strong&gt;, and &lt;del&gt;tags&lt;/del&gt; supported&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;list syntax required (any unordered or ordered list supported)&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;인라인-코드inline-code&quot;&gt;인라인 코드(Inline code)&lt;/h3&gt;

&lt;p&gt;문단 중간에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Code&lt;/code&gt;를 넣을 수 있습니다. 
예를 들어 &lt;code class=&quot;highlighter-rouge&quot;&gt;printf(&quot;hello world!&quot;);&lt;/code&gt; 이런 식으로 들어갑니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;수평선hr&quot;&gt;수평선(hr)&lt;/h3&gt;

&lt;hr /&gt;
&lt;hr /&gt;
&lt;hr /&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;탈출-문자-backslash-escapes&quot;&gt;탈출 문자 (Backslash Escapes)&lt;/h3&gt;

&lt;p&gt;＼&lt;em&gt;literal asterisks＼&lt;/em&gt; 
&lt;em&gt;literal asterisks&lt;/em&gt; 
&lt;strong&gt;＼&lt;em&gt;＼&lt;/em&gt;Text＼&lt;em&gt;＼&lt;/em&gt;&lt;/strong&gt; 
_＼_Tom＼__&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;이모지emoji---아이콘&quot;&gt;이모지(EMOJI) - 아이콘&lt;/h3&gt;

&lt;p&gt;GitHub supports emoji!&lt;/p&gt;

&lt;p&gt;:+1: :sparkles: :camel: :tada: 
:rocket: :metal: :octocat:&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;코드-블록code-blocks&quot;&gt;코드 블록(Code Blocks)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;코드 내용
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;배지badge-만들기&quot;&gt;배지(badge) 만들기&lt;/h3&gt;

&lt;p&gt;https://shields.io&lt;/p&gt;

&lt;p&gt;작성 예시
&lt;a href=&quot;https://img.shields.io/badge/license-mit-green.svg&amp;quot;&quot;&gt;https://img.shields.io/badge/license-mit-green.svg&quot;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;https://img.shields.io/badge/–.svg&lt;/p&gt;

&lt;p&gt;APM: /apm/l/:packageName.svg&lt;/p&gt;

&lt;p&gt;AUR license: /aur/license/:packageName.svg&lt;/p&gt;
</description>
        <pubDate>Sat, 07 Mar 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/sample/2020/03/07/test.html</link>
        <guid isPermaLink="true">http://localhost:4000/sample/2020/03/07/test.html</guid>
        
        <category>Son</category>
        
        <category>blog</category>
        
        
        <category>Sample</category>
        
      </item>
    
      <item>
        <title>code snippet test</title>
        <description>&lt;p&gt;This is a raw snippet:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hello world
123
This is a text snippet
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is a JavaScript snippet:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const add = (a, b) =&amp;gt; a + b
const minus = (a, b) =&amp;gt; a - b

console.log(add(100,200))  // 300
console.log(minus(100,200))  // -100
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is a Python snippet:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def say_hello():
    print(&quot;hello world!&quot;)

say_hello()   // &quot;hello world!&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;Side note comment: applied a bug fix similar to &lt;a href=&quot;https://github.com/Atlas7/atlas7.github.io/commit/6659f4a47f6ec66987adb0f683a9c6f3842252ae#diff-818954a41dbfb01af70050a459c603b9&quot;&gt;this commit&lt;/a&gt; to ensure code snippet does not collapse unexpectly upon clicking on it. This issue is tracked &lt;a href=&quot;https://github.com/jarrekk/Jalpc/issues/97&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Thu, 21 Dec 2017 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/sample/2017/12/21/test-code-snippets-copy.html</link>
        <guid isPermaLink="true">http://localhost:4000/sample/2017/12/21/test-code-snippets-copy.html</guid>
        
        <category>Jalpc</category>
        
        <category>Jekyll</category>
        
        
        <category>Sample</category>
        
      </item>
    
      <item>
        <title>3 Steps (2 minutes) to Setup Your Personal Website with Jalpc</title>
        <description>&lt;p&gt;Everyone wants to have a personal website, you can display your infomation to public, post blogs and make friends. If you are CS engineer, haveing a self website will benefit your interview.&lt;/p&gt;

&lt;p&gt;So, if you like this website &lt;a href=&quot;https://jarrekk.github.io/Jalpc/&quot;&gt;https://jarrekk.github.io/Jalpc/&lt;/a&gt; or &lt;a href=&quot;http://www.jarrekk.com&quot;&gt;http://www.jarrekk.com&lt;/a&gt; and are willing to have a website, here is a way to build your website in 3 steps(2 minutes). Following are steps to setup your website(make sure you have basic knowledge of &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; and &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;, if you want to custom css/js &lt;a href=&quot;https://github.com/npm/npm&quot;&gt;NPM&lt;/a&gt; is needed):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Fork &lt;a href=&quot;https://github.com/jarrekk/Jalpc&quot;&gt;this project – Jalpc&lt;/a&gt; at &lt;a href=&quot;https://github.com&quot;&gt;GitHub&lt;/a&gt;. If you want to edit website at github, do it as following gif or clone forked repository. &lt;code class=&quot;highlighter-rouge&quot;&gt;git clone git@github.com:github_username/Jalpc.git&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;&lt;!-- ![edit](/crisis513.github.io/static/assets/img/blog/3steps/edit.gif) --&gt;
 &lt;img src=&quot;/crisis513.github.io/static/assets/img/blog/3steps/edit.gif&quot; width=&quot;75%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Enter into repository directory and edit following file list:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;_config.yml&lt;/strong&gt;: edit ‘Website settings’, ‘author’, ‘comment’ and ‘analytics’ items.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;_data/landing.yml&lt;/strong&gt;: custom sections of index page.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;_data/index/&lt;/strong&gt;: edit sections’ data to yours at index page, please notice comment at each file.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;_data/blog.yml&lt;/strong&gt;: edit navbar(categories) of blog page, if you have different/more blog page, copy &lt;code class=&quot;highlighter-rouge&quot;&gt;blog/python.html&lt;/code&gt; and change it to your category HTML file, and edit &lt;strong&gt;Python&lt;/strong&gt;, &lt;strong&gt;/python/&lt;/strong&gt; to your category name at items &lt;strong&gt;title&lt;/strong&gt; and &lt;strong&gt;permalink&lt;/strong&gt;, make sure title is the same as permalink but capitalized first letter(except HTML).&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;CNAME&lt;/strong&gt;: If you wanna release website at your own domain name: edit it and create &lt;code class=&quot;highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt; branch; if you want to use &lt;em&gt;github_username.github.io&lt;/em&gt;: leave it blank.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Go to repo’s settings panel, config &lt;strong&gt;GitHub Pages&lt;/strong&gt; section to make sure website is released.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Push changes to your github repository and view your website, done!&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;From now on, you can post your blog to this website by creating md files at &lt;code class=&quot;highlighter-rouge&quot;&gt;post/&lt;/code&gt; directory and push it to GitHub, you can clear files at this directory before you post blogs.&lt;/p&gt;

&lt;p&gt;If you like this repository, I appreciate you star this repository. Please don’t hesitate to mail me or post issues on GitHub if you have any questions. Hope you have a happy blog time!😊&lt;/p&gt;
</description>
        <pubDate>Tue, 31 Jan 2017 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/sample/2017/01/31/3-steps-to-setup-website-with-Jalpc.html</link>
        <guid isPermaLink="true">http://localhost:4000/sample/2017/01/31/3-steps-to-setup-website-with-Jalpc.html</guid>
        
        <category>Jalpc</category>
        
        <category>Jekyll</category>
        
        
        <category>Sample</category>
        
      </item>
    
  </channel>
</rss>
